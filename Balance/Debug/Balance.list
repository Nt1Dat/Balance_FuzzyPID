
Balance.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000820  0800ce00  0800ce00  0001ce00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d620  0800d620  00020274  2**0
                  CONTENTS
  4 .ARM          00000000  0800d620  0800d620  00020274  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d620  0800d620  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d620  0800d620  0001d620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d624  0800d624  0001d624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  0800d628  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  20000278  0800d89c  00020278  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006cc  0800d89c  000206cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012dac  00000000  00000000  0002029d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c7f  00000000  00000000  00033049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  00035cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  000370a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a4f0  00000000  00000000  00038370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f2e  00000000  00000000  00052860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090788  00000000  00000000  0006878e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f8f16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b84  00000000  00000000  000f8f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000278 	.word	0x20000278
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cde4 	.word	0x0800cde4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000027c 	.word	0x2000027c
 800014c:	0800cde4 	.word	0x0800cde4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_f2uiz>:
 800115c:	0042      	lsls	r2, r0, #1
 800115e:	d20e      	bcs.n	800117e <__aeabi_f2uiz+0x22>
 8001160:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001164:	d30b      	bcc.n	800117e <__aeabi_f2uiz+0x22>
 8001166:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116e:	d409      	bmi.n	8001184 <__aeabi_f2uiz+0x28>
 8001170:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001174:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001178:	fa23 f002 	lsr.w	r0, r3, r2
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2uiz+0x32>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d102      	bne.n	8001194 <__aeabi_f2uiz+0x38>
 800118e:	f04f 30ff 	mov.w	r0, #4294967295
 8001192:	4770      	bx	lr
 8001194:	f04f 0000 	mov.w	r0, #0
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <__aeabi_d2lz>:
 800119c:	b538      	push	{r3, r4, r5, lr}
 800119e:	4605      	mov	r5, r0
 80011a0:	460c      	mov	r4, r1
 80011a2:	2200      	movs	r2, #0
 80011a4:	2300      	movs	r3, #0
 80011a6:	4628      	mov	r0, r5
 80011a8:	4621      	mov	r1, r4
 80011aa:	f7ff fc07 	bl	80009bc <__aeabi_dcmplt>
 80011ae:	b928      	cbnz	r0, 80011bc <__aeabi_d2lz+0x20>
 80011b0:	4628      	mov	r0, r5
 80011b2:	4621      	mov	r1, r4
 80011b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011b8:	f000 b80a 	b.w	80011d0 <__aeabi_d2ulz>
 80011bc:	4628      	mov	r0, r5
 80011be:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80011c2:	f000 f805 	bl	80011d0 <__aeabi_d2ulz>
 80011c6:	4240      	negs	r0, r0
 80011c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011cc:	bd38      	pop	{r3, r4, r5, pc}
 80011ce:	bf00      	nop

080011d0 <__aeabi_d2ulz>:
 80011d0:	b5d0      	push	{r4, r6, r7, lr}
 80011d2:	2200      	movs	r2, #0
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <__aeabi_d2ulz+0x34>)
 80011d6:	4606      	mov	r6, r0
 80011d8:	460f      	mov	r7, r1
 80011da:	f7ff f97d 	bl	80004d8 <__aeabi_dmul>
 80011de:	f7ff fc53 	bl	8000a88 <__aeabi_d2uiz>
 80011e2:	4604      	mov	r4, r0
 80011e4:	f7ff f8fe 	bl	80003e4 <__aeabi_ui2d>
 80011e8:	2200      	movs	r2, #0
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <__aeabi_d2ulz+0x38>)
 80011ec:	f7ff f974 	bl	80004d8 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4630      	mov	r0, r6
 80011f6:	4639      	mov	r1, r7
 80011f8:	f7fe ffb6 	bl	8000168 <__aeabi_dsub>
 80011fc:	f7ff fc44 	bl	8000a88 <__aeabi_d2uiz>
 8001200:	4621      	mov	r1, r4
 8001202:	bdd0      	pop	{r4, r6, r7, pc}
 8001204:	3df00000 	.word	0x3df00000
 8001208:	41f00000 	.word	0x41f00000

0800120c <Balance_init>:
static const float u_ZE_p[] = { 0.0000f };
static const float u_PS_p[] = { 0.3300f };
static const float u_PM_p[] = { 0.4500f };
static const float u_PB_p[] = { 1.0000f };

void Balance_init( void ){
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af0a      	add	r7, sp, #40	; 0x28
    /* Set inputs */
    qFIS_InputSetup( Balance_inputs, e, -1.0000f, 1.0000f );
 8001212:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001216:	4a91      	ldr	r2, [pc, #580]	; (800145c <Balance_init+0x250>)
 8001218:	2100      	movs	r1, #0
 800121a:	4891      	ldr	r0, [pc, #580]	; (8001460 <Balance_init+0x254>)
 800121c:	f001 fbca 	bl	80029b4 <qFIS_InputSetup>
    qFIS_InputSetup( Balance_inputs, edot, -1.0000f, 1.0000f );
 8001220:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001224:	4a8d      	ldr	r2, [pc, #564]	; (800145c <Balance_init+0x250>)
 8001226:	2101      	movs	r1, #1
 8001228:	488d      	ldr	r0, [pc, #564]	; (8001460 <Balance_init+0x254>)
 800122a:	f001 fbc3 	bl	80029b4 <qFIS_InputSetup>
    /* Set outputs */
    qFIS_OutputSetup( Balance_outputs, u, -1.0000f, 1.0000f );
 800122e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001232:	4a8a      	ldr	r2, [pc, #552]	; (800145c <Balance_init+0x250>)
 8001234:	2100      	movs	r1, #0
 8001236:	488b      	ldr	r0, [pc, #556]	; (8001464 <Balance_init+0x258>)
 8001238:	f001 fbe7 	bl	8002a0a <qFIS_OutputSetup>
    /* Set membership functions for the inputs */
    qFIS_SetMF( MFin, e, e_NB, trapmf, NULL, e_NB_p, 1.0f );
 800123c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001240:	9302      	str	r3, [sp, #8]
 8001242:	4b89      	ldr	r3, [pc, #548]	; (8001468 <Balance_init+0x25c>)
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	2300      	movs	r3, #0
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2302      	movs	r3, #2
 800124c:	2200      	movs	r2, #0
 800124e:	2100      	movs	r1, #0
 8001250:	4886      	ldr	r0, [pc, #536]	; (800146c <Balance_init+0x260>)
 8001252:	f001 fc83 	bl	8002b5c <qFIS_SetMF>
    qFIS_SetMF( MFin, e, e_ZE, trimf, NULL, e_ZE_p, 1.0f );
 8001256:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800125a:	9302      	str	r3, [sp, #8]
 800125c:	4b84      	ldr	r3, [pc, #528]	; (8001470 <Balance_init+0x264>)
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	2300      	movs	r3, #0
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2301      	movs	r3, #1
 8001266:	2201      	movs	r2, #1
 8001268:	2100      	movs	r1, #0
 800126a:	4880      	ldr	r0, [pc, #512]	; (800146c <Balance_init+0x260>)
 800126c:	f001 fc76 	bl	8002b5c <qFIS_SetMF>
    qFIS_SetMF( MFin, e, e_PB, trapmf, NULL, e_PB_p, 1.0f );
 8001270:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001274:	9302      	str	r3, [sp, #8]
 8001276:	4b7f      	ldr	r3, [pc, #508]	; (8001474 <Balance_init+0x268>)
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	2300      	movs	r3, #0
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2302      	movs	r3, #2
 8001280:	2202      	movs	r2, #2
 8001282:	2100      	movs	r1, #0
 8001284:	4879      	ldr	r0, [pc, #484]	; (800146c <Balance_init+0x260>)
 8001286:	f001 fc69 	bl	8002b5c <qFIS_SetMF>
    qFIS_SetMF( MFin, e, e_NS, trapmf, NULL, e_NS_p, 1.0f );
 800128a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800128e:	9302      	str	r3, [sp, #8]
 8001290:	4b79      	ldr	r3, [pc, #484]	; (8001478 <Balance_init+0x26c>)
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	2300      	movs	r3, #0
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	2302      	movs	r3, #2
 800129a:	2203      	movs	r2, #3
 800129c:	2100      	movs	r1, #0
 800129e:	4873      	ldr	r0, [pc, #460]	; (800146c <Balance_init+0x260>)
 80012a0:	f001 fc5c 	bl	8002b5c <qFIS_SetMF>
    qFIS_SetMF( MFin, e, e_PS, trapmf, NULL, e_PS_p, 1.0f );
 80012a4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	4b74      	ldr	r3, [pc, #464]	; (800147c <Balance_init+0x270>)
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	2300      	movs	r3, #0
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2302      	movs	r3, #2
 80012b4:	2204      	movs	r2, #4
 80012b6:	2100      	movs	r1, #0
 80012b8:	486c      	ldr	r0, [pc, #432]	; (800146c <Balance_init+0x260>)
 80012ba:	f001 fc4f 	bl	8002b5c <qFIS_SetMF>
    qFIS_SetMF( MFin, edot, edot_NB, trimf, NULL, edot_NB_p, 1.0f );
 80012be:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012c2:	9302      	str	r3, [sp, #8]
 80012c4:	4b6e      	ldr	r3, [pc, #440]	; (8001480 <Balance_init+0x274>)
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	2300      	movs	r3, #0
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2301      	movs	r3, #1
 80012ce:	2205      	movs	r2, #5
 80012d0:	2101      	movs	r1, #1
 80012d2:	4866      	ldr	r0, [pc, #408]	; (800146c <Balance_init+0x260>)
 80012d4:	f001 fc42 	bl	8002b5c <qFIS_SetMF>
    qFIS_SetMF( MFin, edot, edot_ZE, trimf, NULL, edot_ZE_p, 1.0f );
 80012d8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012dc:	9302      	str	r3, [sp, #8]
 80012de:	4b69      	ldr	r3, [pc, #420]	; (8001484 <Balance_init+0x278>)
 80012e0:	9301      	str	r3, [sp, #4]
 80012e2:	2300      	movs	r3, #0
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2301      	movs	r3, #1
 80012e8:	2206      	movs	r2, #6
 80012ea:	2101      	movs	r1, #1
 80012ec:	485f      	ldr	r0, [pc, #380]	; (800146c <Balance_init+0x260>)
 80012ee:	f001 fc35 	bl	8002b5c <qFIS_SetMF>
    qFIS_SetMF( MFin, edot, edot_PB, trimf, NULL, edot_PB_p, 1.0f );
 80012f2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012f6:	9302      	str	r3, [sp, #8]
 80012f8:	4b63      	ldr	r3, [pc, #396]	; (8001488 <Balance_init+0x27c>)
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	2300      	movs	r3, #0
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2301      	movs	r3, #1
 8001302:	2207      	movs	r2, #7
 8001304:	2101      	movs	r1, #1
 8001306:	4859      	ldr	r0, [pc, #356]	; (800146c <Balance_init+0x260>)
 8001308:	f001 fc28 	bl	8002b5c <qFIS_SetMF>
    qFIS_SetMF( MFin, edot, edot_NS, trimf, NULL, edot_NS_p, 1.0f );
 800130c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001310:	9302      	str	r3, [sp, #8]
 8001312:	4b5e      	ldr	r3, [pc, #376]	; (800148c <Balance_init+0x280>)
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	2300      	movs	r3, #0
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2301      	movs	r3, #1
 800131c:	2208      	movs	r2, #8
 800131e:	2101      	movs	r1, #1
 8001320:	4852      	ldr	r0, [pc, #328]	; (800146c <Balance_init+0x260>)
 8001322:	f001 fc1b 	bl	8002b5c <qFIS_SetMF>
    qFIS_SetMF( MFin, edot, edot_PS, trimf, NULL, edot_PS_p, 1.0f );
 8001326:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800132a:	9302      	str	r3, [sp, #8]
 800132c:	4b58      	ldr	r3, [pc, #352]	; (8001490 <Balance_init+0x284>)
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	2300      	movs	r3, #0
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2301      	movs	r3, #1
 8001336:	2209      	movs	r2, #9
 8001338:	2101      	movs	r1, #1
 800133a:	484c      	ldr	r0, [pc, #304]	; (800146c <Balance_init+0x260>)
 800133c:	f001 fc0e 	bl	8002b5c <qFIS_SetMF>
    /* Set membership functions for the outputs */
    qFIS_SetMF( MFout, u, u_NB, constantmf, NULL, u_NB_p, 1.0f );
 8001340:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001344:	9302      	str	r3, [sp, #8]
 8001346:	4b53      	ldr	r3, [pc, #332]	; (8001494 <Balance_init+0x288>)
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	2300      	movs	r3, #0
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	2313      	movs	r3, #19
 8001350:	2200      	movs	r2, #0
 8001352:	2100      	movs	r1, #0
 8001354:	4850      	ldr	r0, [pc, #320]	; (8001498 <Balance_init+0x28c>)
 8001356:	f001 fc01 	bl	8002b5c <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_NM, constantmf, NULL, u_NM_p, 1.0f );
 800135a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800135e:	9302      	str	r3, [sp, #8]
 8001360:	4b4e      	ldr	r3, [pc, #312]	; (800149c <Balance_init+0x290>)
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	2300      	movs	r3, #0
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	2313      	movs	r3, #19
 800136a:	2201      	movs	r2, #1
 800136c:	2100      	movs	r1, #0
 800136e:	484a      	ldr	r0, [pc, #296]	; (8001498 <Balance_init+0x28c>)
 8001370:	f001 fbf4 	bl	8002b5c <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_NS, constantmf, NULL, u_NS_p, 1.0f );
 8001374:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001378:	9302      	str	r3, [sp, #8]
 800137a:	4b49      	ldr	r3, [pc, #292]	; (80014a0 <Balance_init+0x294>)
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	2300      	movs	r3, #0
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2313      	movs	r3, #19
 8001384:	2202      	movs	r2, #2
 8001386:	2100      	movs	r1, #0
 8001388:	4843      	ldr	r0, [pc, #268]	; (8001498 <Balance_init+0x28c>)
 800138a:	f001 fbe7 	bl	8002b5c <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_ZE, constantmf, NULL, u_ZE_p, 1.0f );
 800138e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001392:	9302      	str	r3, [sp, #8]
 8001394:	4b43      	ldr	r3, [pc, #268]	; (80014a4 <Balance_init+0x298>)
 8001396:	9301      	str	r3, [sp, #4]
 8001398:	2300      	movs	r3, #0
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2313      	movs	r3, #19
 800139e:	2203      	movs	r2, #3
 80013a0:	2100      	movs	r1, #0
 80013a2:	483d      	ldr	r0, [pc, #244]	; (8001498 <Balance_init+0x28c>)
 80013a4:	f001 fbda 	bl	8002b5c <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PS, constantmf, NULL, u_PS_p, 1.0f );
 80013a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80013ac:	9302      	str	r3, [sp, #8]
 80013ae:	4b3e      	ldr	r3, [pc, #248]	; (80014a8 <Balance_init+0x29c>)
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	2300      	movs	r3, #0
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2313      	movs	r3, #19
 80013b8:	2204      	movs	r2, #4
 80013ba:	2100      	movs	r1, #0
 80013bc:	4836      	ldr	r0, [pc, #216]	; (8001498 <Balance_init+0x28c>)
 80013be:	f001 fbcd 	bl	8002b5c <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PM, constantmf, NULL, u_PM_p, 1.0f );
 80013c2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	4b38      	ldr	r3, [pc, #224]	; (80014ac <Balance_init+0x2a0>)
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	2300      	movs	r3, #0
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2313      	movs	r3, #19
 80013d2:	2205      	movs	r2, #5
 80013d4:	2100      	movs	r1, #0
 80013d6:	4830      	ldr	r0, [pc, #192]	; (8001498 <Balance_init+0x28c>)
 80013d8:	f001 fbc0 	bl	8002b5c <qFIS_SetMF>
    qFIS_SetMF( MFout, u, u_PB, constantmf, NULL, u_PB_p, 1.0f );
 80013dc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80013e0:	9302      	str	r3, [sp, #8]
 80013e2:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <Balance_init+0x2a4>)
 80013e4:	9301      	str	r3, [sp, #4]
 80013e6:	2300      	movs	r3, #0
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2313      	movs	r3, #19
 80013ec:	2206      	movs	r2, #6
 80013ee:	2100      	movs	r1, #0
 80013f0:	4829      	ldr	r0, [pc, #164]	; (8001498 <Balance_init+0x28c>)
 80013f2:	f001 fbb3 	bl	8002b5c <qFIS_SetMF>

    /* Configure the Inference System */
    qFIS_Setup( &Balance, Sugeno,
 80013f6:	2319      	movs	r3, #25
 80013f8:	9308      	str	r3, [sp, #32]
 80013fa:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <Balance_init+0x2a8>)
 80013fc:	9307      	str	r3, [sp, #28]
 80013fe:	4b2e      	ldr	r3, [pc, #184]	; (80014b8 <Balance_init+0x2ac>)
 8001400:	9306      	str	r3, [sp, #24]
 8001402:	238c      	movs	r3, #140	; 0x8c
 8001404:	9305      	str	r3, [sp, #20]
 8001406:	4b24      	ldr	r3, [pc, #144]	; (8001498 <Balance_init+0x28c>)
 8001408:	9304      	str	r3, [sp, #16]
 800140a:	23c8      	movs	r3, #200	; 0xc8
 800140c:	9303      	str	r3, [sp, #12]
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <Balance_init+0x260>)
 8001410:	9302      	str	r3, [sp, #8]
 8001412:	2334      	movs	r3, #52	; 0x34
 8001414:	9301      	str	r3, [sp, #4]
 8001416:	4b13      	ldr	r3, [pc, #76]	; (8001464 <Balance_init+0x258>)
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2318      	movs	r3, #24
 800141c:	4a10      	ldr	r2, [pc, #64]	; (8001460 <Balance_init+0x254>)
 800141e:	2101      	movs	r1, #1
 8001420:	4826      	ldr	r0, [pc, #152]	; (80014bc <Balance_init+0x2b0>)
 8001422:	f001 f9ef 	bl	8002804 <qFIS_Setup>
                Balance_inputs, sizeof(Balance_inputs),
                Balance_outputs, sizeof(Balance_outputs),
                MFin, sizeof(MFin), MFout, sizeof(MFout),
                rules, rStrength, 25u );
    qFIS_SetDeFuzzMethod( &Balance, wtsum );
 8001426:	2106      	movs	r1, #6
 8001428:	4824      	ldr	r0, [pc, #144]	; (80014bc <Balance_init+0x2b0>)
 800142a:	f001 f9b1 	bl	8002790 <qFIS_SetDeFuzzMethod>
    qFIS_SetParameter( &Balance, qFIS_AND, qFIS_PROD );
 800142e:	2201      	movs	r2, #1
 8001430:	2102      	movs	r1, #2
 8001432:	4822      	ldr	r0, [pc, #136]	; (80014bc <Balance_init+0x2b0>)
 8001434:	f001 f93a 	bl	80026ac <qFIS_SetParameter>
    qFIS_SetParameter( &Balance, qFIS_OR, qFIS_PROBOR );
 8001438:	2203      	movs	r2, #3
 800143a:	2103      	movs	r1, #3
 800143c:	481f      	ldr	r0, [pc, #124]	; (80014bc <Balance_init+0x2b0>)
 800143e:	f001 f935 	bl	80026ac <qFIS_SetParameter>
    qFIS_SetParameter( &Balance, qFIS_Implication, qFIS_PROD );
 8001442:	2201      	movs	r2, #1
 8001444:	2100      	movs	r1, #0
 8001446:	481d      	ldr	r0, [pc, #116]	; (80014bc <Balance_init+0x2b0>)
 8001448:	f001 f930 	bl	80026ac <qFIS_SetParameter>
    qFIS_SetParameter( &Balance, qFIS_Aggregation, qFIS_SUM );
 800144c:	2204      	movs	r2, #4
 800144e:	2101      	movs	r1, #1
 8001450:	481a      	ldr	r0, [pc, #104]	; (80014bc <Balance_init+0x2b0>)
 8001452:	f001 f92b 	bl	80026ac <qFIS_SetParameter>
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	bf800000 	.word	0xbf800000
 8001460:	200002f4 	.word	0x200002f4
 8001464:	2000030c 	.word	0x2000030c
 8001468:	0800cfa4 	.word	0x0800cfa4
 800146c:	20000340 	.word	0x20000340
 8001470:	0800cfb4 	.word	0x0800cfb4
 8001474:	0800cfc0 	.word	0x0800cfc0
 8001478:	0800cfd0 	.word	0x0800cfd0
 800147c:	0800cfe0 	.word	0x0800cfe0
 8001480:	0800cff0 	.word	0x0800cff0
 8001484:	0800cffc 	.word	0x0800cffc
 8001488:	0800d008 	.word	0x0800d008
 800148c:	0800d014 	.word	0x0800d014
 8001490:	0800d020 	.word	0x0800d020
 8001494:	0800d02c 	.word	0x0800d02c
 8001498:	20000408 	.word	0x20000408
 800149c:	0800d030 	.word	0x0800d030
 80014a0:	0800d034 	.word	0x0800d034
 80014a4:	0800d038 	.word	0x0800d038
 80014a8:	0800d03c 	.word	0x0800d03c
 80014ac:	0800d040 	.word	0x0800d040
 80014b0:	0800d044 	.word	0x0800d044
 80014b4:	20000494 	.word	0x20000494
 80014b8:	0800ce10 	.word	0x0800ce10
 80014bc:	20000294 	.word	0x20000294

080014c0 <Balance_run>:

void Balance_run( float *inputs, float *outputs ) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
    /* Set the crips inputs */
    qFIS_SetInput( Balance_inputs, e, inputs[ e ] );
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	2100      	movs	r1, #0
 80014d2:	4811      	ldr	r0, [pc, #68]	; (8001518 <Balance_run+0x58>)
 80014d4:	f001 fb06 	bl	8002ae4 <qFIS_SetInput>
    qFIS_SetInput( Balance_inputs, edot, inputs[ edot ] );
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3304      	adds	r3, #4
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	2101      	movs	r1, #1
 80014e2:	480d      	ldr	r0, [pc, #52]	; (8001518 <Balance_run+0x58>)
 80014e4:	f001 fafe 	bl	8002ae4 <qFIS_SetInput>

    qFIS_Fuzzify( &Balance );
 80014e8:	480c      	ldr	r0, [pc, #48]	; (800151c <Balance_run+0x5c>)
 80014ea:	f001 fc16 	bl	8002d1a <qFIS_Fuzzify>
    if ( qFIS_Inference( &Balance ) > 0 ) {
 80014ee:	480b      	ldr	r0, [pc, #44]	; (800151c <Balance_run+0x5c>)
 80014f0:	f002 f9c8 	bl	8003884 <qFIS_Inference>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	dd02      	ble.n	8001500 <Balance_run+0x40>
        qFIS_DeFuzzify( &Balance );
 80014fa:	4808      	ldr	r0, [pc, #32]	; (800151c <Balance_run+0x5c>)
 80014fc:	f002 f880 	bl	8003600 <qFIS_DeFuzzify>
    else {
        /* Error! */
    }

    /* Get the crips outputs */
    outputs[ u ] = qFIS_GetOutput( Balance_outputs, u );
 8001500:	2100      	movs	r1, #0
 8001502:	4807      	ldr	r0, [pc, #28]	; (8001520 <Balance_run+0x60>)
 8001504:	f001 fb0e 	bl	8002b24 <qFIS_GetOutput>
 8001508:	4602      	mov	r2, r0
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	601a      	str	r2, [r3, #0]
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200002f4 	.word	0x200002f4
 800151c:	20000294 	.word	0x20000294
 8001520:	2000030c 	.word	0x2000030c

08001524 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800152a:	4b14      	ldr	r3, [pc, #80]	; (800157c <MX_GPIO_Init+0x58>)
 800152c:	699b      	ldr	r3, [r3, #24]
 800152e:	4a13      	ldr	r2, [pc, #76]	; (800157c <MX_GPIO_Init+0x58>)
 8001530:	f043 0320 	orr.w	r3, r3, #32
 8001534:	6193      	str	r3, [r2, #24]
 8001536:	4b11      	ldr	r3, [pc, #68]	; (800157c <MX_GPIO_Init+0x58>)
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	f003 0320 	and.w	r3, r3, #32
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <MX_GPIO_Init+0x58>)
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	4a0d      	ldr	r2, [pc, #52]	; (800157c <MX_GPIO_Init+0x58>)
 8001548:	f043 0304 	orr.w	r3, r3, #4
 800154c:	6193      	str	r3, [r2, #24]
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <MX_GPIO_Init+0x58>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <MX_GPIO_Init+0x58>)
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	4a07      	ldr	r2, [pc, #28]	; (800157c <MX_GPIO_Init+0x58>)
 8001560:	f043 0308 	orr.w	r3, r3, #8
 8001564:	6193      	str	r3, [r2, #24]
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <MX_GPIO_Init+0x58>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	607b      	str	r3, [r7, #4]
 8001570:	687b      	ldr	r3, [r7, #4]

}
 8001572:	bf00      	nop
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	40021000 	.word	0x40021000

08001580 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001584:	4b12      	ldr	r3, [pc, #72]	; (80015d0 <MX_I2C2_Init+0x50>)
 8001586:	4a13      	ldr	r2, [pc, #76]	; (80015d4 <MX_I2C2_Init+0x54>)
 8001588:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_I2C2_Init+0x50>)
 800158c:	4a12      	ldr	r2, [pc, #72]	; (80015d8 <MX_I2C2_Init+0x58>)
 800158e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <MX_I2C2_Init+0x50>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <MX_I2C2_Init+0x50>)
 8001598:	2200      	movs	r2, #0
 800159a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_I2C2_Init+0x50>)
 800159e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015a2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a4:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <MX_I2C2_Init+0x50>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_I2C2_Init+0x50>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <MX_I2C2_Init+0x50>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_I2C2_Init+0x50>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015bc:	4804      	ldr	r0, [pc, #16]	; (80015d0 <MX_I2C2_Init+0x50>)
 80015be:	f004 f823 	bl	8005608 <HAL_I2C_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80015c8:	f000 f9e6 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	200004f8 	.word	0x200004f8
 80015d4:	40005800 	.word	0x40005800
 80015d8:	00061a80 	.word	0x00061a80

080015dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a16      	ldr	r2, [pc, #88]	; (8001650 <HAL_I2C_MspInit+0x74>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d124      	bne.n	8001646 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <HAL_I2C_MspInit+0x78>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a14      	ldr	r2, [pc, #80]	; (8001654 <HAL_I2C_MspInit+0x78>)
 8001602:	f043 0308 	orr.w	r3, r3, #8
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_I2C_MspInit+0x78>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001614:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001618:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800161a:	2312      	movs	r3, #18
 800161c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001622:	f107 0310 	add.w	r3, r7, #16
 8001626:	4619      	mov	r1, r3
 8001628:	480b      	ldr	r0, [pc, #44]	; (8001658 <HAL_I2C_MspInit+0x7c>)
 800162a:	f003 fe69 	bl	8005300 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_I2C_MspInit+0x78>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	4a08      	ldr	r2, [pc, #32]	; (8001654 <HAL_I2C_MspInit+0x78>)
 8001634:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001638:	61d3      	str	r3, [r2, #28]
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_I2C_MspInit+0x78>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001646:	bf00      	nop
 8001648:	3720      	adds	r7, #32
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40005800 	.word	0x40005800
 8001654:	40021000 	.word	0x40021000
 8001658:	40010c00 	.word	0x40010c00

0800165c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 HAL_Init();
 8001660:	f003 fcde 	bl	8005020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001664:	f000 f82e 	bl	80016c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001668:	f7ff ff5c 	bl	8001524 <MX_GPIO_Init>
  MX_TIM2_Init();
 800166c:	f003 fad6 	bl	8004c1c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001670:	f003 fb20 	bl	8004cb4 <MX_TIM3_Init>
  MX_I2C2_Init();
 8001674:	f7ff ff84 	bl	8001580 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001678:	f003 fc38 	bl	8004eec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800167c:	480d      	ldr	r0, [pc, #52]	; (80016b4 <main+0x58>)
 800167e:	f005 fc2d 	bl	8006edc <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001682:	2100      	movs	r1, #0
 8001684:	480c      	ldr	r0, [pc, #48]	; (80016b8 <main+0x5c>)
 8001686:	f005 fcd3 	bl	8007030 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800168a:	2104      	movs	r1, #4
 800168c:	480a      	ldr	r0, [pc, #40]	; (80016b8 <main+0x5c>)
 800168e:	f005 fccf 	bl	8007030 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001692:	2108      	movs	r1, #8
 8001694:	4808      	ldr	r0, [pc, #32]	; (80016b8 <main+0x5c>)
 8001696:	f005 fccb 	bl	8007030 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800169a:	210c      	movs	r1, #12
 800169c:	4806      	ldr	r0, [pc, #24]	; (80016b8 <main+0x5c>)
 800169e:	f005 fcc7 	bl	8007030 <HAL_TIM_PWM_Start>

  MPU6050_Init(&hi2c2);
 80016a2:	4806      	ldr	r0, [pc, #24]	; (80016bc <main+0x60>)
 80016a4:	f000 f9e4 	bl	8001a70 <MPU6050_Init>

  Balance_init();
 80016a8:	f7ff fdb0 	bl	800120c <Balance_init>


  current = CF;
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <main+0x64>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <main+0x56>
 80016b4:	200005e4 	.word	0x200005e4
 80016b8:	2000062c 	.word	0x2000062c
 80016bc:	200004f8 	.word	0x200004f8
 80016c0:	2000054c 	.word	0x2000054c

080016c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b090      	sub	sp, #64	; 0x40
 80016c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ca:	f107 0318 	add.w	r3, r7, #24
 80016ce:	2228      	movs	r2, #40	; 0x28
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f006 fc16 	bl	8007f04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	60da      	str	r2, [r3, #12]
 80016e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016e6:	2301      	movs	r3, #1
 80016e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016f0:	2300      	movs	r3, #0
 80016f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f4:	2301      	movs	r3, #1
 80016f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f8:	2302      	movs	r3, #2
 80016fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001700:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001702:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001706:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001708:	f107 0318 	add.w	r3, r7, #24
 800170c:	4618      	mov	r0, r3
 800170e:	f004 ff7b 	bl	8006608 <HAL_RCC_OscConfig>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001718:	f000 f93e 	bl	8001998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800171c:	230f      	movs	r3, #15
 800171e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001720:	2302      	movs	r3, #2
 8001722:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800172c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	2102      	movs	r1, #2
 8001736:	4618      	mov	r0, r3
 8001738:	f005 f9e8 	bl	8006b0c <HAL_RCC_ClockConfig>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001742:	f000 f929 	bl	8001998 <Error_Handler>
  }
}
 8001746:	bf00      	nop
 8001748:	3740      	adds	r7, #64	; 0x40
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001750:	b5b0      	push	{r4, r5, r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]

	  if(htim->Instance == htim2.Instance)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b80      	ldr	r3, [pc, #512]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	f040 80f3 	bne.w	800194c <HAL_TIM_PeriodElapsedCallback+0x1fc>
	  {

		  double dt = (double)(HAL_GetTick() - tim) / 1000;
 8001766:	f003 fcb3 	bl	80050d0 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	4b7d      	ldr	r3, [pc, #500]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x214>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fe36 	bl	80003e4 <__aeabi_ui2d>
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	4b7a      	ldr	r3, [pc, #488]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800177e:	f7fe ffd5 	bl	800072c <__aeabi_ddiv>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	e9c7 2302 	strd	r2, r3, [r7, #8]
		  tim = HAL_GetTick();
 800178a:	f003 fca1 	bl	80050d0 <HAL_GetTick>
 800178e:	4603      	mov	r3, r0
 8001790:	4a74      	ldr	r2, [pc, #464]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001792:	6013      	str	r3, [r2, #0]

		  MPU6050_Read_All(&hi2c2, &MPU);
 8001794:	4975      	ldr	r1, [pc, #468]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001796:	4876      	ldr	r0, [pc, #472]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001798:	f000 f9c2 	bl	8001b20 <MPU6050_Read_All>

		  switch(current){
 800179c:	4b75      	ldr	r3, [pc, #468]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0x224>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d002      	beq.n	80017aa <HAL_TIM_PeriodElapsedCallback+0x5a>
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d056      	beq.n	8001856 <HAL_TIM_PeriodElapsedCallback+0x106>
 80017a8:	e09e      	b.n	80018e8 <HAL_TIM_PeriodElapsedCallback+0x198>

		  case Kalman:
			  MPU.KalmanAngleY += 1.12;
 80017aa:	4b70      	ldr	r3, [pc, #448]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80017ac:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 80017b0:	a369      	add	r3, pc, #420	; (adr r3, 8001958 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80017b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b6:	f7fe fcd9 	bl	800016c <__adddf3>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	496b      	ldr	r1, [pc, #428]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80017c0:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

			  Balance.pitch_dot = (MPU.KalmanAngleY - Balance.pitch) / dt ;
 80017c4:	4b69      	ldr	r3, [pc, #420]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80017c6:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	; 0x60
 80017ca:	4b6b      	ldr	r3, [pc, #428]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7fe fe2a 	bl	8000428 <__aeabi_f2d>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4620      	mov	r0, r4
 80017da:	4629      	mov	r1, r5
 80017dc:	f7fe fcc4 	bl	8000168 <__aeabi_dsub>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4610      	mov	r0, r2
 80017e6:	4619      	mov	r1, r3
 80017e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017ec:	f7fe ff9e 	bl	800072c <__aeabi_ddiv>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	f7ff f966 	bl	8000ac8 <__aeabi_d2f>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4a5e      	ldr	r2, [pc, #376]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001800:	6013      	str	r3, [r2, #0]


			  Balance.input[0] = MPU.KalmanAngleY *  K_pitch;
 8001802:	4b5a      	ldr	r3, [pc, #360]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001804:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	4b5b      	ldr	r3, [pc, #364]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800180e:	f7fe ff8d 	bl	800072c <__aeabi_ddiv>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	f7ff f955 	bl	8000ac8 <__aeabi_d2f>
 800181e:	4603      	mov	r3, r0
 8001820:	4a55      	ldr	r2, [pc, #340]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001822:	6093      	str	r3, [r2, #8]
			  Balance.input[1] = Balance.pitch_dot * K_pitch_dot;
 8001824:	4b54      	ldr	r3, [pc, #336]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4955      	ldr	r1, [pc, #340]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fb5e 	bl	8000eec <__aeabi_fdiv>
 8001830:	4603      	mov	r3, r0
 8001832:	461a      	mov	r2, r3
 8001834:	4b50      	ldr	r3, [pc, #320]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001836:	60da      	str	r2, [r3, #12]

			  Balance.pitch = MPU.KalmanAngleY;
 8001838:	4b4c      	ldr	r3, [pc, #304]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800183a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f7ff f941 	bl	8000ac8 <__aeabi_d2f>
 8001846:	4603      	mov	r3, r0
 8001848:	4a4b      	ldr	r2, [pc, #300]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800184a:	6053      	str	r3, [r2, #4]

			  Balance_run(Balance.input, &Balance.output);
 800184c:	494d      	ldr	r1, [pc, #308]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800184e:	484e      	ldr	r0, [pc, #312]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8001850:	f7ff fe36 	bl	80014c0 <Balance_run>
			  break;
 8001854:	e048      	b.n	80018e8 <HAL_TIM_PeriodElapsedCallback+0x198>

		  case CF:

			 // MPU.CFAngleY += 0.02;

			  Balance.pitch_dot = (MPU.CFAngleY - Balance.pitch) / dt;
 8001856:	4b45      	ldr	r3, [pc, #276]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001858:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800185c:	4b46      	ldr	r3, [pc, #280]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe fde1 	bl	8000428 <__aeabi_f2d>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4620      	mov	r0, r4
 800186c:	4629      	mov	r1, r5
 800186e:	f7fe fc7b 	bl	8000168 <__aeabi_dsub>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800187e:	f7fe ff55 	bl	800072c <__aeabi_ddiv>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	f7ff f91d 	bl	8000ac8 <__aeabi_d2f>
 800188e:	4603      	mov	r3, r0
 8001890:	4a39      	ldr	r2, [pc, #228]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001892:	6013      	str	r3, [r2, #0]

			  Balance.input[0] = MPU.CFAngleY *  K_pitch;
 8001894:	4b35      	ldr	r3, [pc, #212]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001896:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	4b37      	ldr	r3, [pc, #220]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80018a0:	f7fe ff44 	bl	800072c <__aeabi_ddiv>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	f7ff f90c 	bl	8000ac8 <__aeabi_d2f>
 80018b0:	4603      	mov	r3, r0
 80018b2:	4a31      	ldr	r2, [pc, #196]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80018b4:	6093      	str	r3, [r2, #8]
			  Balance.input[1] = Balance.pitch_dot * K_pitch_dot;
 80018b6:	4b30      	ldr	r3, [pc, #192]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4931      	ldr	r1, [pc, #196]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fb15 	bl	8000eec <__aeabi_fdiv>
 80018c2:	4603      	mov	r3, r0
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b2c      	ldr	r3, [pc, #176]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80018c8:	60da      	str	r2, [r3, #12]

			  Balance.pitch = MPU.CFAngleY;
 80018ca:	4b28      	ldr	r3, [pc, #160]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80018cc:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f7ff f8f8 	bl	8000ac8 <__aeabi_d2f>
 80018d8:	4603      	mov	r3, r0
 80018da:	4a27      	ldr	r2, [pc, #156]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80018dc:	6053      	str	r3, [r2, #4]

			   Balance_run(Balance.input, &Balance.output);
 80018de:	4929      	ldr	r1, [pc, #164]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80018e0:	4829      	ldr	r0, [pc, #164]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80018e2:	f7ff fded 	bl	80014c0 <Balance_run>

			   break;
 80018e6:	bf00      	nop


		  }
		  if(Balance.input[0] < -10 || Balance.input[0] > 10)
 80018e8:	4b23      	ldr	r3, [pc, #140]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	4927      	ldr	r1, [pc, #156]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fbe6 	bl	80010c0 <__aeabi_fcmplt>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d108      	bne.n	800190c <HAL_TIM_PeriodElapsedCallback+0x1bc>
 80018fa:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	4924      	ldr	r1, [pc, #144]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fbfb 	bl	80010fc <__aeabi_fcmpgt>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_TIM_PeriodElapsedCallback+0x1c4>
		  	  {
			  	  Balance.output = 0;
 800190c:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	611a      	str	r2, [r3, #16]
		  	  }


		  MotorSetDuty1(Balance.output * K_u);
 8001914:	4b18      	ldr	r3, [pc, #96]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	491e      	ldr	r1, [pc, #120]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x244>)
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fa32 	bl	8000d84 <__aeabi_fmul>
 8001920:	4603      	mov	r3, r0
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fbf4 	bl	8001110 <__aeabi_f2iz>
 8001928:	4603      	mov	r3, r0
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f83a 	bl	80019a4 <MotorSetDuty1>
		  MotorSetDuty2(Balance.output * K_u);
 8001930:	4b11      	ldr	r3, [pc, #68]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	4917      	ldr	r1, [pc, #92]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fa24 	bl	8000d84 <__aeabi_fmul>
 800193c:	4603      	mov	r3, r0
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fbe6 	bl	8001110 <__aeabi_f2iz>
 8001944:	4603      	mov	r3, r0
 8001946:	4618      	mov	r0, r3
 8001948:	f000 f860 	bl	8001a0c <MotorSetDuty2>
//		  }
//		  i++;


	  }
}
 800194c:	bf00      	nop
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bdb0      	pop	{r4, r5, r7, pc}
 8001954:	f3af 8000 	nop.w
 8001958:	1eb851ec 	.word	0x1eb851ec
 800195c:	3ff1eb85 	.word	0x3ff1eb85
 8001960:	200005e4 	.word	0x200005e4
 8001964:	20000550 	.word	0x20000550
 8001968:	408f4000 	.word	0x408f4000
 800196c:	20000558 	.word	0x20000558
 8001970:	200004f8 	.word	0x200004f8
 8001974:	2000054c 	.word	0x2000054c
 8001978:	200005c0 	.word	0x200005c0
 800197c:	40100000 	.word	0x40100000
 8001980:	428c0000 	.word	0x428c0000
 8001984:	200005d0 	.word	0x200005d0
 8001988:	200005c8 	.word	0x200005c8
 800198c:	c1200000 	.word	0xc1200000
 8001990:	41200000 	.word	0x41200000
 8001994:	453b8000 	.word	0x453b8000

08001998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800199c:	b672      	cpsid	i
}
 800199e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <Error_Handler+0x8>
	...

080019a4 <MotorSetDuty1>:
	tmotor->position = 0;
}

//duty cycle of motor
void MotorSetDuty1(int nDuty)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	if(nDuty == 0){
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d108      	bne.n	80019c4 <MotorSetDuty1+0x20>
		htim3.Instance->CCR1 = 0;
 80019b2:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <MotorSetDuty1+0x60>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2200      	movs	r2, #0
 80019b8:	635a      	str	r2, [r3, #52]	; 0x34
		htim3.Instance->CCR2 = 0;
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <MotorSetDuty1+0x60>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2200      	movs	r2, #0
 80019c0:	639a      	str	r2, [r3, #56]	; 0x38
	else if(nDuty < 0){
		htim3.Instance->CCR2 = 0;
		htim3.Instance->CCR1 = abs(nDuty);
	}

}
 80019c2:	e01a      	b.n	80019fa <MotorSetDuty1+0x56>
	else if(nDuty > 0){
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	dd08      	ble.n	80019dc <MotorSetDuty1+0x38>
		htim3.Instance->CCR2 = nDuty;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <MotorSetDuty1+0x60>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	639a      	str	r2, [r3, #56]	; 0x38
		htim2.Instance->CCR1 = 0;
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <MotorSetDuty1+0x64>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2200      	movs	r2, #0
 80019d8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80019da:	e00e      	b.n	80019fa <MotorSetDuty1+0x56>
	else if(nDuty < 0){
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	da0b      	bge.n	80019fa <MotorSetDuty1+0x56>
		htim3.Instance->CCR2 = 0;
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <MotorSetDuty1+0x60>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2200      	movs	r2, #0
 80019e8:	639a      	str	r2, [r3, #56]	; 0x38
		htim3.Instance->CCR1 = abs(nDuty);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80019f0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <MotorSetDuty1+0x60>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	2000062c 	.word	0x2000062c
 8001a08:	200005e4 	.word	0x200005e4

08001a0c <MotorSetDuty2>:

void MotorSetDuty2(int nDuty)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	if(nDuty == 0){
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d108      	bne.n	8001a2c <MotorSetDuty2+0x20>
		htim3.Instance->CCR3 = 0;
 8001a1a:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <MotorSetDuty2+0x60>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	63da      	str	r2, [r3, #60]	; 0x3c
		htim3.Instance->CCR4 = 0;
 8001a22:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <MotorSetDuty2+0x60>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2200      	movs	r2, #0
 8001a28:	641a      	str	r2, [r3, #64]	; 0x40
	else if(nDuty<0){
		htim3.Instance->CCR4 = 0;
		htim3.Instance->CCR3 = abs(nDuty);
	}

}
 8001a2a:	e01a      	b.n	8001a62 <MotorSetDuty2+0x56>
	else if(nDuty>0){
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	dd08      	ble.n	8001a44 <MotorSetDuty2+0x38>
		htim3.Instance->CCR4 = nDuty;
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <MotorSetDuty2+0x60>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	641a      	str	r2, [r3, #64]	; 0x40
		htim3.Instance->CCR3 = 0;
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <MotorSetDuty2+0x60>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001a42:	e00e      	b.n	8001a62 <MotorSetDuty2+0x56>
	else if(nDuty<0){
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	da0b      	bge.n	8001a62 <MotorSetDuty2+0x56>
		htim3.Instance->CCR4 = 0;
 8001a4a:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <MotorSetDuty2+0x60>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	641a      	str	r2, [r3, #64]	; 0x40
		htim3.Instance->CCR3 = abs(nDuty);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001a58:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001a5c:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <MotorSetDuty2+0x60>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr
 8001a6c:	2000062c 	.word	0x2000062c

08001a70 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af04      	add	r7, sp, #16
 8001a76:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001a78:	2364      	movs	r3, #100	; 0x64
 8001a7a:	9302      	str	r3, [sp, #8]
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	9301      	str	r3, [sp, #4]
 8001a80:	f107 030f 	add.w	r3, r7, #15
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2301      	movs	r3, #1
 8001a88:	2275      	movs	r2, #117	; 0x75
 8001a8a:	21d0      	movs	r1, #208	; 0xd0
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f003 fff9 	bl	8005a84 <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	2b68      	cmp	r3, #104	; 0x68
 8001a96:	d13d      	bne.n	8001b14 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001a9c:	2364      	movs	r3, #100	; 0x64
 8001a9e:	9302      	str	r3, [sp, #8]
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	9301      	str	r3, [sp, #4]
 8001aa4:	f107 030e 	add.w	r3, r7, #14
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	2301      	movs	r3, #1
 8001aac:	226b      	movs	r2, #107	; 0x6b
 8001aae:	21d0      	movs	r1, #208	; 0xd0
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f003 feed 	bl	8005890 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001ab6:	2307      	movs	r3, #7
 8001ab8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001aba:	2364      	movs	r3, #100	; 0x64
 8001abc:	9302      	str	r3, [sp, #8]
 8001abe:	2301      	movs	r3, #1
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	f107 030e 	add.w	r3, r7, #14
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	2301      	movs	r3, #1
 8001aca:	2219      	movs	r2, #25
 8001acc:	21d0      	movs	r1, #208	; 0xd0
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f003 fede 	bl	8005890 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001ad8:	2364      	movs	r3, #100	; 0x64
 8001ada:	9302      	str	r3, [sp, #8]
 8001adc:	2301      	movs	r3, #1
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	f107 030e 	add.w	r3, r7, #14
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	221c      	movs	r2, #28
 8001aea:	21d0      	movs	r1, #208	; 0xd0
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f003 fecf 	bl	8005890 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001af2:	2300      	movs	r3, #0
 8001af4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001af6:	2364      	movs	r3, #100	; 0x64
 8001af8:	9302      	str	r3, [sp, #8]
 8001afa:	2301      	movs	r3, #1
 8001afc:	9301      	str	r3, [sp, #4]
 8001afe:	f107 030e 	add.w	r3, r7, #14
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	2301      	movs	r3, #1
 8001b06:	221b      	movs	r2, #27
 8001b08:	21d0      	movs	r1, #208	; 0xd0
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f003 fec0 	bl	8005890 <HAL_I2C_Mem_Write>
        return 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	e000      	b.n	8001b16 <MPU6050_Init+0xa6>
    }
    return 1;
 8001b14:	2301      	movs	r3, #1
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b24:	b094      	sub	sp, #80	; 0x50
 8001b26:	af04      	add	r7, sp, #16
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001b2c:	2364      	movs	r3, #100	; 0x64
 8001b2e:	9302      	str	r3, [sp, #8]
 8001b30:	230e      	movs	r3, #14
 8001b32:	9301      	str	r3, [sp, #4]
 8001b34:	f107 0308 	add.w	r3, r7, #8
 8001b38:	9300      	str	r3, [sp, #0]
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	223b      	movs	r2, #59	; 0x3b
 8001b3e:	21d0      	movs	r1, #208	; 0xd0
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f003 ff9f 	bl	8005a84 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001b46:	7a3b      	ldrb	r3, [r7, #8]
 8001b48:	021b      	lsls	r3, r3, #8
 8001b4a:	b21a      	sxth	r2, r3
 8001b4c:	7a7b      	ldrb	r3, [r7, #9]
 8001b4e:	b21b      	sxth	r3, r3
 8001b50:	4313      	orrs	r3, r2
 8001b52:	b21a      	sxth	r2, r3
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001b58:	7abb      	ldrb	r3, [r7, #10]
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	b21a      	sxth	r2, r3
 8001b5e:	7afb      	ldrb	r3, [r7, #11]
 8001b60:	b21b      	sxth	r3, r3
 8001b62:	4313      	orrs	r3, r2
 8001b64:	b21a      	sxth	r2, r3
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001b6a:	7b3b      	ldrb	r3, [r7, #12]
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	b21a      	sxth	r2, r3
 8001b70:	7b7b      	ldrb	r3, [r7, #13]
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	4313      	orrs	r3, r2
 8001b76:	b21a      	sxth	r2, r3
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001b7c:	7bbb      	ldrb	r3, [r7, #14]
 8001b7e:	021b      	lsls	r3, r3, #8
 8001b80:	b21a      	sxth	r2, r3
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	b21b      	sxth	r3, r3
 8001b86:	4313      	orrs	r3, r2
 8001b88:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001b8a:	7c3b      	ldrb	r3, [r7, #16]
 8001b8c:	021b      	lsls	r3, r3, #8
 8001b8e:	b21a      	sxth	r2, r3
 8001b90:	7c7b      	ldrb	r3, [r7, #17]
 8001b92:	b21b      	sxth	r3, r3
 8001b94:	4313      	orrs	r3, r2
 8001b96:	b21a      	sxth	r2, r3
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001b9c:	7cbb      	ldrb	r3, [r7, #18]
 8001b9e:	021b      	lsls	r3, r3, #8
 8001ba0:	b21a      	sxth	r2, r3
 8001ba2:	7cfb      	ldrb	r3, [r7, #19]
 8001ba4:	b21b      	sxth	r3, r3
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	b21a      	sxth	r2, r3
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001bae:	7d3b      	ldrb	r3, [r7, #20]
 8001bb0:	021b      	lsls	r3, r3, #8
 8001bb2:	b21a      	sxth	r2, r3
 8001bb4:	7d7b      	ldrb	r3, [r7, #21]
 8001bb6:	b21b      	sxth	r3, r3
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	b21a      	sxth	r2, r3
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7fe fc1c 	bl	8000404 <__aeabi_i2d>
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	4b97      	ldr	r3, [pc, #604]	; (8001e30 <MPU6050_Read_All+0x310>)
 8001bd2:	f7fe fdab 	bl	800072c <__aeabi_ddiv>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	6839      	ldr	r1, [r7, #0]
 8001bdc:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fc0c 	bl	8000404 <__aeabi_i2d>
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	4b8f      	ldr	r3, [pc, #572]	; (8001e30 <MPU6050_Read_All+0x310>)
 8001bf2:	f7fe fd9b 	bl	800072c <__aeabi_ddiv>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	6839      	ldr	r1, [r7, #0]
 8001bfc:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fbfc 	bl	8000404 <__aeabi_i2d>
 8001c0c:	a382      	add	r3, pc, #520	; (adr r3, 8001e18 <MPU6050_Read_All+0x2f8>)
 8001c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c12:	f7fe fd8b 	bl	800072c <__aeabi_ddiv>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	6839      	ldr	r1, [r7, #0]
 8001c1c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001c20:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff f859 	bl	8000cdc <__aeabi_i2f>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	4981      	ldr	r1, [pc, #516]	; (8001e34 <MPU6050_Read_All+0x314>)
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff f95c 	bl	8000eec <__aeabi_fdiv>
 8001c34:	4603      	mov	r3, r0
 8001c36:	4980      	ldr	r1, [pc, #512]	; (8001e38 <MPU6050_Read_All+0x318>)
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe ff9b 	bl	8000b74 <__addsf3>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	461a      	mov	r2, r3
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	641a      	str	r2, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7fe fbd9 	bl	8000404 <__aeabi_i2d>
 8001c52:	a373      	add	r3, pc, #460	; (adr r3, 8001e20 <MPU6050_Read_All+0x300>)
 8001c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c58:	f7fe fd68 	bl	800072c <__aeabi_ddiv>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	6839      	ldr	r1, [r7, #0]
 8001c62:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fbc9 	bl	8000404 <__aeabi_i2d>
 8001c72:	a36b      	add	r3, pc, #428	; (adr r3, 8001e20 <MPU6050_Read_All+0x300>)
 8001c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c78:	f7fe fd58 	bl	800072c <__aeabi_ddiv>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	6839      	ldr	r1, [r7, #0]
 8001c82:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fbb9 	bl	8000404 <__aeabi_i2d>
 8001c92:	a363      	add	r3, pc, #396	; (adr r3, 8001e20 <MPU6050_Read_All+0x300>)
 8001c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c98:	f7fe fd48 	bl	800072c <__aeabi_ddiv>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	6839      	ldr	r1, [r7, #0]
 8001ca2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001ca6:	f003 fa13 	bl	80050d0 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	4b63      	ldr	r3, [pc, #396]	; (8001e3c <MPU6050_Read_All+0x31c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fb96 	bl	80003e4 <__aeabi_ui2d>
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	4b60      	ldr	r3, [pc, #384]	; (8001e40 <MPU6050_Read_All+0x320>)
 8001cbe:	f7fe fd35 	bl	800072c <__aeabi_ddiv>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8001cca:	f003 fa01 	bl	80050d0 <HAL_GetTick>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4a5a      	ldr	r2, [pc, #360]	; (8001e3c <MPU6050_Read_All+0x31c>)
 8001cd2:	6013      	str	r3, [r2, #0]

    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce2:	fb03 f202 	mul.w	r2, r3, r2
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cec:	4619      	mov	r1, r3
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001cf4:	fb01 f303 	mul.w	r3, r1, r3
 8001cf8:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fb82 	bl	8000404 <__aeabi_i2d>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4610      	mov	r0, r2
 8001d06:	4619      	mov	r1, r3
 8001d08:	f00a fec5 	bl	800ca96 <sqrt>
 8001d0c:	e9c7 0108 	strd	r0, r1, [r7, #32]
    if (roll_sqrt != 0.0)
 8001d10:	f04f 0200 	mov.w	r2, #0
 8001d14:	f04f 0300 	mov.w	r3, #0
 8001d18:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d1c:	f7fe fe44 	bl	80009a8 <__aeabi_dcmpeq>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d119      	bne.n	8001d5a <MPU6050_Read_All+0x23a>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe fb69 	bl	8000404 <__aeabi_i2d>
 8001d32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d36:	f7fe fcf9 	bl	800072c <__aeabi_ddiv>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4610      	mov	r0, r2
 8001d40:	4619      	mov	r1, r3
 8001d42:	f00a fd19 	bl	800c778 <atan>
 8001d46:	a338      	add	r3, pc, #224	; (adr r3, 8001e28 <MPU6050_Read_All+0x308>)
 8001d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4c:	f7fe fbc4 	bl	80004d8 <__aeabi_dmul>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001d58:	e005      	b.n	8001d66 <MPU6050_Read_All+0x246>
    }
    else
    {
        roll = 0.0;
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d6c:	425b      	negs	r3, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fb48 	bl	8000404 <__aeabi_i2d>
 8001d74:	4682      	mov	sl, r0
 8001d76:	468b      	mov	fp, r1
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fb40 	bl	8000404 <__aeabi_i2d>
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	4650      	mov	r0, sl
 8001d8a:	4659      	mov	r1, fp
 8001d8c:	f00a fe81 	bl	800ca92 <atan2>
 8001d90:	a325      	add	r3, pc, #148	; (adr r3, 8001e28 <MPU6050_Read_All+0x308>)
 8001d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d96:	f7fe fb9f 	bl	80004d8 <__aeabi_dmul>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	4b27      	ldr	r3, [pc, #156]	; (8001e44 <MPU6050_Read_All+0x324>)
 8001da8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001dac:	f7fe fe06 	bl	80009bc <__aeabi_dcmplt>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00a      	beq.n	8001dcc <MPU6050_Read_All+0x2ac>
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	4b21      	ldr	r3, [pc, #132]	; (8001e48 <MPU6050_Read_All+0x328>)
 8001dc2:	f7fe fe19 	bl	80009f8 <__aeabi_dcmpgt>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d114      	bne.n	8001df6 <MPU6050_Read_All+0x2d6>
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <MPU6050_Read_All+0x328>)
 8001dd2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001dd6:	f7fe fe0f 	bl	80009f8 <__aeabi_dcmpgt>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d037      	beq.n	8001e50 <MPU6050_Read_All+0x330>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	4b16      	ldr	r3, [pc, #88]	; (8001e44 <MPU6050_Read_All+0x324>)
 8001dec:	f7fe fde6 	bl	80009bc <__aeabi_dcmplt>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d02c      	beq.n	8001e50 <MPU6050_Read_All+0x330>
    {
        KalmanY.angle = pitch;
 8001df6:	4915      	ldr	r1, [pc, #84]	; (8001e4c <MPU6050_Read_All+0x32c>)
 8001df8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dfc:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8001e00:	6839      	ldr	r1, [r7, #0]
 8001e02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e06:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        DataStruct->CFAngleY = pitch;
 8001e0a:	6839      	ldr	r1, [r7, #0]
 8001e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e10:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8001e14:	e05e      	b.n	8001ed4 <MPU6050_Read_All+0x3b4>
 8001e16:	bf00      	nop
 8001e18:	00000000 	.word	0x00000000
 8001e1c:	40cc2900 	.word	0x40cc2900
 8001e20:	00000000 	.word	0x00000000
 8001e24:	40606000 	.word	0x40606000
 8001e28:	1a63c1f8 	.word	0x1a63c1f8
 8001e2c:	404ca5dc 	.word	0x404ca5dc
 8001e30:	40d00000 	.word	0x40d00000
 8001e34:	43aa0000 	.word	0x43aa0000
 8001e38:	42121eb8 	.word	0x42121eb8
 8001e3c:	200005d4 	.word	0x200005d4
 8001e40:	408f4000 	.word	0x408f4000
 8001e44:	c0568000 	.word	0xc0568000
 8001e48:	40568000 	.word	0x40568000
 8001e4c:	20000048 	.word	0x20000048
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001e56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001e5e:	e9cd 2300 	strd	r2, r3, [sp]
 8001e62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e66:	4850      	ldr	r0, [pc, #320]	; (8001fa8 <MPU6050_Read_All+0x488>)
 8001e68:	f000 f8a4 	bl	8001fb4 <Kalman_getAngle>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	6839      	ldr	r1, [r7, #0]
 8001e72:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        DataStruct->CFAngleY = 0.98 * ( DataStruct->CFAngleY + DataStruct->Gy * dt ) +0.02 * pitch;
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	e9d3 ab14 	ldrd	sl, fp, [r3, #80]	; 0x50
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001e82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e86:	f7fe fb27 	bl	80004d8 <__aeabi_dmul>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4650      	mov	r0, sl
 8001e90:	4659      	mov	r1, fp
 8001e92:	f7fe f96b 	bl	800016c <__adddf3>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	a33e      	add	r3, pc, #248	; (adr r3, 8001f98 <MPU6050_Read_All+0x478>)
 8001ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea4:	f7fe fb18 	bl	80004d8 <__aeabi_dmul>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4692      	mov	sl, r2
 8001eae:	469b      	mov	fp, r3
 8001eb0:	a33b      	add	r3, pc, #236	; (adr r3, 8001fa0 <MPU6050_Read_All+0x480>)
 8001eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001eba:	f7fe fb0d 	bl	80004d8 <__aeabi_dmul>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	4650      	mov	r0, sl
 8001ec4:	4659      	mov	r1, fp
 8001ec6:	f7fe f951 	bl	800016c <__adddf3>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	6839      	ldr	r1, [r7, #0]
 8001ed0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001eda:	4690      	mov	r8, r2
 8001edc:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	4b31      	ldr	r3, [pc, #196]	; (8001fac <MPU6050_Read_All+0x48c>)
 8001ee6:	4640      	mov	r0, r8
 8001ee8:	4649      	mov	r1, r9
 8001eea:	f7fe fd85 	bl	80009f8 <__aeabi_dcmpgt>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d008      	beq.n	8001f06 <MPU6050_Read_All+0x3e6>
    {
        DataStruct->Gx = -DataStruct->Gx;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001efa:	4614      	mov	r4, r2
 8001efc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    }
    	DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001f0c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001f14:	e9cd 2300 	strd	r2, r3, [sp]
 8001f18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f1c:	4824      	ldr	r0, [pc, #144]	; (8001fb0 <MPU6050_Read_All+0x490>)
 8001f1e:	f000 f849 	bl	8001fb4 <Kalman_getAngle>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	6839      	ldr	r1, [r7, #0]
 8001f28:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    	DataStruct->CFAngleX = 0.98 * ( DataStruct->CFAngleX + DataStruct->Gx * dt ) +0.02 * roll;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001f38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f3c:	f7fe facc 	bl	80004d8 <__aeabi_dmul>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4620      	mov	r0, r4
 8001f46:	4629      	mov	r1, r5
 8001f48:	f7fe f910 	bl	800016c <__adddf3>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4610      	mov	r0, r2
 8001f52:	4619      	mov	r1, r3
 8001f54:	a310      	add	r3, pc, #64	; (adr r3, 8001f98 <MPU6050_Read_All+0x478>)
 8001f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5a:	f7fe fabd 	bl	80004d8 <__aeabi_dmul>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4614      	mov	r4, r2
 8001f64:	461d      	mov	r5, r3
 8001f66:	a30e      	add	r3, pc, #56	; (adr r3, 8001fa0 <MPU6050_Read_All+0x480>)
 8001f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001f70:	f7fe fab2 	bl	80004d8 <__aeabi_dmul>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4620      	mov	r0, r4
 8001f7a:	4629      	mov	r1, r5
 8001f7c:	f7fe f8f6 	bl	800016c <__adddf3>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	6839      	ldr	r1, [r7, #0]
 8001f86:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

}
 8001f8a:	bf00      	nop
 8001f8c:	3740      	adds	r7, #64	; 0x40
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f94:	f3af 8000 	nop.w
 8001f98:	f5c28f5c 	.word	0xf5c28f5c
 8001f9c:	3fef5c28 	.word	0x3fef5c28
 8001fa0:	47ae147b 	.word	0x47ae147b
 8001fa4:	3f947ae1 	.word	0x3f947ae1
 8001fa8:	20000048 	.word	0x20000048
 8001fac:	40568000 	.word	0x40568000
 8001fb0:	20000000 	.word	0x20000000

08001fb4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8001fb4:	b5b0      	push	{r4, r5, r7, lr}
 8001fb6:	b092      	sub	sp, #72	; 0x48
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	e9c7 2300 	strd	r2, r3, [r7]
    double rate = newRate - Kalman->bias;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001fc6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001fca:	f7fe f8cd 	bl	8000168 <__aeabi_dsub>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += dt * rate;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001fdc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fe0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001fe4:	f7fe fa78 	bl	80004d8 <__aeabi_dmul>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4620      	mov	r0, r4
 8001fee:	4629      	mov	r1, r5
 8001ff0:	f7fe f8bc 	bl	800016c <__adddf3>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	68f9      	ldr	r1, [r7, #12]
 8001ffa:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800200a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800200e:	f7fe fa63 	bl	80004d8 <__aeabi_dmul>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4610      	mov	r0, r2
 8002018:	4619      	mov	r1, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002020:	f7fe f8a2 	bl	8000168 <__aeabi_dsub>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4610      	mov	r0, r2
 800202a:	4619      	mov	r1, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002032:	f7fe f899 	bl	8000168 <__aeabi_dsub>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002044:	f7fe f892 	bl	800016c <__adddf3>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4610      	mov	r0, r2
 800204e:	4619      	mov	r1, r3
 8002050:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002054:	f7fe fa40 	bl	80004d8 <__aeabi_dmul>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4620      	mov	r0, r4
 800205e:	4629      	mov	r1, r5
 8002060:	f7fe f884 	bl	800016c <__adddf3>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	68f9      	ldr	r1, [r7, #12]
 800206a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800207a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800207e:	f7fe fa2b 	bl	80004d8 <__aeabi_dmul>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4620      	mov	r0, r4
 8002088:	4629      	mov	r1, r5
 800208a:	f7fe f86d 	bl	8000168 <__aeabi_dsub>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	68f9      	ldr	r1, [r7, #12]
 8002094:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80020a4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80020a8:	f7fe fa16 	bl	80004d8 <__aeabi_dmul>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4620      	mov	r0, r4
 80020b2:	4629      	mov	r1, r5
 80020b4:	f7fe f858 	bl	8000168 <__aeabi_dsub>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	68f9      	ldr	r1, [r7, #12]
 80020be:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80020ce:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80020d2:	f7fe fa01 	bl	80004d8 <__aeabi_dmul>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4620      	mov	r0, r4
 80020dc:	4629      	mov	r1, r5
 80020de:	f7fe f845 	bl	800016c <__adddf3>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	68f9      	ldr	r1, [r7, #12]
 80020e8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80020f8:	f7fe f838 	bl	800016c <__adddf3>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800210a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800210e:	f7fe fb0d 	bl	800072c <__aeabi_ddiv>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	e9c7 2304 	strd	r2, r3, [r7, #16]
    K[1] = Kalman->P[1][0] / S;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002120:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002124:	f7fe fb02 	bl	800072c <__aeabi_ddiv>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	e9c7 2306 	strd	r2, r3, [r7, #24]

    double y = newAngle - Kalman->angle;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002136:	e9d7 0100 	ldrd	r0, r1, [r7]
 800213a:	f7fe f815 	bl	8000168 <__aeabi_dsub>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    Kalman->angle += K[0] * y;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800214c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002150:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002154:	f7fe f9c0 	bl	80004d8 <__aeabi_dmul>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4620      	mov	r0, r4
 800215e:	4629      	mov	r1, r5
 8002160:	f7fe f804 	bl	800016c <__adddf3>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	68f9      	ldr	r1, [r7, #12]
 800216a:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002174:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002178:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800217c:	f7fe f9ac 	bl	80004d8 <__aeabi_dmul>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4620      	mov	r0, r4
 8002186:	4629      	mov	r1, r5
 8002188:	f7fd fff0 	bl	800016c <__adddf3>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	68f9      	ldr	r1, [r7, #12]
 8002192:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800219c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double P01_temp = Kalman->P[0][1];
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80021a6:	e9c7 2308 	strd	r2, r3, [r7, #32]

    Kalman->P[0][0] -= K[0] * P00_temp;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80021b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021b8:	f7fe f98e 	bl	80004d8 <__aeabi_dmul>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4620      	mov	r0, r4
 80021c2:	4629      	mov	r1, r5
 80021c4:	f7fd ffd0 	bl	8000168 <__aeabi_dsub>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	68f9      	ldr	r1, [r7, #12]
 80021ce:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80021d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80021dc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021e0:	f7fe f97a 	bl	80004d8 <__aeabi_dmul>
 80021e4:	4602      	mov	r2, r0
 80021e6:	460b      	mov	r3, r1
 80021e8:	4620      	mov	r0, r4
 80021ea:	4629      	mov	r1, r5
 80021ec:	f7fd ffbc 	bl	8000168 <__aeabi_dsub>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	68f9      	ldr	r1, [r7, #12]
 80021f6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002200:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002204:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002208:	f7fe f966 	bl	80004d8 <__aeabi_dmul>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4620      	mov	r0, r4
 8002212:	4629      	mov	r1, r5
 8002214:	f7fd ffa8 	bl	8000168 <__aeabi_dsub>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	68f9      	ldr	r1, [r7, #12]
 800221e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002228:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800222c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002230:	f7fe f952 	bl	80004d8 <__aeabi_dmul>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4620      	mov	r0, r4
 800223a:	4629      	mov	r1, r5
 800223c:	f7fd ff94 	bl	8000168 <__aeabi_dsub>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	68f9      	ldr	r1, [r7, #12]
 8002246:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
};
 8002250:	4610      	mov	r0, r2
 8002252:	4619      	mov	r1, r3
 8002254:	3748      	adds	r7, #72	; 0x48
 8002256:	46bd      	mov	sp, r7
 8002258:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800225c <_qFFMath_GetAbnormal>:
(void)memcpy( &dst, &src, sizeof(dst_type) )                                \

static float qFFMath_CalcCbrt( float x , bool r );
/*============================================================================*/
float _qFFMath_GetAbnormal( const int i )
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
    static const uint32_t u_ab[ 2 ] = { 0x7F800000u, 0x7FBFFFFFu };
    static float f_ab[ 2 ] = { 0.0f, 0.0f };
    static bool init = true;
    
    if ( init ) {
 8002264:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <_qFFMath_GetAbnormal+0x34>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <_qFFMath_GetAbnormal+0x22>
        /*cppcheck-suppress misra-c2012-21.15 */
        (void)memcpy( f_ab, u_ab, sizeof(f_ab) );
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <_qFFMath_GetAbnormal+0x38>)
 800226e:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <_qFFMath_GetAbnormal+0x3c>)
 8002270:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002274:	e883 0003 	stmia.w	r3, {r0, r1}
        init = false;
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <_qFFMath_GetAbnormal+0x34>)
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
    }
    
    return f_ab[ i ]; 
 800227e:	4a05      	ldr	r2, [pc, #20]	; (8002294 <_qFFMath_GetAbnormal+0x38>)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002286:	4618      	mov	r0, r3
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	20000090 	.word	0x20000090
 8002294:	200005d8 	.word	0x200005d8
 8002298:	0800d048 	.word	0x0800d048

0800229c <qFFMath_FPClassify>:
/*============================================================================*/
int qFFMath_FPClassify( const float f ) 
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
    uint32_t u = 0u;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
    int retVal;

    /*cppcheck-suppress misra-c2012-21.15 */
    cast_reinterpret( u, f, uint32_t );
 80022aa:	60bb      	str	r3, [r7, #8]
    u &= 0x7FFFFFFFu;
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022b2:	60bb      	str	r3, [r7, #8]

    if ( 0u == u ) {
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d102      	bne.n	80022c0 <qFFMath_FPClassify+0x24>
        retVal = QFFM_FP_ZERO;
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	e016      	b.n	80022ee <qFFMath_FPClassify+0x52>
    }
    else if ( u < 0x00800000u ) {
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022c6:	d202      	bcs.n	80022ce <qFFMath_FPClassify+0x32>
        retVal = QFFM_FP_SUBNORMAL;
 80022c8:	2301      	movs	r3, #1
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	e00f      	b.n	80022ee <qFFMath_FPClassify+0x52>
    }
    else if ( u < 0x7F800000u ) {
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80022d4:	d202      	bcs.n	80022dc <qFFMath_FPClassify+0x40>
        retVal = QFFM_FP_NORMAL;
 80022d6:	2302      	movs	r3, #2
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	e008      	b.n	80022ee <qFFMath_FPClassify+0x52>
    }
    else if ( 0x7F800000U == u ) {
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80022e2:	d102      	bne.n	80022ea <qFFMath_FPClassify+0x4e>
        retVal = QFFM_FP_INFINITE;
 80022e4:	2303      	movs	r3, #3
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	e001      	b.n	80022ee <qFFMath_FPClassify+0x52>
    }
    else {
        retVal = QFFM_FP_NAN;
 80022ea:	2304      	movs	r3, #4
 80022ec:	60fb      	str	r3, [r7, #12]
    }

    return retVal;
 80022ee:	68fb      	ldr	r3, [r7, #12]
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr

080022fa <qFFMath_IsNaN>:
/*============================================================================*/
bool qFFMath_IsNaN( const float x )
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
    return ( QFFM_FP_NAN == qFFMath_FPClassify( x ) );
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff ffca 	bl	800229c <qFFMath_FPClassify>
 8002308:	4603      	mov	r3, r0
 800230a:	2b04      	cmp	r3, #4
 800230c:	bf0c      	ite	eq
 800230e:	2301      	moveq	r3, #1
 8002310:	2300      	movne	r3, #0
 8002312:	b2db      	uxtb	r3, r3
}
 8002314:	4618      	mov	r0, r3
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <qFFMath_Abs>:
{
    return ( qFFMath_FPClassify( x ) == QFFM_FP_NORMAL );
}
/*============================================================================*/
float qFFMath_Abs( float x )
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
    return ( x < 0.0f ) ? -x : x;
 8002324:	f04f 0100 	mov.w	r1, #0
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7fe fec9 	bl	80010c0 <__aeabi_fcmplt>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <qFFMath_Abs+0x20>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800233a:	e000      	b.n	800233e <qFFMath_Abs+0x22>
 800233c:	687b      	ldr	r3, [r7, #4]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <qFFMath_Sqrt>:
    
    return z*( 2.0f - ( x*z ) );
}
/*============================================================================*/
float qFFMath_Sqrt( float x )
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b086      	sub	sp, #24
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x < 0.0f ) {
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f04f 0100 	mov.w	r1, #0
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe feb3 	bl	80010c0 <__aeabi_fcmplt>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d004      	beq.n	800236a <qFFMath_Sqrt+0x24>
        retVal = QFFM_NAN;
 8002360:	2001      	movs	r0, #1
 8002362:	f7ff ff7b 	bl	800225c <_qFFMath_GetAbnormal>
 8002366:	6178      	str	r0, [r7, #20]
 8002368:	e02f      	b.n	80023ca <qFFMath_Sqrt+0x84>
    }
    else if ( QFFM_FP_ZERO == qFFMath_FPClassify( x ) ) {
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff ff95 	bl	800229c <qFFMath_FPClassify>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d103      	bne.n	8002380 <qFFMath_Sqrt+0x3a>
        retVal = 0.0f;
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	e024      	b.n	80023ca <qFFMath_Sqrt+0x84>
    }
    else {
        uint32_t y = 0u;
 8002380:	2300      	movs	r3, #0
 8002382:	613b      	str	r3, [r7, #16]
        float z = 0.0f;
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	687b      	ldr	r3, [r7, #4]
        /*cppcheck-suppress misra-c2012-21.15 */
        cast_reinterpret( y, x, uint32_t );
 800238c:	613b      	str	r3, [r7, #16]
        y = ( ( y - 0x00800000u ) >> 1u ) + 0x20000000u;
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8002394:	085b      	lsrs	r3, r3, #1
 8002396:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	693b      	ldr	r3, [r7, #16]
        /*cppcheck-suppress misra-c2012-21.15 */
        cast_reinterpret( z, y, float );
 800239e:	60fb      	str	r3, [r7, #12]
        retVal = ( ( x/z ) + z ) * 0.5f;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	4611      	mov	r1, r2
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe fda0 	bl	8000eec <__aeabi_fdiv>
 80023ac:	4603      	mov	r3, r0
 80023ae:	461a      	mov	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4619      	mov	r1, r3
 80023b4:	4610      	mov	r0, r2
 80023b6:	f7fe fbdd 	bl	8000b74 <__addsf3>
 80023ba:	4603      	mov	r3, r0
 80023bc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe fcdf 	bl	8000d84 <__aeabi_fmul>
 80023c6:	4603      	mov	r3, r0
 80023c8:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 80023ca:	697b      	ldr	r3, [r7, #20]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <qFFMath_Sin>:
    return ( QFFM_FP_ZERO == qFFMath_FPClassify( x )) ? QFFM_NAN
                                                      : ( x - ( y*qFFMath_Trunc( x/y ) ) );
}
/*============================================================================*/
float qFFMath_Sin( float x )
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
    float y;

    x *= -QFFM_1_PI;
 80023dc:	491e      	ldr	r1, [pc, #120]	; (8002458 <qFFMath_Sin+0x84>)
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7fe fcd0 	bl	8000d84 <__aeabi_fmul>
 80023e4:	4603      	mov	r3, r0
 80023e6:	607b      	str	r3, [r7, #4]
    y = x + 25165824.0f;
 80023e8:	491c      	ldr	r1, [pc, #112]	; (800245c <qFFMath_Sin+0x88>)
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7fe fbc2 	bl	8000b74 <__addsf3>
 80023f0:	4603      	mov	r3, r0
 80023f2:	60fb      	str	r3, [r7, #12]
    x -= y - 25165824.0f;
 80023f4:	4919      	ldr	r1, [pc, #100]	; (800245c <qFFMath_Sin+0x88>)
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f7fe fbba 	bl	8000b70 <__aeabi_fsub>
 80023fc:	4603      	mov	r3, r0
 80023fe:	4619      	mov	r1, r3
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7fe fbb5 	bl	8000b70 <__aeabi_fsub>
 8002406:	4603      	mov	r3, r0
 8002408:	607b      	str	r3, [r7, #4]
    x *= qFFMath_Abs( x ) - 1.0f;
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ff86 	bl	800231c <qFFMath_Abs>
 8002410:	4603      	mov	r3, r0
 8002412:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe fbaa 	bl	8000b70 <__aeabi_fsub>
 800241c:	4603      	mov	r3, r0
 800241e:	4619      	mov	r1, r3
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7fe fcaf 	bl	8000d84 <__aeabi_fmul>
 8002426:	4603      	mov	r3, r0
 8002428:	607b      	str	r3, [r7, #4]

    return x*( ( 3.5841304553896f*qFFMath_Abs( x ) ) + 3.1039673861526f );
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff ff76 	bl	800231c <qFFMath_Abs>
 8002430:	4603      	mov	r3, r0
 8002432:	490b      	ldr	r1, [pc, #44]	; (8002460 <qFFMath_Sin+0x8c>)
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe fca5 	bl	8000d84 <__aeabi_fmul>
 800243a:	4603      	mov	r3, r0
 800243c:	4909      	ldr	r1, [pc, #36]	; (8002464 <qFFMath_Sin+0x90>)
 800243e:	4618      	mov	r0, r3
 8002440:	f7fe fb98 	bl	8000b74 <__addsf3>
 8002444:	4603      	mov	r3, r0
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe fc9b 	bl	8000d84 <__aeabi_fmul>
 800244e:	4603      	mov	r3, r0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	bea2f983 	.word	0xbea2f983
 800245c:	4bc00000 	.word	0x4bc00000
 8002460:	40656265 	.word	0x40656265
 8002464:	4046a767 	.word	0x4046a767

08002468 <qFFMath_Cos>:
/*============================================================================*/
float qFFMath_Cos( float x )
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
    return qFFMath_Sin( x + QFFM_PI_2 );
 8002470:	4906      	ldr	r1, [pc, #24]	; (800248c <qFFMath_Cos+0x24>)
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fe fb7e 	bl	8000b74 <__addsf3>
 8002478:	4603      	mov	r3, r0
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff ffaa 	bl	80023d4 <qFFMath_Sin>
 8002480:	4603      	mov	r3, r0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	3fc90fdb 	.word	0x3fc90fdb

08002490 <qFFMath_Exp2>:

    return y + ( f*( ( 0.5f*t ) - y ) );
}
/*============================================================================*/
float qFFMath_Exp2( float x )
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x <= -126.0f ) {
 8002498:	492e      	ldr	r1, [pc, #184]	; (8002554 <qFFMath_Exp2+0xc4>)
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7fe fe1a 	bl	80010d4 <__aeabi_fcmple>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <qFFMath_Exp2+0x1e>
        retVal = 0.0f;
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	e04c      	b.n	8002548 <qFFMath_Exp2+0xb8>
    }
    else if ( x > 128.0f ) {
 80024ae:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7fe fe22 	bl	80010fc <__aeabi_fcmpgt>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d004      	beq.n	80024c8 <qFFMath_Exp2+0x38>
        retVal = QFFM_INFINITY;
 80024be:	2000      	movs	r0, #0
 80024c0:	f7ff fecc 	bl	800225c <_qFFMath_GetAbnormal>
 80024c4:	6178      	str	r0, [r7, #20]
 80024c6:	e03f      	b.n	8002548 <qFFMath_Exp2+0xb8>
    }
    else {
        float y = 0.0f;
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
        uint32_t exponent;
        /*cstat -CERT-FLP34-C -MISRAC2012-Rule-10.8*/
        exponent = (uint32_t)( x + 127.0f );
 80024ce:	4922      	ldr	r1, [pc, #136]	; (8002558 <qFFMath_Exp2+0xc8>)
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7fe fb4f 	bl	8000b74 <__addsf3>
 80024d6:	4603      	mov	r3, r0
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe fe3f 	bl	800115c <__aeabi_f2uiz>
 80024de:	4603      	mov	r3, r0
 80024e0:	60fb      	str	r3, [r7, #12]
        /*cstat +CERT-FLP34-C +MISRAC2012-Rule-10.8 -CERT-FLP36-C*/
        x += 127.0f - (float)exponent;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe fbf5 	bl	8000cd4 <__aeabi_ui2f>
 80024ea:	4603      	mov	r3, r0
 80024ec:	4619      	mov	r1, r3
 80024ee:	481a      	ldr	r0, [pc, #104]	; (8002558 <qFFMath_Exp2+0xc8>)
 80024f0:	f7fe fb3e 	bl	8000b70 <__aeabi_fsub>
 80024f4:	4603      	mov	r3, r0
 80024f6:	4619      	mov	r1, r3
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7fe fb3b 	bl	8000b74 <__addsf3>
 80024fe:	4603      	mov	r3, r0
 8002500:	607b      	str	r3, [r7, #4]
        /*cstat +CERT-FLP36-C*/
        exponent <<= 23u;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	05db      	lsls	r3, r3, #23
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
        /*cppcheck-suppress misra-c2012-21.15 */
        cast_reinterpret( y, exponent, float );
 800250a:	613b      	str	r3, [r7, #16]
        x *= ( x*0.339766027f ) + 0.660233972f;
 800250c:	4913      	ldr	r1, [pc, #76]	; (800255c <qFFMath_Exp2+0xcc>)
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fe fc38 	bl	8000d84 <__aeabi_fmul>
 8002514:	4603      	mov	r3, r0
 8002516:	4912      	ldr	r1, [pc, #72]	; (8002560 <qFFMath_Exp2+0xd0>)
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe fb2b 	bl	8000b74 <__addsf3>
 800251e:	4603      	mov	r3, r0
 8002520:	4619      	mov	r1, r3
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7fe fc2e 	bl	8000d84 <__aeabi_fmul>
 8002528:	4603      	mov	r3, r0
 800252a:	607b      	str	r3, [r7, #4]
        retVal = y*( x + 1.0f );
 800252c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7fe fb1f 	bl	8000b74 <__addsf3>
 8002536:	4603      	mov	r3, r0
 8002538:	461a      	mov	r2, r3
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4619      	mov	r1, r3
 800253e:	4610      	mov	r0, r2
 8002540:	f7fe fc20 	bl	8000d84 <__aeabi_fmul>
 8002544:	4603      	mov	r3, r0
 8002546:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002548:	697b      	ldr	r3, [r7, #20]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	c2fc0000 	.word	0xc2fc0000
 8002558:	42fe0000 	.word	0x42fe0000
 800255c:	3eadf5d0 	.word	0x3eadf5d0
 8002560:	3f290518 	.word	0x3f290518

08002564 <qFFMath_Log2>:
/*============================================================================*/
float qFFMath_Log2( float x )
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
    float retVal;

    if ( x < 0.0f ) {
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f04f 0100 	mov.w	r1, #0
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe fda4 	bl	80010c0 <__aeabi_fcmplt>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d004      	beq.n	8002588 <qFFMath_Log2+0x24>
        retVal = QFFM_NAN;
 800257e:	2001      	movs	r0, #1
 8002580:	f7ff fe6c 	bl	800225c <_qFFMath_GetAbnormal>
 8002584:	6178      	str	r0, [r7, #20]
 8002586:	e049      	b.n	800261c <qFFMath_Log2+0xb8>
    }
    else if ( QFFM_FP_ZERO == qFFMath_FPClassify( x ) ) {
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff fe86 	bl	800229c <qFFMath_FPClassify>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d107      	bne.n	80025a6 <qFFMath_Log2+0x42>
        retVal = -QFFM_INFINITY;
 8002596:	2000      	movs	r0, #0
 8002598:	f7ff fe60 	bl	800225c <_qFFMath_GetAbnormal>
 800259c:	4603      	mov	r3, r0
 800259e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	e03a      	b.n	800261c <qFFMath_Log2+0xb8>
    }
    else {
        uint32_t y = 0u, y2;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	687b      	ldr	r3, [r7, #4]
        /*cppcheck-suppress misra-c2012-21.15 */
        cast_reinterpret( y, x, uint32_t );
 80025ac:	60fb      	str	r3, [r7, #12]
        y2 = y;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	613b      	str	r3, [r7, #16]
        y >>= 23u;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	0ddb      	lsrs	r3, r3, #23
 80025b6:	60fb      	str	r3, [r7, #12]
        /*cstat -CERT-FLP36-C*/
        retVal = (float)y;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fe fb8a 	bl	8000cd4 <__aeabi_ui2f>
 80025c0:	4603      	mov	r3, r0
 80025c2:	617b      	str	r3, [r7, #20]
        /*cstat +CERT-FLP36-C*/
        y = ( y2 & 0x007FFFFFu ) | 0x3F800000u;
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80025ca:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]
        /*cppcheck-suppress misra-c2012-21.15 */
        cast_reinterpret( x, y, float );
 80025d2:	607b      	str	r3, [r7, #4]
        retVal += -128.0f + ( x*( ( -0.333333333f*x ) + 2.0f ) ) - 0.666666666f;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4914      	ldr	r1, [pc, #80]	; (8002628 <qFFMath_Log2+0xc4>)
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fe fbd3 	bl	8000d84 <__aeabi_fmul>
 80025de:	4603      	mov	r3, r0
 80025e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe fac5 	bl	8000b74 <__addsf3>
 80025ea:	4603      	mov	r3, r0
 80025ec:	461a      	mov	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4619      	mov	r1, r3
 80025f2:	4610      	mov	r0, r2
 80025f4:	f7fe fbc6 	bl	8000d84 <__aeabi_fmul>
 80025f8:	4603      	mov	r3, r0
 80025fa:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fab6 	bl	8000b70 <__aeabi_fsub>
 8002604:	4603      	mov	r3, r0
 8002606:	4909      	ldr	r1, [pc, #36]	; (800262c <qFFMath_Log2+0xc8>)
 8002608:	4618      	mov	r0, r3
 800260a:	f7fe fab1 	bl	8000b70 <__aeabi_fsub>
 800260e:	4603      	mov	r3, r0
 8002610:	4619      	mov	r1, r3
 8002612:	6978      	ldr	r0, [r7, #20]
 8002614:	f7fe faae 	bl	8000b74 <__addsf3>
 8002618:	4603      	mov	r3, r0
 800261a:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 800261c:	697b      	ldr	r3, [r7, #20]
}
 800261e:	4618      	mov	r0, r3
 8002620:	3718      	adds	r7, #24
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	beaaaaab 	.word	0xbeaaaaab
 800262c:	3f2aaaab 	.word	0x3f2aaaab

08002630 <qFFMath_Exp>:
/*============================================================================*/
float qFFMath_Exp( float x )
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
    return qFFMath_Exp2( QFFM_LOG2E*x );
 8002638:	4906      	ldr	r1, [pc, #24]	; (8002654 <qFFMath_Exp+0x24>)
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fe fba2 	bl	8000d84 <__aeabi_fmul>
 8002640:	4603      	mov	r3, r0
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff ff24 	bl	8002490 <qFFMath_Exp2>
 8002648:	4603      	mov	r3, r0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	3fb8aa3b 	.word	0x3fb8aa3b

08002658 <qFFMath_Log>:
{
    return qFFMath_Exp2( 3.32192809f*x );
}
/*============================================================================*/
float qFFMath_Log( float x )
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
    return QFFM_LN2*qFFMath_Log2(x);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff ff7f 	bl	8002564 <qFFMath_Log2>
 8002666:	4603      	mov	r3, r0
 8002668:	4904      	ldr	r1, [pc, #16]	; (800267c <qFFMath_Log+0x24>)
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fb8a 	bl	8000d84 <__aeabi_fmul>
 8002670:	4603      	mov	r3, r0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	3f317218 	.word	0x3f317218

08002680 <qFFMath_Pow>:
    return 0.301029996f*qFFMath_Log2(x);
}
/*============================================================================*/
float qFFMath_Pow( float b,
                   float e )
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
    return qFFMath_Exp2( e*qFFMath_Log2( b ) );
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7ff ff6a 	bl	8002564 <qFFMath_Log2>
 8002690:	4603      	mov	r3, r0
 8002692:	6839      	ldr	r1, [r7, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7fe fb75 	bl	8000d84 <__aeabi_fmul>
 800269a:	4603      	mov	r3, r0
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fef7 	bl	8002490 <qFFMath_Exp2>
 80026a2:	4603      	mov	r3, r0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <qFIS_SetParameter>:

/*============================================================================*/
int qFIS_SetParameter( qFIS_t * const f,
                       const qFIS_Parameter_t p,
                       const qFIS_ParamValue_t x )
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	70fb      	strb	r3, [r7, #3]
 80026b8:	4613      	mov	r3, r2
 80026ba:	70bb      	strb	r3, [r7, #2]
    int retVal = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	60fb      	str	r3, [r7, #12]
    typedef float (*methods_fcn)( const float a, const float b );
    static const methods_fcn method[ 5 ] = { &qFIS_Min, &qFIS_Prod, &qFIS_Max,
                                             &qFIS_ProbOR, &qFIS_Sum
                                           };

    if ( NULL != f ) {
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d04f      	beq.n	8002766 <qFIS_SetParameter+0xba>
        switch ( p ) {
 80026c6:	78fb      	ldrb	r3, [r7, #3]
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d84e      	bhi.n	800276a <qFIS_SetParameter+0xbe>
 80026cc:	a201      	add	r2, pc, #4	; (adr r2, 80026d4 <qFIS_SetParameter+0x28>)
 80026ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d2:	bf00      	nop
 80026d4:	080026e9 	.word	0x080026e9
 80026d8:	08002701 	.word	0x08002701
 80026dc:	0800271f 	.word	0x0800271f
 80026e0:	08002737 	.word	0x08002737
 80026e4:	08002755 	.word	0x08002755
            case qFIS_Implication:
                if ( x <= qFIS_PROD ) {
 80026e8:	78bb      	ldrb	r3, [r7, #2]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d83f      	bhi.n	800276e <qFIS_SetParameter+0xc2>
                    /*cppcheck-suppress misra-c2012-11.1 */
                    f->implicate = method[ x ];
 80026ee:	78bb      	ldrb	r3, [r7, #2]
 80026f0:	4a26      	ldr	r2, [pc, #152]	; (800278c <qFIS_SetParameter+0xe0>)
 80026f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	619a      	str	r2, [r3, #24]
                    retVal = 1;
 80026fa:	2301      	movs	r3, #1
 80026fc:	60fb      	str	r3, [r7, #12]
                }
                break;
 80026fe:	e036      	b.n	800276e <qFIS_SetParameter+0xc2>
            case qFIS_Aggregation:
                if ( ( x >= qFIS_MAX ) && ( x <= qFIS_SUM ) ) {
 8002700:	78bb      	ldrb	r3, [r7, #2]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d935      	bls.n	8002772 <qFIS_SetParameter+0xc6>
 8002706:	78bb      	ldrb	r3, [r7, #2]
 8002708:	2b04      	cmp	r3, #4
 800270a:	d832      	bhi.n	8002772 <qFIS_SetParameter+0xc6>
                    /*cppcheck-suppress misra-c2012-11.1 */
                    f->aggregate = method[ x ];
 800270c:	78bb      	ldrb	r3, [r7, #2]
 800270e:	4a1f      	ldr	r2, [pc, #124]	; (800278c <qFIS_SetParameter+0xe0>)
 8002710:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	61da      	str	r2, [r3, #28]
                    retVal = 1;
 8002718:	2301      	movs	r3, #1
 800271a:	60fb      	str	r3, [r7, #12]
                }
                break;
 800271c:	e029      	b.n	8002772 <qFIS_SetParameter+0xc6>
            case qFIS_AND:
                if ( x <= qFIS_PROD ) {
 800271e:	78bb      	ldrb	r3, [r7, #2]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d828      	bhi.n	8002776 <qFIS_SetParameter+0xca>
                    /*cppcheck-suppress misra-c2012-11.1 */
                    f->andOp = method[ x ];
 8002724:	78bb      	ldrb	r3, [r7, #2]
 8002726:	4a19      	ldr	r2, [pc, #100]	; (800278c <qFIS_SetParameter+0xe0>)
 8002728:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	611a      	str	r2, [r3, #16]
                    retVal = 1;
 8002730:	2301      	movs	r3, #1
 8002732:	60fb      	str	r3, [r7, #12]
                }
                break;
 8002734:	e01f      	b.n	8002776 <qFIS_SetParameter+0xca>
            case qFIS_OR:
                if ( ( x >= qFIS_MAX ) && ( x <= qFIS_PROBOR ) ) {
 8002736:	78bb      	ldrb	r3, [r7, #2]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d91e      	bls.n	800277a <qFIS_SetParameter+0xce>
 800273c:	78bb      	ldrb	r3, [r7, #2]
 800273e:	2b03      	cmp	r3, #3
 8002740:	d81b      	bhi.n	800277a <qFIS_SetParameter+0xce>
                    /*cppcheck-suppress misra-c2012-11.1 */
                    f->orOp = method[ x ];
 8002742:	78bb      	ldrb	r3, [r7, #2]
 8002744:	4a11      	ldr	r2, [pc, #68]	; (800278c <qFIS_SetParameter+0xe0>)
 8002746:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	615a      	str	r2, [r3, #20]
                    retVal = 1;
 800274e:	2301      	movs	r3, #1
 8002750:	60fb      	str	r3, [r7, #12]
                }
                break;
 8002752:	e012      	b.n	800277a <qFIS_SetParameter+0xce>
            case qFIS_EvalPoints:
                if ( (int)x >= 20 ) {
 8002754:	78bb      	ldrb	r3, [r7, #2]
 8002756:	2b13      	cmp	r3, #19
 8002758:	d911      	bls.n	800277e <qFIS_SetParameter+0xd2>
                    f->nPoints = (size_t)x;
 800275a:	78ba      	ldrb	r2, [r7, #2]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	64da      	str	r2, [r3, #76]	; 0x4c
                    retVal = 1;
 8002760:	2301      	movs	r3, #1
 8002762:	60fb      	str	r3, [r7, #12]
                }
                break;
 8002764:	e00b      	b.n	800277e <qFIS_SetParameter+0xd2>
            default:
                break;
        }
    }
 8002766:	bf00      	nop
 8002768:	e00a      	b.n	8002780 <qFIS_SetParameter+0xd4>
                break;
 800276a:	bf00      	nop
 800276c:	e008      	b.n	8002780 <qFIS_SetParameter+0xd4>
                break;
 800276e:	bf00      	nop
 8002770:	e006      	b.n	8002780 <qFIS_SetParameter+0xd4>
                break;
 8002772:	bf00      	nop
 8002774:	e004      	b.n	8002780 <qFIS_SetParameter+0xd4>
                break;
 8002776:	bf00      	nop
 8002778:	e002      	b.n	8002780 <qFIS_SetParameter+0xd4>
                break;
 800277a:	bf00      	nop
 800277c:	e000      	b.n	8002780 <qFIS_SetParameter+0xd4>
                break;
 800277e:	bf00      	nop

    return retVal;
 8002780:	68fb      	ldr	r3, [r7, #12]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr
 800278c:	0800d050 	.word	0x0800d050

08002790 <qFIS_SetDeFuzzMethod>:
/*============================================================================*/
int qFIS_SetDeFuzzMethod( qFIS_t * const f,
                          qFIS_DeFuzz_Method_t m )
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	70fb      	strb	r3, [r7, #3]
    int retVal = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
                                                            &qFIS_DeFuzz_SOM,
                                                            &qFIS_DeFuzz_WtAverage,
                                                            &qFIS_DeFuzz_WtSum
                                                          };

    if ( ( NULL != f ) || ( m < _NUM_DFUZZ ) ) {
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d102      	bne.n	80027ac <qFIS_SetDeFuzzMethod+0x1c>
 80027a6:	78fb      	ldrb	r3, [r7, #3]
 80027a8:	2b06      	cmp	r3, #6
 80027aa:	d822      	bhi.n	80027f2 <qFIS_SetDeFuzzMethod+0x62>
        if ( ( ( Mamdani == f->type ) && ( m <= som ) ) ||
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d102      	bne.n	80027bc <qFIS_SetDeFuzzMethod+0x2c>
 80027b6:	78fb      	ldrb	r3, [r7, #3]
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d912      	bls.n	80027e2 <qFIS_SetDeFuzzMethod+0x52>
             ( ( Sugeno == f->type ) && ( m >= wtaver ) && ( m <= wtsum ) ) ||
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
        if ( ( ( Mamdani == f->type ) && ( m <= som ) ) ||
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d105      	bne.n	80027d2 <qFIS_SetDeFuzzMethod+0x42>
             ( ( Sugeno == f->type ) && ( m >= wtaver ) && ( m <= wtsum ) ) ||
 80027c6:	78fb      	ldrb	r3, [r7, #3]
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d902      	bls.n	80027d2 <qFIS_SetDeFuzzMethod+0x42>
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	2b06      	cmp	r3, #6
 80027d0:	d907      	bls.n	80027e2 <qFIS_SetDeFuzzMethod+0x52>
             ( ( Tsukamoto == f->type ) && ( wtaver == m ) )) {
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
             ( ( Sugeno == f->type ) && ( m >= wtaver ) && ( m <= wtsum ) ) ||
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d10a      	bne.n	80027f2 <qFIS_SetDeFuzzMethod+0x62>
             ( ( Tsukamoto == f->type ) && ( wtaver == m ) )) {
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	2b05      	cmp	r3, #5
 80027e0:	d107      	bne.n	80027f2 <qFIS_SetDeFuzzMethod+0x62>
            /*cppcheck-suppress misra-c2012-11.1 */
            f->deFuzz = method[ m ];
 80027e2:	78fb      	ldrb	r3, [r7, #3]
 80027e4:	4a06      	ldr	r2, [pc, #24]	; (8002800 <qFIS_SetDeFuzzMethod+0x70>)
 80027e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	629a      	str	r2, [r3, #40]	; 0x28
            retVal = 1;
 80027ee:	2301      	movs	r3, #1
 80027f0:	60fb      	str	r3, [r7, #12]
        }
    }
    return retVal;
 80027f2:	68fb      	ldr	r3, [r7, #12]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	0800d064 	.word	0x0800d064

08002804 <qFIS_Setup>:
                qFIS_MF_t *const mf_outputs,
                const size_t nmo,
                const qFIS_Rules_t * const r,
                float *wi,
                const size_t n )
{
 8002804:	b5b0      	push	{r4, r5, r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	607a      	str	r2, [r7, #4]
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	460b      	mov	r3, r1
 8002812:	72fb      	strb	r3, [r7, #11]
    int retVal = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]

    if ( ( NULL != f ) && ( t <= Tsukamoto ) && ( NULL != r ) && ( NULL != wi ) ) {
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 80bb 	beq.w	8002996 <qFIS_Setup+0x192>
 8002820:	7afb      	ldrb	r3, [r7, #11]
 8002822:	2b02      	cmp	r3, #2
 8002824:	f200 80b7 	bhi.w	8002996 <qFIS_Setup+0x192>
 8002828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 80b3 	beq.w	8002996 <qFIS_Setup+0x192>
 8002830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 80af 	beq.w	8002996 <qFIS_Setup+0x192>
        size_t i;

        f->nInputs = ni/sizeof(qFIS_Input_t);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	4a59      	ldr	r2, [pc, #356]	; (80029a0 <qFIS_Setup+0x19c>)
 800283c:	fba2 2303 	umull	r2, r3, r2, r3
 8002840:	08da      	lsrs	r2, r3, #3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	63da      	str	r2, [r3, #60]	; 0x3c
        f->nOutputs = no/sizeof(qFIS_Output_t);
 8002846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002848:	4a56      	ldr	r2, [pc, #344]	; (80029a4 <qFIS_Setup+0x1a0>)
 800284a:	fba2 2303 	umull	r2, r3, r2, r3
 800284e:	091a      	lsrs	r2, r3, #4
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	641a      	str	r2, [r3, #64]	; 0x40
        f->nMFInputs = nmi/sizeof(qFIS_MF_t);
 8002854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002856:	4a54      	ldr	r2, [pc, #336]	; (80029a8 <qFIS_Setup+0x1a4>)
 8002858:	fba2 2303 	umull	r2, r3, r2, r3
 800285c:	091a      	lsrs	r2, r3, #4
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	645a      	str	r2, [r3, #68]	; 0x44
        f->nMFOutputs = nmo/sizeof(qFIS_MF_t);
 8002862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002864:	4a50      	ldr	r2, [pc, #320]	; (80029a8 <qFIS_Setup+0x1a4>)
 8002866:	fba2 2303 	umull	r2, r3, r2, r3
 800286a:	091a      	lsrs	r2, r3, #4
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	649a      	str	r2, [r3, #72]	; 0x48
        f->input = inputs;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	601a      	str	r2, [r3, #0]
        f->output = outputs;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800287a:	605a      	str	r2, [r3, #4]
        f->inMF = mf_inputs;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002880:	609a      	str	r2, [r3, #8]
        f->outMF = mf_outputs;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002886:	60da      	str	r2, [r3, #12]
        f->wi = wi;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800288c:	631a      	str	r2, [r3, #48]	; 0x30
        f->rules = r;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002892:	635a      	str	r2, [r3, #52]	; 0x34
        f->nRules = n;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002898:	651a      	str	r2, [r3, #80]	; 0x50
        f->type = t;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	7afa      	ldrb	r2, [r7, #11]
 800289e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
        retVal += qFIS_SetParameter( f, qFIS_EvalPoints, (qFIS_ParamValue_t)100 );
 80028a2:	2264      	movs	r2, #100	; 0x64
 80028a4:	2104      	movs	r1, #4
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f7ff ff00 	bl	80026ac <qFIS_SetParameter>
 80028ac:	4602      	mov	r2, r0
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	4413      	add	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_AND, qFIS_MIN );
 80028b4:	2200      	movs	r2, #0
 80028b6:	2102      	movs	r1, #2
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f7ff fef7 	bl	80026ac <qFIS_SetParameter>
 80028be:	4602      	mov	r2, r0
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	4413      	add	r3, r2
 80028c4:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_OR, qFIS_MAX );
 80028c6:	2202      	movs	r2, #2
 80028c8:	2103      	movs	r1, #3
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f7ff feee 	bl	80026ac <qFIS_SetParameter>
 80028d0:	4602      	mov	r2, r0
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	4413      	add	r3, r2
 80028d6:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_Implication, qFIS_MIN );
 80028d8:	2200      	movs	r2, #0
 80028da:	2100      	movs	r1, #0
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f7ff fee5 	bl	80026ac <qFIS_SetParameter>
 80028e2:	4602      	mov	r2, r0
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	4413      	add	r3, r2
 80028e8:	617b      	str	r3, [r7, #20]
        retVal += qFIS_SetParameter( f, qFIS_Aggregation, qFIS_MAX );
 80028ea:	2202      	movs	r2, #2
 80028ec:	2101      	movs	r1, #1
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f7ff fedc 	bl	80026ac <qFIS_SetParameter>
 80028f4:	4602      	mov	r2, r0
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	4413      	add	r3, r2
 80028fa:	617b      	str	r3, [r7, #20]
        /*cppcheck-suppress misra-c2012-10.6 */
        retVal = ( 5 == retVal ) ? 1 : 0;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	2b05      	cmp	r3, #5
 8002900:	bf0c      	ite	eq
 8002902:	2301      	moveq	r3, #1
 8002904:	2300      	movne	r3, #0
 8002906:	b2db      	uxtb	r3, r3
 8002908:	617b      	str	r3, [r7, #20]
        f->deFuzz = ( Mamdani == t ) ? &qFIS_DeFuzz_Centroid
                                     : &qFIS_DeFuzz_WtAverage;
 800290a:	7afb      	ldrb	r3, [r7, #11]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <qFIS_Setup+0x110>
 8002910:	4a26      	ldr	r2, [pc, #152]	; (80029ac <qFIS_Setup+0x1a8>)
 8002912:	e000      	b.n	8002916 <qFIS_Setup+0x112>
 8002914:	4a26      	ldr	r2, [pc, #152]	; (80029b0 <qFIS_Setup+0x1ac>)
        f->deFuzz = ( Mamdani == t ) ? &qFIS_DeFuzz_Centroid
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	629a      	str	r2, [r3, #40]	; 0x28
        f->ruleWeight = NULL;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	62da      	str	r2, [r3, #44]	; 0x2c
        for ( i = 0u ; i < f->nOutputs ; ++i ) {
 8002920:	2300      	movs	r3, #0
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	e032      	b.n	800298c <qFIS_Setup+0x188>
            /*cstat -CERT-FLP36-C*/
            f->output[ i ].res = ( f->output[ i ].b.max - f->output[ i ].b.min )/(float)f->nPoints;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	2134      	movs	r1, #52	; 0x34
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	4413      	add	r3, r2
 8002934:	6858      	ldr	r0, [r3, #4]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	2134      	movs	r1, #52	; 0x34
 800293e:	fb01 f303 	mul.w	r3, r1, r3
 8002942:	4413      	add	r3, r2
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4619      	mov	r1, r3
 8002948:	f7fe f912 	bl	8000b70 <__aeabi_fsub>
 800294c:	4603      	mov	r3, r0
 800294e:	461d      	mov	r5, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002954:	4618      	mov	r0, r3
 8002956:	f7fe f9bd 	bl	8000cd4 <__aeabi_ui2f>
 800295a:	4601      	mov	r1, r0
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	2034      	movs	r0, #52	; 0x34
 8002964:	fb00 f303 	mul.w	r3, r0, r3
 8002968:	18d4      	adds	r4, r2, r3
 800296a:	4628      	mov	r0, r5
 800296c:	f7fe fabe 	bl	8000eec <__aeabi_fdiv>
 8002970:	4603      	mov	r3, r0
 8002972:	61a3      	str	r3, [r4, #24]
            /*cstat +CERT-FLP36-C*/
            f->output[ i ].owner = f;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	2134      	movs	r1, #52	; 0x34
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	4413      	add	r3, r2
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	60da      	str	r2, [r3, #12]
        for ( i = 0u ; i < f->nOutputs ; ++i ) {
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	3301      	adds	r3, #1
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	429a      	cmp	r2, r3
 8002994:	d3c7      	bcc.n	8002926 <qFIS_Setup+0x122>
        }
    }

    return retVal;
 8002996:	697b      	ldr	r3, [r7, #20]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bdb0      	pop	{r4, r5, r7, pc}
 80029a0:	aaaaaaab 	.word	0xaaaaaaab
 80029a4:	4ec4ec4f 	.word	0x4ec4ec4f
 80029a8:	cccccccd 	.word	0xcccccccd
 80029ac:	0800322d 	.word	0x0800322d
 80029b0:	080035a1 	.word	0x080035a1

080029b4 <qFIS_InputSetup>:
/*============================================================================*/
int qFIS_InputSetup( qFIS_Input_t * const v,
                     const qFIS_Tag_t t,
                     const float min,
                     const float max )
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
 80029c0:	603b      	str	r3, [r7, #0]
    int retVal = 0;
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d018      	beq.n	80029fe <qFIS_InputSetup+0x4a>
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	db15      	blt.n	80029fe <qFIS_InputSetup+0x4a>
        v[ t ].b.min = min;
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	4613      	mov	r3, r2
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	4413      	add	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	461a      	mov	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4413      	add	r3, r2
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	601a      	str	r2, [r3, #0]
        v[ t ].b.max = max;
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	4613      	mov	r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	461a      	mov	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4413      	add	r3, r2
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	605a      	str	r2, [r3, #4]
        retVal = 1;
 80029fa:	2301      	movs	r3, #1
 80029fc:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 80029fe:	697b      	ldr	r3, [r7, #20]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	371c      	adds	r7, #28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr

08002a0a <qFIS_OutputSetup>:
/*============================================================================*/
int qFIS_OutputSetup( qFIS_Output_t * const v,
                      const qFIS_Tag_t t,
                      const float min,
                      const float max )
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b087      	sub	sp, #28
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	60f8      	str	r0, [r7, #12]
 8002a12:	60b9      	str	r1, [r7, #8]
 8002a14:	607a      	str	r2, [r7, #4]
 8002a16:	603b      	str	r3, [r7, #0]
    int retVal = 0;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d05a      	beq.n	8002ad8 <qFIS_OutputSetup+0xce>
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	db57      	blt.n	8002ad8 <qFIS_OutputSetup+0xce>
        v[ t ].data[ 0 ] = 0.0f;
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2234      	movs	r2, #52	; 0x34
 8002a2c:	fb02 f303 	mul.w	r3, r2, r3
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4413      	add	r3, r2
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24
        v[ t ].data[ 1 ] = 0.0f;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2234      	movs	r2, #52	; 0x34
 8002a3e:	fb02 f303 	mul.w	r3, r2, r3
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4413      	add	r3, r2
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28
        v[ t ].data[ 2 ] = 0.0f;
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2234      	movs	r2, #52	; 0x34
 8002a50:	fb02 f303 	mul.w	r3, r2, r3
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	4413      	add	r3, r2
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	62da      	str	r2, [r3, #44]	; 0x2c
        v[ t ].data[ 3 ] = 0.0f;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2234      	movs	r2, #52	; 0x34
 8002a62:	fb02 f303 	mul.w	r3, r2, r3
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	4413      	add	r3, r2
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	631a      	str	r2, [r3, #48]	; 0x30
        v[ t ].x = 0.0f;
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2234      	movs	r2, #52	; 0x34
 8002a74:	fb02 f303 	mul.w	r3, r2, r3
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	61da      	str	r2, [r3, #28]
        v[ t ].y = 0.0f;
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2234      	movs	r2, #52	; 0x34
 8002a86:	fb02 f303 	mul.w	r3, r2, r3
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	621a      	str	r2, [r3, #32]
        v[ t ].b.min = min;
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2234      	movs	r2, #52	; 0x34
 8002a98:	fb02 f303 	mul.w	r3, r2, r3
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	601a      	str	r2, [r3, #0]
        v[ t ].b.max = max;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2234      	movs	r2, #52	; 0x34
 8002aa8:	fb02 f303 	mul.w	r3, r2, r3
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	4413      	add	r3, r2
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	605a      	str	r2, [r3, #4]
        v[ t ].xag = NULL;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2234      	movs	r2, #52	; 0x34
 8002ab8:	fb02 f303 	mul.w	r3, r2, r3
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4413      	add	r3, r2
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	611a      	str	r2, [r3, #16]
        v[ t ].yag = NULL;
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2234      	movs	r2, #52	; 0x34
 8002ac8:	fb02 f303 	mul.w	r3, r2, r3
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	4413      	add	r3, r2
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	615a      	str	r2, [r3, #20]
        retVal = 1;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002ad8:	697b      	ldr	r3, [r7, #20]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	371c      	adds	r7, #28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <qFIS_SetInput>:
/*============================================================================*/
int qFIS_SetInput( qFIS_Input_t * const v,
                   const qFIS_Tag_t t,
                   const float value )
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
    int retVal = 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00e      	beq.n	8002b18 <qFIS_SetInput+0x34>
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	db0b      	blt.n	8002b18 <qFIS_SetInput+0x34>
        v[ t ].b.value = value;
 8002b00:	68ba      	ldr	r2, [r7, #8]
 8002b02:	4613      	mov	r3, r2
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4413      	add	r3, r2
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	609a      	str	r2, [r3, #8]
        retVal = 1;
 8002b14:	2301      	movs	r3, #1
 8002b16:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002b18:	697b      	ldr	r3, [r7, #20]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	371c      	adds	r7, #28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <qFIS_GetOutput>:
/*============================================================================*/
float qFIS_GetOutput( const qFIS_Output_t * const v,
                      const qFIS_Tag_t t )
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
    float retVal = 0.0f;
 8002b2e:	f04f 0300 	mov.w	r3, #0
 8002b32:	60fb      	str	r3, [r7, #12]

    if ( ( NULL != v ) && ( t >= 0 ) ) {
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00a      	beq.n	8002b50 <qFIS_GetOutput+0x2c>
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	db07      	blt.n	8002b50 <qFIS_GetOutput+0x2c>
        retVal = v[ t ].b.value;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	2234      	movs	r2, #52	; 0x34
 8002b44:	fb02 f303 	mul.w	r3, r2, r3
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	60fb      	str	r3, [r7, #12]
    }

    return retVal;
 8002b50:	68fb      	ldr	r3, [r7, #12]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr

08002b5c <qFIS_SetMF>:
                const qFIS_Tag_t mf,
                const qFIS_MF_Name_t s,
                qFIS_MF_Fcn_t custom_mf,
                const float *cp,
                float h )
{
 8002b5c:	b590      	push	{r4, r7, lr}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
 8002b68:	70fb      	strb	r3, [r7, #3]
    int retVal = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	617b      	str	r3, [r7, #20]
    /* Only for Tsukamoto consequents*/
    &qFIS_TLinSMF, &qFIS_TLinZMF, &qFIS_TConcaveMF,&qFIS_TSigMF, &qFIS_TSMF,
    &qFIS_TZMF
    };

    if ( ( NULL != m ) && ( io >= 0 ) && ( mf >= 0 ) && ( s < _NUM_MFS ) ) {
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d055      	beq.n	8002c20 <qFIS_SetMF+0xc4>
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	db52      	blt.n	8002c20 <qFIS_SetMF+0xc4>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	db4f      	blt.n	8002c20 <qFIS_SetMF+0xc4>
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	2b1a      	cmp	r3, #26
 8002b84:	d84c      	bhi.n	8002c20 <qFIS_SetMF+0xc4>
        if ( NULL != custom_mf ) {
 8002b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00a      	beq.n	8002ba2 <qFIS_SetMF+0x46>
            m[ mf ].shape = custom_mf; /*user-defined membership function*/
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	461a      	mov	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	e00c      	b.n	8002bbc <qFIS_SetMF+0x60>
        }
        else {
            /*cppcheck-suppress misra-c2012-11.1 */
            m[ mf ].shape = fShape[ s ];
 8002ba2:	78f9      	ldrb	r1, [r7, #3]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	461a      	mov	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	4a1d      	ldr	r2, [pc, #116]	; (8002c2c <qFIS_SetMF+0xd0>)
 8002bb6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002bba:	601a      	str	r2, [r3, #0]
        }
        m[ mf ].index = (size_t)io;
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4413      	add	r3, r2
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	611a      	str	r2, [r3, #16]
        m[ mf ].points = cp;
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	461a      	mov	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	4413      	add	r3, r2
 8002be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002be2:	605a      	str	r2, [r3, #4]
        m[ mf ].fx = 0.0f;
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	461a      	mov	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	609a      	str	r2, [r3, #8]
        m[ mf ].h = qFIS_Bound( h, 0.0f, 1.0f );
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	461a      	mov	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	189c      	adds	r4, r3, r2
 8002c0a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c0e:	f04f 0100 	mov.w	r1, #0
 8002c12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c14:	f001 fe6d 	bl	80048f2 <qFIS_Bound>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	60e3      	str	r3, [r4, #12]
        retVal = 1;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	617b      	str	r3, [r7, #20]
    }

    return retVal;
 8002c20:	697b      	ldr	r3, [r7, #20]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	371c      	adds	r7, #28
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd90      	pop	{r4, r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	0800d080 	.word	0x0800d080

08002c30 <qFIS_EvalInputMFs>:

    return retVal;
}
/*============================================================================*/
static void qFIS_EvalInputMFs( qFIS_t * const f )
{
 8002c30:	b5b0      	push	{r4, r5, r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
    size_t i;
    qFIS_MF_t *mf;

    for ( i = 0 ; i < f->nMFInputs ; ++i ) {
 8002c38:	2300      	movs	r3, #0
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	e026      	b.n	8002c8c <qFIS_EvalInputMFs+0x5c>
        mf = &f->inMF[ i ];
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6899      	ldr	r1, [r3, #8]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	60bb      	str	r3, [r7, #8]
        /*cstat -MISRAC2012-Rule-11.3 -CERT-EXP39-C_d*/
        /*cppcheck-suppress misra-c2012-11.3 */
        mf->fx = mf->h*mf->shape( (qFIS_IO_Base_t*)&f->input[ mf->index ],
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	68dd      	ldr	r5, [r3, #12]
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	681c      	ldr	r4, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6819      	ldr	r1, [r3, #0]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	691a      	ldr	r2, [r3, #16]
 8002c60:	4613      	mov	r3, r2
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	18c8      	adds	r0, r1, r3
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	4619      	mov	r1, r3
 8002c72:	47a0      	blx	r4
 8002c74:	4603      	mov	r3, r0
 8002c76:	4619      	mov	r1, r3
 8002c78:	4628      	mov	r0, r5
 8002c7a:	f7fe f883 	bl	8000d84 <__aeabi_fmul>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	461a      	mov	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	609a      	str	r2, [r3, #8]
    for ( i = 0 ; i < f->nMFInputs ; ++i ) {
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d3d3      	bcc.n	8002c3e <qFIS_EvalInputMFs+0xe>
                                  mf->points,
                                  1u );
        /*cstat +MISRAC2012-Rule-11.3 +CERT-EXP39-C_d*/
    }
}
 8002c96:	bf00      	nop
 8002c98:	bf00      	nop
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bdb0      	pop	{r4, r5, r7, pc}

08002ca0 <qFIS_TruncateInputs>:
/*============================================================================*/
static void qFIS_TruncateInputs( qFIS_t * const f )
{
 8002ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
    size_t i;

    for ( i = 0 ; i < f->nInputs ; ++i ) {
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	e02b      	b.n	8002d06 <qFIS_TruncateInputs+0x66>
        f->input[ i ].b.value = qFIS_Bound( f->input[ i ].b.value,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6819      	ldr	r1, [r3, #0]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	6898      	ldr	r0, [r3, #8]
                                            f->input[ i ].b.min,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6819      	ldr	r1, [r3, #0]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	4413      	add	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
        f->input[ i ].b.value = qFIS_Bound( f->input[ i ].b.value,
 8002cd0:	681d      	ldr	r5, [r3, #0]
                                            f->input[ i ].b.max );
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6819      	ldr	r1, [r3, #0]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	4413      	add	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
        f->input[ i ].b.value = qFIS_Bound( f->input[ i ].b.value,
 8002ce2:	685e      	ldr	r6, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6819      	ldr	r1, [r3, #0]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4613      	mov	r3, r2
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	4413      	add	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	18cc      	adds	r4, r1, r3
 8002cf4:	4632      	mov	r2, r6
 8002cf6:	4629      	mov	r1, r5
 8002cf8:	f001 fdfb 	bl	80048f2 <qFIS_Bound>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	60a3      	str	r3, [r4, #8]
    for ( i = 0 ; i < f->nInputs ; ++i ) {
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	3301      	adds	r3, #1
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d3ce      	bcc.n	8002cae <qFIS_TruncateInputs+0xe>
    }
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d1a <qFIS_Fuzzify>:
/*============================================================================*/
int qFIS_Fuzzify( qFIS_t * const f )
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b084      	sub	sp, #16
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
    int retVal = 0;
 8002d22:	2300      	movs	r3, #0
 8002d24:	60fb      	str	r3, [r7, #12]

    if ( NULL != f ) {
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d007      	beq.n	8002d3c <qFIS_Fuzzify+0x22>
        qFIS_TruncateInputs( f );
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7ff ffb7 	bl	8002ca0 <qFIS_TruncateInputs>
        qFIS_EvalInputMFs( f );
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff ff7c 	bl	8002c30 <qFIS_EvalInputMFs>
        retVal = 1;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	60fb      	str	r3, [r7, #12]
    }

    return retVal;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <qFIS_ParseFuzzValue>:
/*============================================================================*/
static float qFIS_ParseFuzzValue( qFIS_MF_t * const mfIO,
                                  qFIS_Rules_t index )
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b084      	sub	sp, #16
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	460b      	mov	r3, r1
 8002d50:	807b      	strh	r3, [r7, #2]
    uint8_t neg = ( index < 0 ) ? 1u : 0u ;
 8002d52:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002d56:	13db      	asrs	r3, r3, #15
 8002d58:	b21b      	sxth	r3, r3
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
    float y;

    if ( 0u != neg ) {
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <qFIS_ParseFuzzValue+0x2a>
        index = -index;
 8002d68:	887b      	ldrh	r3, [r7, #2]
 8002d6a:	425b      	negs	r3, r3
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	807b      	strh	r3, [r7, #2]
    }
    /*cstat -CERT-INT32-C_a*/
    y = qFIS_Bound( mfIO[ index - 1 ].fx, 0.0f, 1.0f );
 8002d70:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	3b14      	subs	r3, #20
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002d88:	f04f 0100 	mov.w	r1, #0
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f001 fdb0 	bl	80048f2 <qFIS_Bound>
 8002d92:	60b8      	str	r0, [r7, #8]
    /*cstat +CERT-INT32-C_a*/
    /*cppcheck-suppress misra-c2012-12.1 */
    y = ( 0u != neg ) ? ( 1.0f - y ) : y ;
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d006      	beq.n	8002da8 <qFIS_ParseFuzzValue+0x62>
 8002d9a:	68b9      	ldr	r1, [r7, #8]
 8002d9c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002da0:	f7fd fee6 	bl	8000b70 <__aeabi_fsub>
 8002da4:	4603      	mov	r3, r0
 8002da6:	e000      	b.n	8002daa <qFIS_ParseFuzzValue+0x64>
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	60bb      	str	r3, [r7, #8]

    return y;
 8002dac:	68bb      	ldr	r3, [r7, #8]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <qFIS_GetFuzzOperator>:
/*============================================================================*/
static qFIS_FuzzyOperator_t qFIS_GetFuzzOperator( const qFIS_t * const f )
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
    qFIS_FuzzyOperator_t oper;

    switch ( f->lastConnector ) {
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8002dc6:	4a0c      	ldr	r2, [pc, #48]	; (8002df8 <qFIS_GetFuzzOperator+0x40>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d003      	beq.n	8002dd4 <qFIS_GetFuzzOperator+0x1c>
 8002dcc:	4a0b      	ldr	r2, [pc, #44]	; (8002dfc <qFIS_GetFuzzOperator+0x44>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d004      	beq.n	8002ddc <qFIS_GetFuzzOperator+0x24>
 8002dd2:	e007      	b.n	8002de4 <qFIS_GetFuzzOperator+0x2c>
        case _QFIS_AND:
            oper = f->andOp;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	60fb      	str	r3, [r7, #12]
            break;
 8002dda:	e006      	b.n	8002dea <qFIS_GetFuzzOperator+0x32>
        case _QFIS_OR:
            oper = f->orOp;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	60fb      	str	r3, [r7, #12]
            break;
 8002de2:	e002      	b.n	8002dea <qFIS_GetFuzzOperator+0x32>
        default: 
            oper = &qFIS_Sum;
 8002de4:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <qFIS_GetFuzzOperator+0x48>)
 8002de6:	60fb      	str	r3, [r7, #12]
            break;
 8002de8:	bf00      	nop
    }

    return oper;
 8002dea:	68fb      	ldr	r3, [r7, #12]
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bc80      	pop	{r7}
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	ffff8002 	.word	0xffff8002
 8002dfc:	ffff8003 	.word	0xffff8003
 8002e00:	080048c7 	.word	0x080048c7

08002e04 <qFIS_InferenceAntecedent>:
/*============================================================================*/
static size_t qFIS_InferenceAntecedent( struct _qFIS_s * const f,
                                        size_t i )
{
 8002e04:	b590      	push	{r4, r7, lr}
 8002e06:	b087      	sub	sp, #28
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
    int16_t inIndex, MFInIndex, connector;
    qFIS_FuzzyOperator_t op;
    /*cstat -CERT-INT30-C_a*/
    inIndex = f->rules[ i ];
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	4413      	add	r3, r2
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	82fb      	strh	r3, [r7, #22]
    MFInIndex = f->rules[ i + 1u ];
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	3301      	adds	r3, #1
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	4413      	add	r3, r2
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	82bb      	strh	r3, [r7, #20]
    connector = f->rules[ i + 2u ];
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	3302      	adds	r3, #2
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	4413      	add	r3, r2
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	827b      	strh	r3, [r7, #18]
    /*cstat -CERT-INT30-C_a*/
    op = qFIS_GetFuzzOperator( f );
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff ffbb 	bl	8002db8 <qFIS_GetFuzzOperator>
 8002e42:	60f8      	str	r0, [r7, #12]
    f->rStrength = op( f->rStrength, qFIS_ParseFuzzValue( f->inMF, MFInIndex ) );
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002e50:	4611      	mov	r1, r2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff ff77 	bl	8002d46 <qFIS_ParseFuzzValue>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4620      	mov	r0, r4
 8002e60:	4798      	blx	r3
 8002e62:	4602      	mov	r2, r0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	659a      	str	r2, [r3, #88]	; 0x58

    if ( ( inIndex < 0 ) || ( (size_t)inIndex > f->nInputs ) ) {
 8002e68:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	db05      	blt.n	8002e7c <qFIS_InferenceAntecedent+0x78>
 8002e70:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d902      	bls.n	8002e82 <qFIS_InferenceAntecedent+0x7e>
        i = QFIS_INFERENCE_ERROR;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	e022      	b.n	8002ec8 <qFIS_InferenceAntecedent+0xc4>
    }
    else {
        if ( ( _QFIS_AND == connector ) || ( _QFIS_OR == connector ) ) {
 8002e82:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e86:	4a13      	ldr	r2, [pc, #76]	; (8002ed4 <qFIS_InferenceAntecedent+0xd0>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d004      	beq.n	8002e96 <qFIS_InferenceAntecedent+0x92>
 8002e8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e90:	4a11      	ldr	r2, [pc, #68]	; (8002ed8 <qFIS_InferenceAntecedent+0xd4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d10a      	bne.n	8002eac <qFIS_InferenceAntecedent+0xa8>
            f->lastConnector = connector;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	8a7a      	ldrh	r2, [r7, #18]
 8002e9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
            f->inferenceState = &qFIS_InferenceAntecedent;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a0e      	ldr	r2, [pc, #56]	; (8002edc <qFIS_InferenceAntecedent+0xd8>)
 8002ea2:	621a      	str	r2, [r3, #32]
            i += 2u;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	3302      	adds	r3, #2
 8002ea8:	603b      	str	r3, [r7, #0]
 8002eaa:	e00d      	b.n	8002ec8 <qFIS_InferenceAntecedent+0xc4>
        }
        else if ( _QFIS_THEN == connector ) {
 8002eac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002eb0:	4a0b      	ldr	r2, [pc, #44]	; (8002ee0 <qFIS_InferenceAntecedent+0xdc>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d106      	bne.n	8002ec4 <qFIS_InferenceAntecedent+0xc0>
            f->inferenceState = &qFIS_InferenceReachEnd;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a0a      	ldr	r2, [pc, #40]	; (8002ee4 <qFIS_InferenceAntecedent+0xe0>)
 8002eba:	621a      	str	r2, [r3, #32]
            i += 2u;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	3302      	adds	r3, #2
 8002ec0:	603b      	str	r3, [r7, #0]
 8002ec2:	e001      	b.n	8002ec8 <qFIS_InferenceAntecedent+0xc4>
        }
        else {
            i = QFIS_INFERENCE_ERROR;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	603b      	str	r3, [r7, #0]
        }
    }

    return i;
 8002ec8:	683b      	ldr	r3, [r7, #0]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	371c      	adds	r7, #28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd90      	pop	{r4, r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	ffff8002 	.word	0xffff8002
 8002ed8:	ffff8003 	.word	0xffff8003
 8002edc:	08002e05 	.word	0x08002e05
 8002ee0:	ffff8004 	.word	0xffff8004
 8002ee4:	08002ee9 	.word	0x08002ee9

08002ee8 <qFIS_InferenceReachEnd>:
/*============================================================================*/
static size_t qFIS_InferenceReachEnd( struct _qFIS_s * const f,
                                      size_t i )
{
 8002ee8:	b590      	push	{r4, r7, lr}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
    int16_t  connector;

    connector = ( f->nOutputs > 1u )? f->rules[ i + 2u ] : -1;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d908      	bls.n	8002f0c <qFIS_InferenceReachEnd+0x24>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	3302      	adds	r3, #2
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	4413      	add	r3, r2
 8002f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f0a:	e001      	b.n	8002f10 <qFIS_InferenceReachEnd+0x28>
 8002f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f10:	81fb      	strh	r3, [r7, #14]
    i += 2u;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	3302      	adds	r3, #2
 8002f16:	603b      	str	r3, [r7, #0]
    if ( _QFIS_AND != connector ) {
 8002f18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f1c:	4a23      	ldr	r2, [pc, #140]	; (8002fac <qFIS_InferenceReachEnd+0xc4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d03f      	beq.n	8002fa2 <qFIS_InferenceReachEnd+0xba>
        f->inferenceState = &qFIS_InferenceAntecedent;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a22      	ldr	r2, [pc, #136]	; (8002fb0 <qFIS_InferenceReachEnd+0xc8>)
 8002f26:	621a      	str	r2, [r3, #32]
        f->lastConnector = -1;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
        f->wi[ f->ruleCount ] = f->rStrength;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4413      	add	r3, r2
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002f42:	601a      	str	r2, [r3, #0]
        if ( NULL != f->ruleWeight ) {
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d01e      	beq.n	8002f8a <qFIS_InferenceReachEnd+0xa2>
            f->wi[ f->ruleCount ] *= qFIS_Bound( f->ruleWeight[ f->ruleCount ], 0.0f, 1.0f );
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f5e:	f04f 0100 	mov.w	r1, #0
 8002f62:	4618      	mov	r0, r3
 8002f64:	f001 fcc5 	bl	80048f2 <qFIS_Bound>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	6819      	ldr	r1, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	18d4      	adds	r4, r2, r3
 8002f82:	f7fd feff 	bl	8000d84 <__aeabi_fmul>
 8002f86:	4603      	mov	r3, r0
 8002f88:	6023      	str	r3, [r4, #0]
        }
        f->rStrength = 0.0f;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	659a      	str	r2, [r3, #88]	; 0x58
        ++f->ruleCount;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	655a      	str	r2, [r3, #84]	; 0x54
        --i;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	603b      	str	r3, [r7, #0]
    }

    return i;
 8002fa2:	683b      	ldr	r3, [r7, #0]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd90      	pop	{r4, r7, pc}
 8002fac:	ffff8002 	.word	0xffff8002
 8002fb0:	08002e05 	.word	0x08002e05

08002fb4 <qFIS_AggregationFindConsequent>:
/*============================================================================*/
static size_t qFIS_AggregationFindConsequent( struct _qFIS_s * const f,
                                              size_t i )
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
    while ( _QFIS_THEN != f->rules[ i++ ] ) {}
 8002fbe:	bf00      	nop
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	1c59      	adds	r1, r3, #1
 8002fc8:	6039      	str	r1, [r7, #0]
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4413      	add	r3, r2
 8002fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fd2:	4a07      	ldr	r2, [pc, #28]	; (8002ff0 <qFIS_AggregationFindConsequent+0x3c>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d1f3      	bne.n	8002fc0 <qFIS_AggregationFindConsequent+0xc>
    f->aggregationState = &qFIS_InferenceConsequent;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a06      	ldr	r2, [pc, #24]	; (8002ff4 <qFIS_AggregationFindConsequent+0x40>)
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24

    return --i;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	683b      	ldr	r3, [r7, #0]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	370c      	adds	r7, #12
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bc80      	pop	{r7}
 8002fee:	4770      	bx	lr
 8002ff0:	ffff8004 	.word	0xffff8004
 8002ff4:	08002ff9 	.word	0x08002ff9

08002ff8 <qFIS_InferenceConsequent>:
/*============================================================================*/
static size_t qFIS_InferenceConsequent( struct _qFIS_s * const f,
                                        size_t i )
{
 8002ff8:	b5b0      	push	{r4, r5, r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
    int16_t outIndex, MFOutIndex, connector;
    uint8_t neg = 0u;
 8003002:	2300      	movs	r3, #0
 8003004:	777b      	strb	r3, [r7, #29]

    outIndex = f->rules[ i ];
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	4413      	add	r3, r2
 8003010:	881b      	ldrh	r3, [r3, #0]
 8003012:	837b      	strh	r3, [r7, #26]
    MFOutIndex = f->rules[ i + 1u ];
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	3301      	adds	r3, #1
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	4413      	add	r3, r2
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	83fb      	strh	r3, [r7, #30]
    connector = ( f->nOutputs > 1u )? f->rules[ i + 2u ] : -1;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	2b01      	cmp	r3, #1
 800302a:	d908      	bls.n	800303e <qFIS_InferenceConsequent+0x46>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	3302      	adds	r3, #2
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	4413      	add	r3, r2
 8003038:	f9b3 3000 	ldrsh.w	r3, [r3]
 800303c:	e001      	b.n	8003042 <qFIS_InferenceConsequent+0x4a>
 800303e:	f04f 33ff 	mov.w	r3, #4294967295
 8003042:	833b      	strh	r3, [r7, #24]
    if ( MFOutIndex < 0 ) {
 8003044:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003048:	2b00      	cmp	r3, #0
 800304a:	da05      	bge.n	8003058 <qFIS_InferenceConsequent+0x60>
        MFOutIndex = -MFOutIndex;
 800304c:	8bfb      	ldrh	r3, [r7, #30]
 800304e:	425b      	negs	r3, r3
 8003050:	b29b      	uxth	r3, r3
 8003052:	83fb      	strh	r3, [r7, #30]
        neg = 1u;
 8003054:	2301      	movs	r3, #1
 8003056:	777b      	strb	r3, [r7, #29]
    }
    MFOutIndex -= 1;
 8003058:	8bfb      	ldrh	r3, [r7, #30]
 800305a:	3b01      	subs	r3, #1
 800305c:	b29b      	uxth	r3, r3
 800305e:	83fb      	strh	r3, [r7, #30]

    if ( f->wi[ f->ruleCount ] > 0.0f ) {
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f04f 0100 	mov.w	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe f842 	bl	80010fc <__aeabi_fcmpgt>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d07b      	beq.n	8003176 <qFIS_InferenceConsequent+0x17e>
        qFIS_Output_t *o = &f->output[ outIndex ];
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003086:	2134      	movs	r1, #52	; 0x34
 8003088:	fb01 f303 	mul.w	r3, r1, r3
 800308c:	4413      	add	r3, r2
 800308e:	617b      	str	r3, [r7, #20]
        qFIS_MF_t *m = &f->outMF[ MFOutIndex ];
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68d9      	ldr	r1, [r3, #12]
 8003094:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003098:	4613      	mov	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	613b      	str	r3, [r7, #16]

        if ( Mamdani == f->type ) {
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d133      	bne.n	8003116 <qFIS_InferenceConsequent+0x11e>
            float v;
            /*cstat -MISRAC2012-Rule-11.3 -CERT-EXP39-C_d*/
            /*cppcheck-suppress misra-c2012-11.3 */
            v = m->h*m->shape( (qFIS_IO_Base_t*)o, m->points, 1u );
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	68dc      	ldr	r4, [r3, #12]
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	6851      	ldr	r1, [r2, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	6978      	ldr	r0, [r7, #20]
 80030be:	4798      	blx	r3
 80030c0:	4603      	mov	r3, r0
 80030c2:	4619      	mov	r1, r3
 80030c4:	4620      	mov	r0, r4
 80030c6:	f7fd fe5d 	bl	8000d84 <__aeabi_fmul>
 80030ca:	4603      	mov	r3, r0
 80030cc:	60bb      	str	r3, [r7, #8]
            /*cstat +MISRAC2012-Rule-11.3 +CERT-EXP39-C_d*/
            /*cppcheck-suppress misra-c2012-12.1 */
            v = ( 1u == neg )? ( 1.0f - v ) : v;
 80030ce:	7f7b      	ldrb	r3, [r7, #29]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d106      	bne.n	80030e2 <qFIS_InferenceConsequent+0xea>
 80030d4:	68b9      	ldr	r1, [r7, #8]
 80030d6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80030da:	f7fd fd49 	bl	8000b70 <__aeabi_fsub>
 80030de:	4603      	mov	r3, r0
 80030e0:	e000      	b.n	80030e4 <qFIS_InferenceConsequent+0xec>
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	60bb      	str	r3, [r7, #8]
            o->y = f->aggregate( o->y, f->implicate( f->wi[ f->ruleCount ], v ) );
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69dc      	ldr	r4, [r3, #28]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	6a1d      	ldr	r5, [r3, #32]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80030fa:	0092      	lsls	r2, r2, #2
 80030fc:	440a      	add	r2, r1
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	68b9      	ldr	r1, [r7, #8]
 8003102:	4610      	mov	r0, r2
 8003104:	4798      	blx	r3
 8003106:	4603      	mov	r3, r0
 8003108:	4619      	mov	r1, r3
 800310a:	4628      	mov	r0, r5
 800310c:	47a0      	blx	r4
 800310e:	4602      	mov	r2, r0
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	621a      	str	r2, [r3, #32]
 8003114:	e02f      	b.n	8003176 <qFIS_InferenceConsequent+0x17e>
        }
        else { /* Sugeno and Tsukamoto*/
            float zi;
            /*cstat -MISRAC2012-Rule-11.3 -CERT-EXP39-C_d*/
            /*cppcheck-suppress misra-c2012-11.3 */
            zi = m->shape( (qFIS_IO_Base_t*)f->input, m->points, f->nInputs );
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6810      	ldr	r0, [r2, #0]
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	6851      	ldr	r1, [r2, #4]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003126:	4798      	blx	r3
 8003128:	60f8      	str	r0, [r7, #12]
            /*cstat +MISRAC2012-Rule-11.3 +CERT-EXP39-C_d*/
            o->data[ 0 ] += zi*f->wi[ f->ruleCount ];
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68f9      	ldr	r1, [r7, #12]
 800313e:	4618      	mov	r0, r3
 8003140:	f7fd fe20 	bl	8000d84 <__aeabi_fmul>
 8003144:	4603      	mov	r3, r0
 8003146:	4619      	mov	r1, r3
 8003148:	4620      	mov	r0, r4
 800314a:	f7fd fd13 	bl	8000b74 <__addsf3>
 800314e:	4603      	mov	r3, r0
 8003150:	461a      	mov	r2, r3
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	625a      	str	r2, [r3, #36]	; 0x24
            o->data[ 1 ] += f->wi[ f->ruleCount ];
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4619      	mov	r1, r3
 800316a:	f7fd fd03 	bl	8000b74 <__addsf3>
 800316e:	4603      	mov	r3, r0
 8003170:	461a      	mov	r2, r3
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	629a      	str	r2, [r3, #40]	; 0x28
        }
    }

    i += 2u;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	3302      	adds	r3, #2
 800317a:	603b      	str	r3, [r7, #0]
    if ( _QFIS_AND != connector ) {
 800317c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8003180:	4a09      	ldr	r2, [pc, #36]	; (80031a8 <qFIS_InferenceConsequent+0x1b0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00a      	beq.n	800319c <qFIS_InferenceConsequent+0x1a4>
        f->aggregationState = &qFIS_AggregationFindConsequent;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a08      	ldr	r2, [pc, #32]	; (80031ac <qFIS_InferenceConsequent+0x1b4>)
 800318a:	625a      	str	r2, [r3, #36]	; 0x24
        ++f->ruleCount;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003190:	1c5a      	adds	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	655a      	str	r2, [r3, #84]	; 0x54
        --i;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	3b01      	subs	r3, #1
 800319a:	603b      	str	r3, [r7, #0]
    }

    return i;
 800319c:	683b      	ldr	r3, [r7, #0]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3720      	adds	r7, #32
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bdb0      	pop	{r4, r5, r7, pc}
 80031a6:	bf00      	nop
 80031a8:	ffff8002 	.word	0xffff8002
 80031ac:	08002fb5 	.word	0x08002fb5

080031b0 <qFIS_Aggregate>:
/*============================================================================*/
static void qFIS_Aggregate( qFIS_t * const f )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
    if ( NULL != f ) {
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d02d      	beq.n	800321a <qFIS_Aggregate+0x6a>
        if ( QFIS_RULES_BEGIN == f->rules[ 0 ] ) {
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031c6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80031ca:	d126      	bne.n	800321a <qFIS_Aggregate+0x6a>
            size_t i = 1u;
 80031cc:	2301      	movs	r3, #1
 80031ce:	60fb      	str	r3, [r7, #12]

            f->aggregationState = &qFIS_AggregationFindConsequent;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a14      	ldr	r2, [pc, #80]	; (8003224 <qFIS_Aggregate+0x74>)
 80031d4:	625a      	str	r2, [r3, #36]	; 0x24
            f->ruleCount = 0u;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	655a      	str	r2, [r3, #84]	; 0x54
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 80031dc:	e00b      	b.n	80031f6 <qFIS_Aggregate+0x46>
                i = f->aggregationState( f, i );
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	68f9      	ldr	r1, [r7, #12]
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	4798      	blx	r3
 80031e8:	60f8      	str	r0, [r7, #12]
                if ( QFIS_INFERENCE_ERROR == i ) {
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d013      	beq.n	8003218 <qFIS_Aggregate+0x68>
                    break;
                }
                ++i;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	3301      	adds	r3, #1
 80031f4:	60fb      	str	r3, [r7, #12]
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	4413      	add	r3, r2
 8003200:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003204:	4a08      	ldr	r2, [pc, #32]	; (8003228 <qFIS_Aggregate+0x78>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d007      	beq.n	800321a <qFIS_Aggregate+0x6a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003212:	429a      	cmp	r2, r3
 8003214:	d3e3      	bcc.n	80031de <qFIS_Aggregate+0x2e>
            }
        }
    }
}
 8003216:	e000      	b.n	800321a <qFIS_Aggregate+0x6a>
                    break;
 8003218:	bf00      	nop
}
 800321a:	bf00      	nop
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	08002fb5 	.word	0x08002fb5
 8003228:	ffff8001 	.word	0xffff8001

0800322c <qFIS_DeFuzz_Centroid>:
/*============================================================================*/
static float qFIS_DeFuzz_Centroid( qFIS_Output_t * const o,
                                   const qFIS_DeFuzzState_t stage )
{
 800322c:	b590      	push	{r4, r7, lr}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]

    switch ( stage ) {
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	2b02      	cmp	r3, #2
 8003242:	d02e      	beq.n	80032a2 <qFIS_DeFuzz_Centroid+0x76>
 8003244:	2b02      	cmp	r3, #2
 8003246:	dc37      	bgt.n	80032b8 <qFIS_DeFuzz_Centroid+0x8c>
 8003248:	2b00      	cmp	r3, #0
 800324a:	d021      	beq.n	8003290 <qFIS_DeFuzz_Centroid+0x64>
 800324c:	2b01      	cmp	r3, #1
 800324e:	d133      	bne.n	80032b8 <qFIS_DeFuzz_Centroid+0x8c>
        case DeFuzz_Compute:
            o->data[ 0 ] += o->x*o->y;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69da      	ldr	r2, [r3, #28]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	4619      	mov	r1, r3
 800325e:	4610      	mov	r0, r2
 8003260:	f7fd fd90 	bl	8000d84 <__aeabi_fmul>
 8003264:	4603      	mov	r3, r0
 8003266:	4619      	mov	r1, r3
 8003268:	4620      	mov	r0, r4
 800326a:	f7fd fc83 	bl	8000b74 <__addsf3>
 800326e:	4603      	mov	r3, r0
 8003270:	461a      	mov	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	625a      	str	r2, [r3, #36]	; 0x24
            o->data[ 1 ] += o->y;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	4619      	mov	r1, r3
 8003280:	4610      	mov	r0, r2
 8003282:	f7fd fc77 	bl	8000b74 <__addsf3>
 8003286:	4603      	mov	r3, r0
 8003288:	461a      	mov	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 800328e:	e014      	b.n	80032ba <qFIS_DeFuzz_Centroid+0x8e>
        case DeFuzz_Init:
            o->data[ 0 ] = 0.0f; /*store sum(y)*/
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f04f 0200 	mov.w	r2, #0
 8003296:	625a      	str	r2, [r3, #36]	; 0x24
            o->data[ 1 ] = 0.0f; /*store sum(x*y)*/
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 80032a0:	e00b      	b.n	80032ba <qFIS_DeFuzz_Centroid+0x8e>
        case DeFuzz_End:
            d = o->data[ 0 ]/o->data[ 1 ]; /*sum(x*y)/sum(y)*/
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032aa:	4619      	mov	r1, r3
 80032ac:	4610      	mov	r0, r2
 80032ae:	f7fd fe1d 	bl	8000eec <__aeabi_fdiv>
 80032b2:	4603      	mov	r3, r0
 80032b4:	60fb      	str	r3, [r7, #12]
            break;
 80032b6:	e000      	b.n	80032ba <qFIS_DeFuzz_Centroid+0x8e>
        default:
            break;
 80032b8:	bf00      	nop
    }

    return d;
 80032ba:	68fb      	ldr	r3, [r7, #12]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd90      	pop	{r4, r7, pc}

080032c4 <qFIS_DeFuzz_Bisector>:
/*============================================================================*/
static float qFIS_DeFuzz_Bisector( qFIS_Output_t * const o,
                                   const qFIS_DeFuzzState_t stage )
{
 80032c4:	b590      	push	{r4, r7, lr}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	70fb      	strb	r3, [r7, #3]
    size_t k;
    float d = 0.0f;
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	613b      	str	r3, [r7, #16]
    qFIS_t *f;

    switch ( stage ) {
 80032d6:	78fb      	ldrb	r3, [r7, #3]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d017      	beq.n	800330c <qFIS_DeFuzz_Bisector+0x48>
 80032dc:	2b02      	cmp	r3, #2
 80032de:	dc60      	bgt.n	80033a2 <qFIS_DeFuzz_Bisector+0xde>
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00e      	beq.n	8003302 <qFIS_DeFuzz_Bisector+0x3e>
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d15c      	bne.n	80033a2 <qFIS_DeFuzz_Bisector+0xde>
        case DeFuzz_Compute:
            o->data[ 0 ] += o->y;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	4619      	mov	r1, r3
 80032f2:	4610      	mov	r0, r2
 80032f4:	f7fd fc3e 	bl	8000b74 <__addsf3>
 80032f8:	4603      	mov	r3, r0
 80032fa:	461a      	mov	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 8003300:	e050      	b.n	80033a4 <qFIS_DeFuzz_Bisector+0xe0>
        case DeFuzz_Init:
            o->data[ 0 ] = 0.0f; /*store sum(y)*/
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f04f 0200 	mov.w	r2, #0
 8003308:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 800330a:	e04b      	b.n	80033a4 <qFIS_DeFuzz_Bisector+0xe0>
        case DeFuzz_End:
            o->data[ 1 ] = 0.0f;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	629a      	str	r2, [r3, #40]	; 0x28
            /*cstat -MISRAC2012-Rule-11.5 -CERT-EXP36-C_b*/
            /*cppcheck-suppress misra-c2012-11.5 */
            f = (qFIS_t *)o->owner;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	60fb      	str	r3, [r7, #12]
            /*cstat +MISRAC2012-Rule-11.5 +CERT-EXP36-C_b*/
            for ( k = 0u ; k < f->nPoints ; ++k ) {
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	e035      	b.n	800338c <qFIS_DeFuzz_Bisector+0xc8>
                o->y = 0.0f;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	621a      	str	r2, [r3, #32]
                o->x = qFIS_GetNextX( o->b.min, o->res, k );
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6818      	ldr	r0, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	4619      	mov	r1, r3
 8003334:	f000 fb04 	bl	8003940 <qFIS_GetNextX>
 8003338:	4602      	mov	r2, r0
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	61da      	str	r2, [r3, #28]
                o->b.value = o->x;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	69da      	ldr	r2, [r3, #28]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	609a      	str	r2, [r3, #8]
                qFIS_Aggregate( f );
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f7ff ff32 	bl	80031b0 <qFIS_Aggregate>
                o->data[ 1 ] += o->y;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	4619      	mov	r1, r3
 8003356:	4610      	mov	r0, r2
 8003358:	f7fd fc0c 	bl	8000b74 <__addsf3>
 800335c:	4603      	mov	r3, r0
 800335e:	461a      	mov	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	629a      	str	r2, [r3, #40]	; 0x28
                if ( o->data[ 1 ] >= ( 0.5f*o->data[ 0 ] ) ) {
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003370:	4618      	mov	r0, r3
 8003372:	f7fd fd07 	bl	8000d84 <__aeabi_fmul>
 8003376:	4603      	mov	r3, r0
 8003378:	4619      	mov	r1, r3
 800337a:	4620      	mov	r0, r4
 800337c:	f7fd feb4 	bl	80010e8 <__aeabi_fcmpge>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d108      	bne.n	8003398 <qFIS_DeFuzz_Bisector+0xd4>
            for ( k = 0u ; k < f->nPoints ; ++k ) {
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	3301      	adds	r3, #1
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	429a      	cmp	r2, r3
 8003394:	d3c4      	bcc.n	8003320 <qFIS_DeFuzz_Bisector+0x5c>
 8003396:	e000      	b.n	800339a <qFIS_DeFuzz_Bisector+0xd6>
                    break;
 8003398:	bf00      	nop
                }
            }
            d = o->x;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	613b      	str	r3, [r7, #16]
            break;
 80033a0:	e000      	b.n	80033a4 <qFIS_DeFuzz_Bisector+0xe0>
        default:
            break;
 80033a2:	bf00      	nop
    }

    return d;
 80033a4:	693b      	ldr	r3, [r7, #16]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	371c      	adds	r7, #28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd90      	pop	{r4, r7, pc}
	...

080033b0 <qFIS_DeFuzz_LOM>:
/*============================================================================*/
static float qFIS_DeFuzz_LOM( qFIS_Output_t * const o,
                              const qFIS_DeFuzzState_t stage )
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	460b      	mov	r3, r1
 80033ba:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]

    switch ( stage ) {
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d022      	beq.n	800340e <qFIS_DeFuzz_LOM+0x5e>
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	dc24      	bgt.n	8003416 <qFIS_DeFuzz_LOM+0x66>
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d016      	beq.n	80033fe <qFIS_DeFuzz_LOM+0x4e>
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d120      	bne.n	8003416 <qFIS_DeFuzz_LOM+0x66>
        case DeFuzz_Compute:
            if ( o->y >= o->data[ 0 ] ) {
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a1a      	ldr	r2, [r3, #32]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	4619      	mov	r1, r3
 80033de:	4610      	mov	r0, r2
 80033e0:	f7fd fe82 	bl	80010e8 <__aeabi_fcmpge>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d100      	bne.n	80033ec <qFIS_DeFuzz_LOM+0x3c>
                o->data[ 0 ] = o->y;
                o->data[ 1 ] = o->x;
            }
            break;
 80033ea:	e015      	b.n	8003418 <qFIS_DeFuzz_LOM+0x68>
                o->data[ 0 ] = o->y;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1a      	ldr	r2, [r3, #32]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	625a      	str	r2, [r3, #36]	; 0x24
                o->data[ 1 ] = o->x;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	69da      	ldr	r2, [r3, #28]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 80033fc:	e00c      	b.n	8003418 <qFIS_DeFuzz_LOM+0x68>
        case DeFuzz_Init:
            o->data[ 0 ] = -1.0f; /*yMax*/
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a08      	ldr	r2, [pc, #32]	; (8003424 <qFIS_DeFuzz_LOM+0x74>)
 8003402:	625a      	str	r2, [r3, #36]	; 0x24
            o->data[ 1 ] = o->b.max; /*xLargest*/
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 800340c:	e004      	b.n	8003418 <qFIS_DeFuzz_LOM+0x68>
        case DeFuzz_End:
            d = o->data[ 1 ];
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003412:	60fb      	str	r3, [r7, #12]
            break;
 8003414:	e000      	b.n	8003418 <qFIS_DeFuzz_LOM+0x68>
        default:
            break;
 8003416:	bf00      	nop
    }

    return d;
 8003418:	68fb      	ldr	r3, [r7, #12]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	bf800000 	.word	0xbf800000

08003428 <qFIS_DeFuzz_SOM>:
/*============================================================================*/
static float qFIS_DeFuzz_SOM( qFIS_Output_t * const o,
                              const qFIS_DeFuzzState_t stage )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]

    switch ( stage ) {
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	2b02      	cmp	r3, #2
 800343e:	d022      	beq.n	8003486 <qFIS_DeFuzz_SOM+0x5e>
 8003440:	2b02      	cmp	r3, #2
 8003442:	dc24      	bgt.n	800348e <qFIS_DeFuzz_SOM+0x66>
 8003444:	2b00      	cmp	r3, #0
 8003446:	d016      	beq.n	8003476 <qFIS_DeFuzz_SOM+0x4e>
 8003448:	2b01      	cmp	r3, #1
 800344a:	d120      	bne.n	800348e <qFIS_DeFuzz_SOM+0x66>
        case DeFuzz_Compute:
            if ( o->y > o->data[ 0 ] ) {
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a1a      	ldr	r2, [r3, #32]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	4619      	mov	r1, r3
 8003456:	4610      	mov	r0, r2
 8003458:	f7fd fe50 	bl	80010fc <__aeabi_fcmpgt>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d100      	bne.n	8003464 <qFIS_DeFuzz_SOM+0x3c>
                o->data[ 0 ] = o->y;
                o->data[ 1 ] = o->x;
            }
            break;
 8003462:	e015      	b.n	8003490 <qFIS_DeFuzz_SOM+0x68>
                o->data[ 0 ] = o->y;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a1a      	ldr	r2, [r3, #32]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	625a      	str	r2, [r3, #36]	; 0x24
                o->data[ 1 ] = o->x;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69da      	ldr	r2, [r3, #28]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 8003474:	e00c      	b.n	8003490 <qFIS_DeFuzz_SOM+0x68>
        case DeFuzz_Init:
            o->data[ 0 ] = -1.0f; /*yMax*/
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a08      	ldr	r2, [pc, #32]	; (800349c <qFIS_DeFuzz_SOM+0x74>)
 800347a:	625a      	str	r2, [r3, #36]	; 0x24
            o->data[ 1 ] = o->b.min; /*xSmallest*/
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 8003484:	e004      	b.n	8003490 <qFIS_DeFuzz_SOM+0x68>
        case DeFuzz_End:
            d = o->data[ 1 ];
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348a:	60fb      	str	r3, [r7, #12]
            break;
 800348c:	e000      	b.n	8003490 <qFIS_DeFuzz_SOM+0x68>
        default:
            break;
 800348e:	bf00      	nop
    }

    return d;
 8003490:	68fb      	ldr	r3, [r7, #12]
}
 8003492:	4618      	mov	r0, r3
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	bf800000 	.word	0xbf800000

080034a0 <qFIS_DeFuzz_MOM>:
/*============================================================================*/
static float qFIS_DeFuzz_MOM( qFIS_Output_t * const o,
                              const qFIS_DeFuzzState_t stage )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 80034ac:	f04f 0300 	mov.w	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]

    switch ( stage ) {
 80034b2:	78fb      	ldrb	r3, [r7, #3]
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d05a      	beq.n	800356e <qFIS_DeFuzz_MOM+0xce>
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	dc69      	bgt.n	8003590 <qFIS_DeFuzz_MOM+0xf0>
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d047      	beq.n	8003550 <qFIS_DeFuzz_MOM+0xb0>
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d165      	bne.n	8003590 <qFIS_DeFuzz_MOM+0xf0>
        case DeFuzz_Compute:
            if ( o->y > o->data[ 0 ] ) {
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1a      	ldr	r2, [r3, #32]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	4619      	mov	r1, r3
 80034ce:	4610      	mov	r0, r2
 80034d0:	f7fd fe14 	bl	80010fc <__aeabi_fcmpgt>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d010      	beq.n	80034fc <qFIS_DeFuzz_MOM+0x5c>
                o->data[ 0 ] = o->y;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1a      	ldr	r2, [r3, #32]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	625a      	str	r2, [r3, #36]	; 0x24
                o->data[ 1 ] = o->x;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69da      	ldr	r2, [r3, #28]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	629a      	str	r2, [r3, #40]	; 0x28
                o->data[ 2 ] = o->x;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69da      	ldr	r2, [r3, #28]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	62da      	str	r2, [r3, #44]	; 0x2c
                o->data[ 3 ] = 1.0f;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80034f8:	631a      	str	r2, [r3, #48]	; 0x30
                o->data[ 3 ] = -1.0f;
            }
            else {
                /*nothing to do*/
            }
            break;
 80034fa:	e04a      	b.n	8003592 <qFIS_DeFuzz_MOM+0xf2>
            else if ( qFMathEx_Equal( o->y , o->data[ 0 ] ) && ( o->data[ 3 ] > 0.0f ) ) {
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1a      	ldr	r2, [r3, #32]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	4619      	mov	r1, r3
 8003506:	4610      	mov	r0, r2
 8003508:	f001 fa5d 	bl	80049c6 <qFMathEx_Equal>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00e      	beq.n	8003530 <qFIS_DeFuzz_MOM+0x90>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003516:	f04f 0100 	mov.w	r1, #0
 800351a:	4618      	mov	r0, r3
 800351c:	f7fd fdee 	bl	80010fc <__aeabi_fcmpgt>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d004      	beq.n	8003530 <qFIS_DeFuzz_MOM+0x90>
                o->data[ 2 ] = o->x;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69da      	ldr	r2, [r3, #28]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	62da      	str	r2, [r3, #44]	; 0x2c
            break;
 800352e:	e030      	b.n	8003592 <qFIS_DeFuzz_MOM+0xf2>
            else if ( o->y < o->data[ 0 ] ) {
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1a      	ldr	r2, [r3, #32]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	4619      	mov	r1, r3
 800353a:	4610      	mov	r0, r2
 800353c:	f7fd fdc0 	bl	80010c0 <__aeabi_fcmplt>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d100      	bne.n	8003548 <qFIS_DeFuzz_MOM+0xa8>
            break;
 8003546:	e024      	b.n	8003592 <qFIS_DeFuzz_MOM+0xf2>
                o->data[ 3 ] = -1.0f;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a14      	ldr	r2, [pc, #80]	; (800359c <qFIS_DeFuzz_MOM+0xfc>)
 800354c:	631a      	str	r2, [r3, #48]	; 0x30
            break;
 800354e:	e020      	b.n	8003592 <qFIS_DeFuzz_MOM+0xf2>
        case DeFuzz_Init:
            o->data[ 0 ] = -1.0f; /* yMax */
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a12      	ldr	r2, [pc, #72]	; (800359c <qFIS_DeFuzz_MOM+0xfc>)
 8003554:	625a      	str	r2, [r3, #36]	; 0x24
            o->data[ 1 ] = o->b.min; /*xSmallest*/
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	629a      	str	r2, [r3, #40]	; 0x28
            o->data[ 2 ] = o->b.max; /*xLargest*/
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	62da      	str	r2, [r3, #44]	; 0x2c
            o->data[ 3 ] = -1.0f; /*sp*/
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a0c      	ldr	r2, [pc, #48]	; (800359c <qFIS_DeFuzz_MOM+0xfc>)
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
            break;
 800356c:	e011      	b.n	8003592 <qFIS_DeFuzz_MOM+0xf2>
        case DeFuzz_End:
            d = 0.5f*( o->data[ 1 ] + o->data[ 2 ] );
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003576:	4619      	mov	r1, r3
 8003578:	4610      	mov	r0, r2
 800357a:	f7fd fafb 	bl	8000b74 <__addsf3>
 800357e:	4603      	mov	r3, r0
 8003580:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003584:	4618      	mov	r0, r3
 8003586:	f7fd fbfd 	bl	8000d84 <__aeabi_fmul>
 800358a:	4603      	mov	r3, r0
 800358c:	60fb      	str	r3, [r7, #12]
            break;
 800358e:	e000      	b.n	8003592 <qFIS_DeFuzz_MOM+0xf2>
        default:
            break;
 8003590:	bf00      	nop
    }

    return d;
 8003592:	68fb      	ldr	r3, [r7, #12]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	bf800000 	.word	0xbf800000

080035a0 <qFIS_DeFuzz_WtAverage>:
/*============================================================================*/
static float qFIS_DeFuzz_WtAverage( qFIS_Output_t * const o,
                                    const qFIS_DeFuzzState_t stage )
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]

    if ( DeFuzz_End == stage ) {
 80035b2:	78fb      	ldrb	r3, [r7, #3]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d109      	bne.n	80035cc <qFIS_DeFuzz_WtAverage+0x2c>
        d = o->data[ 0 ]/o->data[ 1 ];
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c0:	4619      	mov	r1, r3
 80035c2:	4610      	mov	r0, r2
 80035c4:	f7fd fc92 	bl	8000eec <__aeabi_fdiv>
 80035c8:	4603      	mov	r3, r0
 80035ca:	60fb      	str	r3, [r7, #12]
    }

    return d;
 80035cc:	68fb      	ldr	r3, [r7, #12]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <qFIS_DeFuzz_WtSum>:
/*============================================================================*/
static float qFIS_DeFuzz_WtSum( qFIS_Output_t * const o,
                                const qFIS_DeFuzzState_t stage )
{
 80035d6:	b480      	push	{r7}
 80035d8:	b085      	sub	sp, #20
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	460b      	mov	r3, r1
 80035e0:	70fb      	strb	r3, [r7, #3]
    float d = 0.0f;
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	60fb      	str	r3, [r7, #12]

    if ( DeFuzz_End == stage ) {
 80035e8:	78fb      	ldrb	r3, [r7, #3]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d102      	bne.n	80035f4 <qFIS_DeFuzz_WtSum+0x1e>
        d = o->data[ 0 ];
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	60fb      	str	r3, [r7, #12]
    }

    return d;
 80035f4:	68fb      	ldr	r3, [r7, #12]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr

08003600 <qFIS_DeFuzzify>:
/*============================================================================*/
int qFIS_DeFuzzify( qFIS_t * const f )
{
 8003600:	b5b0      	push	{r4, r5, r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
    int retVal = 0;
 8003608:	2300      	movs	r3, #0
 800360a:	60fb      	str	r3, [r7, #12]

    if ( NULL != f ) {
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 8133 	beq.w	800387a <qFIS_DeFuzzify+0x27a>
        size_t i;

        for ( i = 0; i < f->nOutputs ; ++i ) {
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	e00e      	b.n	8003638 <qFIS_DeFuzzify+0x38>
            f->deFuzz( &f->output[ i ] , DeFuzz_Init );
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6851      	ldr	r1, [r2, #4]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	2034      	movs	r0, #52	; 0x34
 8003626:	fb00 f202 	mul.w	r2, r0, r2
 800362a:	440a      	add	r2, r1
 800362c:	2100      	movs	r1, #0
 800362e:	4610      	mov	r0, r2
 8003630:	4798      	blx	r3
        for ( i = 0; i < f->nOutputs ; ++i ) {
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	3301      	adds	r3, #1
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	429a      	cmp	r2, r3
 8003640:	d3eb      	bcc.n	800361a <qFIS_DeFuzzify+0x1a>
        }

        if ( Mamdani == f->type  ) {
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8003648:	2b00      	cmp	r3, #0
 800364a:	f040 809a 	bne.w	8003782 <qFIS_DeFuzzify+0x182>
            size_t k;

            for ( k = 0u ; k < f->nPoints ; ++k ) {
 800364e:	2300      	movs	r3, #0
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	e08f      	b.n	8003774 <qFIS_DeFuzzify+0x174>
                for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	e038      	b.n	80036cc <qFIS_DeFuzzify+0xcc>
                    f->output[ i ].y = 0.0f;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2134      	movs	r1, #52	; 0x34
 8003662:	fb01 f303 	mul.w	r3, r1, r3
 8003666:	4413      	add	r3, r2
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	621a      	str	r2, [r3, #32]
                    f->output[ i ].x = qFIS_GetNextX( f->output[ i ].b.min,
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2134      	movs	r1, #52	; 0x34
 8003676:	fb01 f303 	mul.w	r3, r1, r3
 800367a:	4413      	add	r3, r2
 800367c:	6818      	ldr	r0, [r3, #0]
                                                      f->output[ i ].res,
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2134      	movs	r1, #52	; 0x34
 8003686:	fb01 f303 	mul.w	r3, r1, r3
 800368a:	4413      	add	r3, r2
                    f->output[ i ].x = qFIS_GetNextX( f->output[ i ].b.min,
 800368c:	6999      	ldr	r1, [r3, #24]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2434      	movs	r4, #52	; 0x34
 8003696:	fb04 f303 	mul.w	r3, r4, r3
 800369a:	18d4      	adds	r4, r2, r3
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	f000 f94f 	bl	8003940 <qFIS_GetNextX>
 80036a2:	4603      	mov	r3, r0
 80036a4:	61e3      	str	r3, [r4, #28]
                                                      k );
                    f->output[ i ].b.value = f->output[ i ].x;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2134      	movs	r1, #52	; 0x34
 80036ae:	fb01 f303 	mul.w	r3, r1, r3
 80036b2:	441a      	add	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6859      	ldr	r1, [r3, #4]
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	2034      	movs	r0, #52	; 0x34
 80036bc:	fb00 f303 	mul.w	r3, r0, r3
 80036c0:	440b      	add	r3, r1
 80036c2:	69d2      	ldr	r2, [r2, #28]
 80036c4:	609a      	str	r2, [r3, #8]
                for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	3301      	adds	r3, #1
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d3c1      	bcc.n	800365a <qFIS_DeFuzzify+0x5a>
                }
                qFIS_Aggregate( f );
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7ff fd6a 	bl	80031b0 <qFIS_Aggregate>
                for ( i = 0; i < f->nOutputs ; ++i ) {
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	e040      	b.n	8003764 <qFIS_DeFuzzify+0x164>
                    f->deFuzz( &f->output[ i ] , DeFuzz_Compute );
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6851      	ldr	r1, [r2, #4]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	2034      	movs	r0, #52	; 0x34
 80036ee:	fb00 f202 	mul.w	r2, r0, r2
 80036f2:	440a      	add	r2, r1
 80036f4:	2101      	movs	r1, #1
 80036f6:	4610      	mov	r0, r2
 80036f8:	4798      	blx	r3
                    if ( NULL != f->output[ i ].xag ) { /*store aggregated*/
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2134      	movs	r1, #52	; 0x34
 8003702:	fb01 f303 	mul.w	r3, r1, r3
 8003706:	4413      	add	r3, r2
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d027      	beq.n	800375e <qFIS_DeFuzzify+0x15e>
                        f->output[ i ].xag[ k ] = f->output[ i ].x;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2134      	movs	r1, #52	; 0x34
 8003716:	fb01 f303 	mul.w	r3, r1, r3
 800371a:	441a      	add	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6859      	ldr	r1, [r3, #4]
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	2034      	movs	r0, #52	; 0x34
 8003724:	fb00 f303 	mul.w	r3, r0, r3
 8003728:	440b      	add	r3, r1
 800372a:	6919      	ldr	r1, [r3, #16]
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	69d2      	ldr	r2, [r2, #28]
 8003734:	601a      	str	r2, [r3, #0]
                        f->output[ i ].yag[ k ] = f->output[ i ].y;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	2134      	movs	r1, #52	; 0x34
 800373e:	fb01 f303 	mul.w	r3, r1, r3
 8003742:	441a      	add	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6859      	ldr	r1, [r3, #4]
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	2034      	movs	r0, #52	; 0x34
 800374c:	fb00 f303 	mul.w	r3, r0, r3
 8003750:	440b      	add	r3, r1
 8003752:	6959      	ldr	r1, [r3, #20]
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	6a12      	ldr	r2, [r2, #32]
 800375c:	601a      	str	r2, [r3, #0]
                for ( i = 0; i < f->nOutputs ; ++i ) {
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	3301      	adds	r3, #1
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	429a      	cmp	r2, r3
 800376c:	d3b9      	bcc.n	80036e2 <qFIS_DeFuzzify+0xe2>
            for ( k = 0u ; k < f->nPoints ; ++k ) {
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	3301      	adds	r3, #1
 8003772:	613b      	str	r3, [r7, #16]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	429a      	cmp	r2, r3
 800377c:	f4ff af6a 	bcc.w	8003654 <qFIS_DeFuzzify+0x54>
 8003780:	e038      	b.n	80037f4 <qFIS_DeFuzzify+0x1f4>
                    }
                }
            }
        }
        else { /*Sugeno and Tsukamoto systems*/
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	e016      	b.n	80037b6 <qFIS_DeFuzzify+0x1b6>
                f->output[ i ].data[ 0 ] = 0.0f; /*store sum wi*/
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2134      	movs	r1, #52	; 0x34
 8003790:	fb01 f303 	mul.w	r3, r1, r3
 8003794:	4413      	add	r3, r2
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	625a      	str	r2, [r3, #36]	; 0x24
                f->output[ i ].data[ 1 ] = 0.0f; /*store sum zi*wi*/
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	2134      	movs	r1, #52	; 0x34
 80037a4:	fb01 f303 	mul.w	r3, r1, r3
 80037a8:	4413      	add	r3, r2
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	629a      	str	r2, [r3, #40]	; 0x28
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	3301      	adds	r3, #1
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d3e3      	bcc.n	8003788 <qFIS_DeFuzzify+0x188>
            }
            qFIS_Aggregate( f );
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff fcf5 	bl	80031b0 <qFIS_Aggregate>
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 80037c6:	2300      	movs	r3, #0
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	e00e      	b.n	80037ea <qFIS_DeFuzzify+0x1ea>
                f->deFuzz( &f->output[ i ] , DeFuzz_Compute );
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6851      	ldr	r1, [r2, #4]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	2034      	movs	r0, #52	; 0x34
 80037d8:	fb00 f202 	mul.w	r2, r0, r2
 80037dc:	440a      	add	r2, r1
 80037de:	2101      	movs	r1, #1
 80037e0:	4610      	mov	r0, r2
 80037e2:	4798      	blx	r3
            for ( i = 0; i < f->nOutputs ; ++i ) { /* initialize*/
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	3301      	adds	r3, #1
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d3eb      	bcc.n	80037cc <qFIS_DeFuzzify+0x1cc>
            }
        }

        for ( i = 0; i < f->nOutputs ; ++i ) {
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	e03a      	b.n	8003870 <qFIS_DeFuzzify+0x270>
            f->output[ i ].b.value = f->deFuzz( &f->output[ i ] , DeFuzz_End );
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6851      	ldr	r1, [r2, #4]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	2034      	movs	r0, #52	; 0x34
 8003806:	fb00 f202 	mul.w	r2, r0, r2
 800380a:	1888      	adds	r0, r1, r2
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6851      	ldr	r1, [r2, #4]
 8003810:	697a      	ldr	r2, [r7, #20]
 8003812:	2434      	movs	r4, #52	; 0x34
 8003814:	fb04 f202 	mul.w	r2, r4, r2
 8003818:	188c      	adds	r4, r1, r2
 800381a:	2102      	movs	r1, #2
 800381c:	4798      	blx	r3
 800381e:	4603      	mov	r3, r0
 8003820:	60a3      	str	r3, [r4, #8]
            f->output[ i ].b.value = qFIS_Bound( f->output[ i ].b.value,
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2134      	movs	r1, #52	; 0x34
 800382a:	fb01 f303 	mul.w	r3, r1, r3
 800382e:	4413      	add	r3, r2
 8003830:	6898      	ldr	r0, [r3, #8]
                                                 f->output[ i ].b.min,
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2134      	movs	r1, #52	; 0x34
 800383a:	fb01 f303 	mul.w	r3, r1, r3
 800383e:	4413      	add	r3, r2
            f->output[ i ].b.value = qFIS_Bound( f->output[ i ].b.value,
 8003840:	6819      	ldr	r1, [r3, #0]
                                                 f->output[ i ].b.max );
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2434      	movs	r4, #52	; 0x34
 800384a:	fb04 f303 	mul.w	r3, r4, r3
 800384e:	4413      	add	r3, r2
            f->output[ i ].b.value = qFIS_Bound( f->output[ i ].b.value,
 8003850:	685d      	ldr	r5, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2434      	movs	r4, #52	; 0x34
 800385a:	fb04 f303 	mul.w	r3, r4, r3
 800385e:	18d4      	adds	r4, r2, r3
 8003860:	462a      	mov	r2, r5
 8003862:	f001 f846 	bl	80048f2 <qFIS_Bound>
 8003866:	4603      	mov	r3, r0
 8003868:	60a3      	str	r3, [r4, #8]
        for ( i = 0; i < f->nOutputs ; ++i ) {
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	3301      	adds	r3, #1
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	429a      	cmp	r2, r3
 8003878:	d3bf      	bcc.n	80037fa <qFIS_DeFuzzify+0x1fa>
        }
    }

    return retVal;
 800387a:	68fb      	ldr	r3, [r7, #12]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bdb0      	pop	{r4, r5, r7, pc}

08003884 <qFIS_Inference>:

    return retVal;
}
/*============================================================================*/
int qFIS_Inference( qFIS_t * const f )
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
    int retVal = 0;
 800388c:	2300      	movs	r3, #0
 800388e:	60fb      	str	r3, [r7, #12]

    if ( NULL != f  ) {
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d04a      	beq.n	800392c <qFIS_Inference+0xa8>
        size_t i = 0u;
 8003896:	2300      	movs	r3, #0
 8003898:	60bb      	str	r3, [r7, #8]

        if ( QFIS_RULES_BEGIN == f->rules[ 0 ] ) {
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038a2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80038a6:	d12f      	bne.n	8003908 <qFIS_Inference+0x84>
            f->inferenceState = &qFIS_InferenceAntecedent;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a23      	ldr	r2, [pc, #140]	; (8003938 <qFIS_Inference+0xb4>)
 80038ac:	621a      	str	r2, [r3, #32]
            f->rStrength = 0.0f;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	659a      	str	r2, [r3, #88]	; 0x58
            f->lastConnector = -1;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
            f->ruleCount = 0u;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	655a      	str	r2, [r3, #84]	; 0x54
            i = 1u;
 80038c6:	2301      	movs	r3, #1
 80038c8:	60bb      	str	r3, [r7, #8]
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 80038ca:	e00b      	b.n	80038e4 <qFIS_Inference+0x60>
                i = f->inferenceState( f, i );
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	68b9      	ldr	r1, [r7, #8]
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	4798      	blx	r3
 80038d6:	60b8      	str	r0, [r7, #8]
                if ( QFIS_INFERENCE_ERROR == i ) {
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d013      	beq.n	8003906 <qFIS_Inference+0x82>
                    break;
                }
                ++i;
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	3301      	adds	r3, #1
 80038e2:	60bb      	str	r3, [r7, #8]
            while ( ( _QFIS_RULES_END != f->rules[ i ] ) && ( f->ruleCount < f->nRules ) ) {
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	4413      	add	r3, r2
 80038ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038f2:	4a12      	ldr	r2, [pc, #72]	; (800393c <qFIS_Inference+0xb8>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d007      	beq.n	8003908 <qFIS_Inference+0x84>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003900:	429a      	cmp	r2, r3
 8003902:	d3e3      	bcc.n	80038cc <qFIS_Inference+0x48>
 8003904:	e000      	b.n	8003908 <qFIS_Inference+0x84>
                    break;
 8003906:	bf00      	nop
            }
        }
        if ( ( _QFIS_RULES_END == f->rules[ i ] ) && ( f->ruleCount == f->nRules) ) {
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	4413      	add	r3, r2
 8003912:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003916:	4a09      	ldr	r2, [pc, #36]	; (800393c <qFIS_Inference+0xb8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d107      	bne.n	800392c <qFIS_Inference+0xa8>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003924:	429a      	cmp	r2, r3
 8003926:	d101      	bne.n	800392c <qFIS_Inference+0xa8>
            retVal = 1;
 8003928:	2301      	movs	r3, #1
 800392a:	60fb      	str	r3, [r7, #12]
        }
    }

    return retVal;
 800392c:	68fb      	ldr	r3, [r7, #12]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	08002e05 	.word	0x08002e05
 800393c:	ffff8001 	.word	0xffff8001

08003940 <qFIS_GetNextX>:
/*============================================================================*/
static float qFIS_GetNextX( const float init,
                            const float res,
                            const size_t i )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
    /*cstat -CERT-FLP36-C*/
    return init + ( ( (float)i + 0.5f )*res );
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7fd f9c1 	bl	8000cd4 <__aeabi_ui2f>
 8003952:	4603      	mov	r3, r0
 8003954:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003958:	4618      	mov	r0, r3
 800395a:	f7fd f90b 	bl	8000b74 <__addsf3>
 800395e:	4603      	mov	r3, r0
 8003960:	68b9      	ldr	r1, [r7, #8]
 8003962:	4618      	mov	r0, r3
 8003964:	f7fd fa0e 	bl	8000d84 <__aeabi_fmul>
 8003968:	4603      	mov	r3, r0
 800396a:	68f9      	ldr	r1, [r7, #12]
 800396c:	4618      	mov	r0, r3
 800396e:	f7fd f901 	bl	8000b74 <__addsf3>
 8003972:	4603      	mov	r3, r0
    /*cstat +CERT-FLP36-C*/
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <qFIS_TriMF>:
/*============================================================================*/
static float qFIS_TriMF( const qFIS_IO_Base_t * const in,
                         const float *p,
                         const size_t n )
{
 800397c:	b5b0      	push	{r4, r5, r7, lr}
 800397e:	b08a      	sub	sp, #40	; 0x28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
    float a, b, c, tmp;
    float x = in[ 0 ].value;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)n;

    a = p[ 0 ];
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	623b      	str	r3, [r7, #32]
    b = p[ 1 ];
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	61fb      	str	r3, [r7, #28]
    c = p[ 2 ];
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	61bb      	str	r3, [r7, #24]
    tmp = qFIS_Min( ( x - a )/( b - a ) , ( c - x )/( c - b ) );
 80039a0:	6a39      	ldr	r1, [r7, #32]
 80039a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039a4:	f7fd f8e4 	bl	8000b70 <__aeabi_fsub>
 80039a8:	4603      	mov	r3, r0
 80039aa:	461c      	mov	r4, r3
 80039ac:	6a39      	ldr	r1, [r7, #32]
 80039ae:	69f8      	ldr	r0, [r7, #28]
 80039b0:	f7fd f8de 	bl	8000b70 <__aeabi_fsub>
 80039b4:	4603      	mov	r3, r0
 80039b6:	4619      	mov	r1, r3
 80039b8:	4620      	mov	r0, r4
 80039ba:	f7fd fa97 	bl	8000eec <__aeabi_fdiv>
 80039be:	4603      	mov	r3, r0
 80039c0:	461c      	mov	r4, r3
 80039c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039c4:	69b8      	ldr	r0, [r7, #24]
 80039c6:	f7fd f8d3 	bl	8000b70 <__aeabi_fsub>
 80039ca:	4603      	mov	r3, r0
 80039cc:	461d      	mov	r5, r3
 80039ce:	69f9      	ldr	r1, [r7, #28]
 80039d0:	69b8      	ldr	r0, [r7, #24]
 80039d2:	f7fd f8cd 	bl	8000b70 <__aeabi_fsub>
 80039d6:	4603      	mov	r3, r0
 80039d8:	4619      	mov	r1, r3
 80039da:	4628      	mov	r0, r5
 80039dc:	f7fd fa86 	bl	8000eec <__aeabi_fdiv>
 80039e0:	4603      	mov	r3, r0
 80039e2:	4619      	mov	r1, r3
 80039e4:	4620      	mov	r0, r4
 80039e6:	f000 ff01 	bl	80047ec <qFIS_Min>
 80039ea:	6178      	str	r0, [r7, #20]

    return qFIS_Max( tmp , 0.0f );
 80039ec:	f04f 0100 	mov.w	r1, #0
 80039f0:	6978      	ldr	r0, [r7, #20]
 80039f2:	f000 ff16 	bl	8004822 <qFIS_Max>
 80039f6:	4603      	mov	r3, r0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3728      	adds	r7, #40	; 0x28
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bdb0      	pop	{r4, r5, r7, pc}

08003a00 <qFIS_TrapMF>:
/*============================================================================*/
static float qFIS_TrapMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8003a00:	b590      	push	{r4, r7, lr}
 8003a02:	b08b      	sub	sp, #44	; 0x2c
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
    float a, b, c, d, tmp;
    float x = in[ 0 ].value;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	627b      	str	r3, [r7, #36]	; 0x24
    (void)n;

    a = p[ 0 ];
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	623b      	str	r3, [r7, #32]
    b = p[ 1 ];
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	61fb      	str	r3, [r7, #28]
    c = p[ 2 ];
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	61bb      	str	r3, [r7, #24]
    d = p[ 3 ];
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	617b      	str	r3, [r7, #20]
    tmp = qFIS_Min( ( x - a )/( b - a ) , 1.0f );
 8003a2a:	6a39      	ldr	r1, [r7, #32]
 8003a2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a2e:	f7fd f89f 	bl	8000b70 <__aeabi_fsub>
 8003a32:	4603      	mov	r3, r0
 8003a34:	461c      	mov	r4, r3
 8003a36:	6a39      	ldr	r1, [r7, #32]
 8003a38:	69f8      	ldr	r0, [r7, #28]
 8003a3a:	f7fd f899 	bl	8000b70 <__aeabi_fsub>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	4619      	mov	r1, r3
 8003a42:	4620      	mov	r0, r4
 8003a44:	f7fd fa52 	bl	8000eec <__aeabi_fdiv>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 fecc 	bl	80047ec <qFIS_Min>
 8003a54:	6138      	str	r0, [r7, #16]
    tmp = qFIS_Min( tmp, ( d - x )/( d - c ) ) ;
 8003a56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a58:	6978      	ldr	r0, [r7, #20]
 8003a5a:	f7fd f889 	bl	8000b70 <__aeabi_fsub>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	461c      	mov	r4, r3
 8003a62:	69b9      	ldr	r1, [r7, #24]
 8003a64:	6978      	ldr	r0, [r7, #20]
 8003a66:	f7fd f883 	bl	8000b70 <__aeabi_fsub>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4620      	mov	r0, r4
 8003a70:	f7fd fa3c 	bl	8000eec <__aeabi_fdiv>
 8003a74:	4603      	mov	r3, r0
 8003a76:	4619      	mov	r1, r3
 8003a78:	6938      	ldr	r0, [r7, #16]
 8003a7a:	f000 feb7 	bl	80047ec <qFIS_Min>
 8003a7e:	6138      	str	r0, [r7, #16]

    return qFIS_Max( tmp , 0.0f );
 8003a80:	f04f 0100 	mov.w	r1, #0
 8003a84:	6938      	ldr	r0, [r7, #16]
 8003a86:	f000 fecc 	bl	8004822 <qFIS_Max>
 8003a8a:	4603      	mov	r3, r0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	372c      	adds	r7, #44	; 0x2c
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd90      	pop	{r4, r7, pc}

08003a94 <qFIS_GBellMF>:
/*============================================================================*/
static float qFIS_GBellMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8003a94:	b590      	push	{r4, r7, lr}
 8003a96:	b089      	sub	sp, #36	; 0x24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
    float a, b, c;
    float x = in[ 0 ].value;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	617b      	str	r3, [r7, #20]
    c = p[ 2 ];
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	613b      	str	r3, [r7, #16]
    
    return ( 1.0f/( 1.0f + QLIB_POW( QLIB_ABS( ( x - c )/a ) , 2.0f*b ) ) );
 8003ab8:	6939      	ldr	r1, [r7, #16]
 8003aba:	69f8      	ldr	r0, [r7, #28]
 8003abc:	f7fd f858 	bl	8000b70 <__aeabi_fsub>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	69b9      	ldr	r1, [r7, #24]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fd fa11 	bl	8000eec <__aeabi_fdiv>
 8003aca:	4603      	mov	r3, r0
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fe fc25 	bl	800231c <qFFMath_Abs>
 8003ad2:	4604      	mov	r4, r0
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fd f84b 	bl	8000b74 <__addsf3>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	f7fe fdcc 	bl	8002680 <qFFMath_Pow>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fd f840 	bl	8000b74 <__addsf3>
 8003af4:	4603      	mov	r3, r0
 8003af6:	4619      	mov	r1, r3
 8003af8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003afc:	f7fd f9f6 	bl	8000eec <__aeabi_fdiv>
 8003b00:	4603      	mov	r3, r0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3724      	adds	r7, #36	; 0x24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd90      	pop	{r4, r7, pc}

08003b0a <qFIS_GaussMF>:
/*============================================================================*/
static float qFIS_GaussMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b088      	sub	sp, #32
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	607a      	str	r2, [r7, #4]
    float a, c, tmp;
    float x = in[ 0 ].value;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	61bb      	str	r3, [r7, #24]
    c = p[ 1 ];
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	617b      	str	r3, [r7, #20]
    tmp = ( x - c )/a;
 8003b28:	6979      	ldr	r1, [r7, #20]
 8003b2a:	69f8      	ldr	r0, [r7, #28]
 8003b2c:	f7fd f820 	bl	8000b70 <__aeabi_fsub>
 8003b30:	4603      	mov	r3, r0
 8003b32:	69b9      	ldr	r1, [r7, #24]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fd f9d9 	bl	8000eec <__aeabi_fdiv>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	613b      	str	r3, [r7, #16]

    return QLIB_EXP( -0.5f*tmp*tmp );
 8003b3e:	f04f 413f 	mov.w	r1, #3204448256	; 0xbf000000
 8003b42:	6938      	ldr	r0, [r7, #16]
 8003b44:	f7fd f91e 	bl	8000d84 <__aeabi_fmul>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	6939      	ldr	r1, [r7, #16]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fd f919 	bl	8000d84 <__aeabi_fmul>
 8003b52:	4603      	mov	r3, r0
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fe fd6b 	bl	8002630 <qFFMath_Exp>
 8003b5a:	4603      	mov	r3, r0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3720      	adds	r7, #32
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <qFIS_Gauss2MF>:
/*============================================================================*/
static float qFIS_Gauss2MF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08a      	sub	sp, #40	; 0x28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
    float c1, c2, f1, f2;
    float x = in[ 0 ].value;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24

    c1 = p[ 1 ];
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	623b      	str	r3, [r7, #32]
    c2 = p[ 3 ];
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	61fb      	str	r3, [r7, #28]
    f1 = ( x <= c1 ) ? qFIS_GaussMF( in , p, n ) : 1.0f;
 8003b82:	6a39      	ldr	r1, [r7, #32]
 8003b84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b86:	f7fd faa5 	bl	80010d4 <__aeabi_fcmple>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d006      	beq.n	8003b9e <qFIS_Gauss2MF+0x3a>
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	68b9      	ldr	r1, [r7, #8]
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f7ff ffb8 	bl	8003b0a <qFIS_GaussMF>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	e001      	b.n	8003ba2 <qFIS_Gauss2MF+0x3e>
 8003b9e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003ba2:	61bb      	str	r3, [r7, #24]
    f2 = ( x <= c2 ) ? qFIS_GaussMF( in , &p[ 2 ], n ) : 1.0f;
 8003ba4:	69f9      	ldr	r1, [r7, #28]
 8003ba6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ba8:	f7fd fa94 	bl	80010d4 <__aeabi_fcmple>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d008      	beq.n	8003bc4 <qFIS_Gauss2MF+0x60>
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	3308      	adds	r3, #8
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	4619      	mov	r1, r3
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f7ff ffa5 	bl	8003b0a <qFIS_GaussMF>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	e001      	b.n	8003bc8 <qFIS_Gauss2MF+0x64>
 8003bc4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003bc8:	617b      	str	r3, [r7, #20]

    return f1*f2;
 8003bca:	6979      	ldr	r1, [r7, #20]
 8003bcc:	69b8      	ldr	r0, [r7, #24]
 8003bce:	f7fd f8d9 	bl	8000d84 <__aeabi_fmul>
 8003bd2:	4603      	mov	r3, r0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3728      	adds	r7, #40	; 0x28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <qFIS_SigMF>:
/*============================================================================*/
static float qFIS_SigMF( const qFIS_IO_Base_t * const in,
                         const float *p,
                         const size_t n )
{
 8003bdc:	b590      	push	{r4, r7, lr}
 8003bde:	b089      	sub	sp, #36	; 0x24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
    float a, b;
    float x = in[ 0 ].value;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	61fb      	str	r3, [r7, #28]
    (void)n;

    a = p[ 0 ];
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	617b      	str	r3, [r7, #20]

    return 1.0f/( 1.0f + QLIB_EXP( -a*( x - b ) ) );
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8003c00:	6979      	ldr	r1, [r7, #20]
 8003c02:	69f8      	ldr	r0, [r7, #28]
 8003c04:	f7fc ffb4 	bl	8000b70 <__aeabi_fsub>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	f7fd f8b9 	bl	8000d84 <__aeabi_fmul>
 8003c12:	4603      	mov	r3, r0
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7fe fd0b 	bl	8002630 <qFFMath_Exp>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fc ffa7 	bl	8000b74 <__addsf3>
 8003c26:	4603      	mov	r3, r0
 8003c28:	4619      	mov	r1, r3
 8003c2a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003c2e:	f7fd f95d 	bl	8000eec <__aeabi_fdiv>
 8003c32:	4603      	mov	r3, r0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3724      	adds	r7, #36	; 0x24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd90      	pop	{r4, r7, pc}

08003c3c <qFIS_TSigMF>:
/*============================================================================*/
static float qFIS_TSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b08a      	sub	sp, #40	; 0x28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	623b      	str	r3, [r7, #32]
    float min = in[ 0 ].min;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	61fb      	str	r3, [r7, #28]
    float max = in[ 0 ].max;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ]; /*slope*/
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	617b      	str	r3, [r7, #20]
    b = p[ 1 ]; /*inflection*/
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	613b      	str	r3, [r7, #16]
    if ( qFMathEx_Equal( x, 1.0f ) ) {
 8003c66:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003c6a:	6a38      	ldr	r0, [r7, #32]
 8003c6c:	f000 feab 	bl	80049c6 <qFMathEx_Equal>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00d      	beq.n	8003c92 <qFIS_TSigMF+0x56>
        if ( a >= 0.0f ) {
 8003c76:	f04f 0100 	mov.w	r1, #0
 8003c7a:	6978      	ldr	r0, [r7, #20]
 8003c7c:	f7fd fa34 	bl	80010e8 <__aeabi_fcmpge>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d002      	beq.n	8003c8c <qFIS_TSigMF+0x50>
            y = max;
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8a:	e033      	b.n	8003cf4 <qFIS_TSigMF+0xb8>
        }
        else {
            y = min;
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c90:	e030      	b.n	8003cf4 <qFIS_TSigMF+0xb8>
        }
    }
    else if ( qFMathEx_Equal( x, 0.0f ) ) {
 8003c92:	f04f 0100 	mov.w	r1, #0
 8003c96:	6a38      	ldr	r0, [r7, #32]
 8003c98:	f000 fe95 	bl	80049c6 <qFMathEx_Equal>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00d      	beq.n	8003cbe <qFIS_TSigMF+0x82>
        if ( a >= 0.0f ) {
 8003ca2:	f04f 0100 	mov.w	r1, #0
 8003ca6:	6978      	ldr	r0, [r7, #20]
 8003ca8:	f7fd fa1e 	bl	80010e8 <__aeabi_fcmpge>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <qFIS_TSigMF+0x7c>
            y = min;
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb6:	e01d      	b.n	8003cf4 <qFIS_TSigMF+0xb8>
        }
        else {
            y = max;
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	627b      	str	r3, [r7, #36]	; 0x24
 8003cbc:	e01a      	b.n	8003cf4 <qFIS_TSigMF+0xb8>
        }
    }
    else {
        /*cstat -MISRAC2012-Dir-4.11_a*/
        y = b - ( QLIB_LOG( ( 1.0f/x ) - 1.0f )/a );
 8003cbe:	6a39      	ldr	r1, [r7, #32]
 8003cc0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003cc4:	f7fd f912 	bl	8000eec <__aeabi_fdiv>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fc ff4e 	bl	8000b70 <__aeabi_fsub>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fe fcbe 	bl	8002658 <qFFMath_Log>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	6979      	ldr	r1, [r7, #20]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fd f903 	bl	8000eec <__aeabi_fdiv>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4619      	mov	r1, r3
 8003cea:	6938      	ldr	r0, [r7, #16]
 8003cec:	f7fc ff40 	bl	8000b70 <__aeabi_fsub>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
        /*cstat +MISRAC2012-Dir-4.11_a*/
    }

    return y;
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3728      	adds	r7, #40	; 0x28
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <qFIS_DSigMF>:
/*============================================================================*/
static float qFIS_DSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8003cfe:	b590      	push	{r4, r7, lr}
 8003d00:	b085      	sub	sp, #20
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SigMF( in , p, n ) - qFIS_SigMF( in , &p[ 2 ], n ) );
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	68b9      	ldr	r1, [r7, #8]
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f7ff ff64 	bl	8003bdc <qFIS_SigMF>
 8003d14:	4604      	mov	r4, r0
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	3308      	adds	r3, #8
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f7ff ff5c 	bl	8003bdc <qFIS_SigMF>
 8003d24:	4603      	mov	r3, r0
 8003d26:	4619      	mov	r1, r3
 8003d28:	4620      	mov	r0, r4
 8003d2a:	f7fc ff21 	bl	8000b70 <__aeabi_fsub>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fe faf3 	bl	800231c <qFFMath_Abs>
 8003d36:	4603      	mov	r3, r0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd90      	pop	{r4, r7, pc}

08003d40 <qFIS_PSigMF>:
/*============================================================================*/
static float qFIS_PSigMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 8003d40:	b590      	push	{r4, r7, lr}
 8003d42:	b085      	sub	sp, #20
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SigMF( in , p, n )*qFIS_SigMF( in , &p[ 2 ], n ) );
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	68b9      	ldr	r1, [r7, #8]
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f7ff ff43 	bl	8003bdc <qFIS_SigMF>
 8003d56:	4604      	mov	r4, r0
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	3308      	adds	r3, #8
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	4619      	mov	r1, r3
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f7ff ff3b 	bl	8003bdc <qFIS_SigMF>
 8003d66:	4603      	mov	r3, r0
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	f7fd f80a 	bl	8000d84 <__aeabi_fmul>
 8003d70:	4603      	mov	r3, r0
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fe fad2 	bl	800231c <qFFMath_Abs>
 8003d78:	4603      	mov	r3, r0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd90      	pop	{r4, r7, pc}

08003d82 <qFIS_SMF>:
/*============================================================================*/
static float qFIS_SMF( const qFIS_IO_Base_t * const in,
                       const float *p,
                       const size_t n )
{
 8003d82:	b590      	push	{r4, r7, lr}
 8003d84:	b08b      	sub	sp, #44	; 0x2c
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	60f8      	str	r0, [r7, #12]
 8003d8a:	60b9      	str	r1, [r7, #8]
 8003d8c:	607a      	str	r2, [r7, #4]
    float a, b, tmp, y;
    float x = in[ 0 ].value;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	623b      	str	r3, [r7, #32]
    (void)n;

    a = p[ 0 ];
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	61fb      	str	r3, [r7, #28]
    b = p[ 1 ];
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	61bb      	str	r3, [r7, #24]
    if ( x <= a ) {
 8003da0:	69f9      	ldr	r1, [r7, #28]
 8003da2:	6a38      	ldr	r0, [r7, #32]
 8003da4:	f7fd f996 	bl	80010d4 <__aeabi_fcmple>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <qFIS_SMF+0x34>
        y =  0.0f;
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
 8003db4:	e081      	b.n	8003eba <qFIS_SMF+0x138>
    }
    else if ( x >= b ) {
 8003db6:	69b9      	ldr	r1, [r7, #24]
 8003db8:	6a38      	ldr	r0, [r7, #32]
 8003dba:	f7fd f995 	bl	80010e8 <__aeabi_fcmpge>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <qFIS_SMF+0x4a>
        y = 1.0f;
 8003dc4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dca:	e076      	b.n	8003eba <qFIS_SMF+0x138>
    }
    else if ( ( x >= a ) && ( x <= ( ( a + b )*0.5f ) ) ) {
 8003dcc:	69f9      	ldr	r1, [r7, #28]
 8003dce:	6a38      	ldr	r0, [r7, #32]
 8003dd0:	f7fd f98a 	bl	80010e8 <__aeabi_fcmpge>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d02f      	beq.n	8003e3a <qFIS_SMF+0xb8>
 8003dda:	69b9      	ldr	r1, [r7, #24]
 8003ddc:	69f8      	ldr	r0, [r7, #28]
 8003dde:	f7fc fec9 	bl	8000b74 <__addsf3>
 8003de2:	4603      	mov	r3, r0
 8003de4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fc ffcb 	bl	8000d84 <__aeabi_fmul>
 8003dee:	4603      	mov	r3, r0
 8003df0:	4619      	mov	r1, r3
 8003df2:	6a38      	ldr	r0, [r7, #32]
 8003df4:	f7fd f96e 	bl	80010d4 <__aeabi_fcmple>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d01d      	beq.n	8003e3a <qFIS_SMF+0xb8>
        tmp = ( x - a )/( b - a );
 8003dfe:	69f9      	ldr	r1, [r7, #28]
 8003e00:	6a38      	ldr	r0, [r7, #32]
 8003e02:	f7fc feb5 	bl	8000b70 <__aeabi_fsub>
 8003e06:	4603      	mov	r3, r0
 8003e08:	461c      	mov	r4, r3
 8003e0a:	69f9      	ldr	r1, [r7, #28]
 8003e0c:	69b8      	ldr	r0, [r7, #24]
 8003e0e:	f7fc feaf 	bl	8000b70 <__aeabi_fsub>
 8003e12:	4603      	mov	r3, r0
 8003e14:	4619      	mov	r1, r3
 8003e16:	4620      	mov	r0, r4
 8003e18:	f7fd f868 	bl	8000eec <__aeabi_fdiv>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	617b      	str	r3, [r7, #20]
        y = 2.0f*tmp*tmp;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	4619      	mov	r1, r3
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fc fea5 	bl	8000b74 <__addsf3>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	6978      	ldr	r0, [r7, #20]
 8003e30:	f7fc ffa8 	bl	8000d84 <__aeabi_fmul>
 8003e34:	4603      	mov	r3, r0
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
 8003e38:	e03f      	b.n	8003eba <qFIS_SMF+0x138>
    }
    else if ( ( x <= b ) && ( x >= ( ( a + b )*0.5f ) ) ) {
 8003e3a:	69b9      	ldr	r1, [r7, #24]
 8003e3c:	6a38      	ldr	r0, [r7, #32]
 8003e3e:	f7fd f949 	bl	80010d4 <__aeabi_fcmple>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d035      	beq.n	8003eb4 <qFIS_SMF+0x132>
 8003e48:	69b9      	ldr	r1, [r7, #24]
 8003e4a:	69f8      	ldr	r0, [r7, #28]
 8003e4c:	f7fc fe92 	bl	8000b74 <__addsf3>
 8003e50:	4603      	mov	r3, r0
 8003e52:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fc ff94 	bl	8000d84 <__aeabi_fmul>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	4619      	mov	r1, r3
 8003e60:	6a38      	ldr	r0, [r7, #32]
 8003e62:	f7fd f941 	bl	80010e8 <__aeabi_fcmpge>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d023      	beq.n	8003eb4 <qFIS_SMF+0x132>
        tmp = ( x - b )/( b - a );
 8003e6c:	69b9      	ldr	r1, [r7, #24]
 8003e6e:	6a38      	ldr	r0, [r7, #32]
 8003e70:	f7fc fe7e 	bl	8000b70 <__aeabi_fsub>
 8003e74:	4603      	mov	r3, r0
 8003e76:	461c      	mov	r4, r3
 8003e78:	69f9      	ldr	r1, [r7, #28]
 8003e7a:	69b8      	ldr	r0, [r7, #24]
 8003e7c:	f7fc fe78 	bl	8000b70 <__aeabi_fsub>
 8003e80:	4603      	mov	r3, r0
 8003e82:	4619      	mov	r1, r3
 8003e84:	4620      	mov	r0, r4
 8003e86:	f7fd f831 	bl	8000eec <__aeabi_fdiv>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	617b      	str	r3, [r7, #20]
        y = ( 1.0f - ( 2.0f*tmp*tmp ) );
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	4619      	mov	r1, r3
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fc fe6e 	bl	8000b74 <__addsf3>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	6979      	ldr	r1, [r7, #20]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fc ff71 	bl	8000d84 <__aeabi_fmul>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003eaa:	f7fc fe61 	bl	8000b70 <__aeabi_fsub>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb2:	e002      	b.n	8003eba <qFIS_SMF+0x138>
    }
    else {
        y = 0.0f;
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	372c      	adds	r7, #44	; 0x2c
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd90      	pop	{r4, r7, pc}

08003ec4 <qFIS_TSMF>:
/*============================================================================*/
static float qFIS_TSMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 8003ec4:	b590      	push	{r4, r7, lr}
 8003ec6:	b091      	sub	sp, #68	; 0x44
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
    float diff, a, b, ta, tb, ma, mb;
    float x = in[ 0 ].value;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
    (void)n;
    qFIS_IO_Base_t tmp = { 0.0f, 0.0f, 0.0f };
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	61bb      	str	r3, [r7, #24]
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	61fb      	str	r3, [r7, #28]

    a = p[ 0 ]; /*start*/
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	63bb      	str	r3, [r7, #56]	; 0x38
    b = p[ 1 ]; /*end*/
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	637b      	str	r3, [r7, #52]	; 0x34
    diff = b - a;
 8003ef4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ef6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003ef8:	f7fc fe3a 	bl	8000b70 <__aeabi_fsub>
 8003efc:	4603      	mov	r3, r0
 8003efe:	633b      	str	r3, [r7, #48]	; 0x30
    diff = 0.5f*diff*diff;
 8003f00:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8003f04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f06:	f7fc ff3d 	bl	8000d84 <__aeabi_fmul>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f10:	f7fc ff38 	bl	8000d84 <__aeabi_fmul>
 8003f14:	4603      	mov	r3, r0
 8003f16:	633b      	str	r3, [r7, #48]	; 0x30
    /*cstat -MISRAC2012-Dir-4.11_a -MISRAC2012-Dir-4.11_b*/
    ta = a + QLIB_SQRT( x*diff );
 8003f18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f1a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003f1c:	f7fc ff32 	bl	8000d84 <__aeabi_fmul>
 8003f20:	4603      	mov	r3, r0
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fe fa0f 	bl	8002346 <qFFMath_Sqrt>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003f2e:	f7fc fe21 	bl	8000b74 <__addsf3>
 8003f32:	4603      	mov	r3, r0
 8003f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    tmp.value = ta;
 8003f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f38:	61fb      	str	r3, [r7, #28]
    ma = qFIS_SMF( &tmp, p, n );
 8003f3a:	f107 0314 	add.w	r3, r7, #20
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff ff1d 	bl	8003d82 <qFIS_SMF>
 8003f48:	62b8      	str	r0, [r7, #40]	; 0x28
    tb = b + QLIB_SQRT( -( x - 1.0f )*diff );
 8003f4a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003f4e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003f50:	f7fc fe0e 	bl	8000b70 <__aeabi_fsub>
 8003f54:	4603      	mov	r3, r0
 8003f56:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003f5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fc ff11 	bl	8000d84 <__aeabi_fmul>
 8003f62:	4603      	mov	r3, r0
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fe f9ee 	bl	8002346 <qFFMath_Sqrt>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003f70:	f7fc fe00 	bl	8000b74 <__addsf3>
 8003f74:	4603      	mov	r3, r0
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
    tmp.value = tb;
 8003f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7a:	61fb      	str	r3, [r7, #28]
    mb = qFIS_SMF( &tmp, p, n );
 8003f7c:	f107 0314 	add.w	r3, r7, #20
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	68b9      	ldr	r1, [r7, #8]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff fefc 	bl	8003d82 <qFIS_SMF>
 8003f8a:	6238      	str	r0, [r7, #32]
    /*cstat +MISRAC2012-Dir-4.11_a +MISRAC2012-Dir-4.11_b*/
    return  ( QLIB_ABS( x - ma ) < QLIB_ABS( x - mb ) ) ? ta : tb;
 8003f8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f8e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003f90:	f7fc fdee 	bl	8000b70 <__aeabi_fsub>
 8003f94:	4603      	mov	r3, r0
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fe f9c0 	bl	800231c <qFFMath_Abs>
 8003f9c:	4604      	mov	r4, r0
 8003f9e:	6a39      	ldr	r1, [r7, #32]
 8003fa0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003fa2:	f7fc fde5 	bl	8000b70 <__aeabi_fsub>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fe f9b7 	bl	800231c <qFFMath_Abs>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	f7fd f884 	bl	80010c0 <__aeabi_fcmplt>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <qFIS_TSMF+0xfe>
 8003fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc0:	e000      	b.n	8003fc4 <qFIS_TSMF+0x100>
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3744      	adds	r7, #68	; 0x44
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd90      	pop	{r4, r7, pc}

08003fcc <qFIS_ZMF>:
/*============================================================================*/
static float qFIS_ZMF( const qFIS_IO_Base_t * const in,
                       const float *p,
                       const size_t n )
{
 8003fcc:	b590      	push	{r4, r7, lr}
 8003fce:	b08b      	sub	sp, #44	; 0x2c
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
    float a, b, tmp, y;
    float x = in[ 0 ].value;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	623b      	str	r3, [r7, #32]
    (void)n;

    a = p[ 0 ];
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	61fb      	str	r3, [r7, #28]
    b = p[ 1 ];
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	61bb      	str	r3, [r7, #24]
    if ( x <= a ) {
 8003fea:	69f9      	ldr	r1, [r7, #28]
 8003fec:	6a38      	ldr	r0, [r7, #32]
 8003fee:	f7fd f871 	bl	80010d4 <__aeabi_fcmple>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <qFIS_ZMF+0x34>
        y = 1.0f;
 8003ff8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ffe:	e081      	b.n	8004104 <qFIS_ZMF+0x138>
    }
    else if ( x >= b ) {
 8004000:	69b9      	ldr	r1, [r7, #24]
 8004002:	6a38      	ldr	r0, [r7, #32]
 8004004:	f7fd f870 	bl	80010e8 <__aeabi_fcmpge>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <qFIS_ZMF+0x4a>
        y = 0.0f;
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	627b      	str	r3, [r7, #36]	; 0x24
 8004014:	e076      	b.n	8004104 <qFIS_ZMF+0x138>
    }
    else if ( ( x >= a ) && ( x <= ( ( a + b )*0.5f ) ) ) {
 8004016:	69f9      	ldr	r1, [r7, #28]
 8004018:	6a38      	ldr	r0, [r7, #32]
 800401a:	f7fd f865 	bl	80010e8 <__aeabi_fcmpge>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d035      	beq.n	8004090 <qFIS_ZMF+0xc4>
 8004024:	69b9      	ldr	r1, [r7, #24]
 8004026:	69f8      	ldr	r0, [r7, #28]
 8004028:	f7fc fda4 	bl	8000b74 <__addsf3>
 800402c:	4603      	mov	r3, r0
 800402e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8004032:	4618      	mov	r0, r3
 8004034:	f7fc fea6 	bl	8000d84 <__aeabi_fmul>
 8004038:	4603      	mov	r3, r0
 800403a:	4619      	mov	r1, r3
 800403c:	6a38      	ldr	r0, [r7, #32]
 800403e:	f7fd f849 	bl	80010d4 <__aeabi_fcmple>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d023      	beq.n	8004090 <qFIS_ZMF+0xc4>
        tmp = ( x - a )/( b - a );
 8004048:	69f9      	ldr	r1, [r7, #28]
 800404a:	6a38      	ldr	r0, [r7, #32]
 800404c:	f7fc fd90 	bl	8000b70 <__aeabi_fsub>
 8004050:	4603      	mov	r3, r0
 8004052:	461c      	mov	r4, r3
 8004054:	69f9      	ldr	r1, [r7, #28]
 8004056:	69b8      	ldr	r0, [r7, #24]
 8004058:	f7fc fd8a 	bl	8000b70 <__aeabi_fsub>
 800405c:	4603      	mov	r3, r0
 800405e:	4619      	mov	r1, r3
 8004060:	4620      	mov	r0, r4
 8004062:	f7fc ff43 	bl	8000eec <__aeabi_fdiv>
 8004066:	4603      	mov	r3, r0
 8004068:	617b      	str	r3, [r7, #20]
        y = 1.0f - ( 2.0f*tmp*tmp );
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	4619      	mov	r1, r3
 800406e:	4618      	mov	r0, r3
 8004070:	f7fc fd80 	bl	8000b74 <__addsf3>
 8004074:	4603      	mov	r3, r0
 8004076:	6979      	ldr	r1, [r7, #20]
 8004078:	4618      	mov	r0, r3
 800407a:	f7fc fe83 	bl	8000d84 <__aeabi_fmul>
 800407e:	4603      	mov	r3, r0
 8004080:	4619      	mov	r1, r3
 8004082:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8004086:	f7fc fd73 	bl	8000b70 <__aeabi_fsub>
 800408a:	4603      	mov	r3, r0
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
 800408e:	e039      	b.n	8004104 <qFIS_ZMF+0x138>
    }
    else if ( ( x <= b ) && ( x >= ( ( a + b )*0.5f ) ) ) {
 8004090:	69b9      	ldr	r1, [r7, #24]
 8004092:	6a38      	ldr	r0, [r7, #32]
 8004094:	f7fd f81e 	bl	80010d4 <__aeabi_fcmple>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d02f      	beq.n	80040fe <qFIS_ZMF+0x132>
 800409e:	69b9      	ldr	r1, [r7, #24]
 80040a0:	69f8      	ldr	r0, [r7, #28]
 80040a2:	f7fc fd67 	bl	8000b74 <__addsf3>
 80040a6:	4603      	mov	r3, r0
 80040a8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fc fe69 	bl	8000d84 <__aeabi_fmul>
 80040b2:	4603      	mov	r3, r0
 80040b4:	4619      	mov	r1, r3
 80040b6:	6a38      	ldr	r0, [r7, #32]
 80040b8:	f7fd f816 	bl	80010e8 <__aeabi_fcmpge>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d01d      	beq.n	80040fe <qFIS_ZMF+0x132>
        tmp = ( x - b )/( b - a );
 80040c2:	69b9      	ldr	r1, [r7, #24]
 80040c4:	6a38      	ldr	r0, [r7, #32]
 80040c6:	f7fc fd53 	bl	8000b70 <__aeabi_fsub>
 80040ca:	4603      	mov	r3, r0
 80040cc:	461c      	mov	r4, r3
 80040ce:	69f9      	ldr	r1, [r7, #28]
 80040d0:	69b8      	ldr	r0, [r7, #24]
 80040d2:	f7fc fd4d 	bl	8000b70 <__aeabi_fsub>
 80040d6:	4603      	mov	r3, r0
 80040d8:	4619      	mov	r1, r3
 80040da:	4620      	mov	r0, r4
 80040dc:	f7fc ff06 	bl	8000eec <__aeabi_fdiv>
 80040e0:	4603      	mov	r3, r0
 80040e2:	617b      	str	r3, [r7, #20]
        y = 2.0f*tmp*tmp;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	4619      	mov	r1, r3
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fc fd43 	bl	8000b74 <__addsf3>
 80040ee:	4603      	mov	r3, r0
 80040f0:	4619      	mov	r1, r3
 80040f2:	6978      	ldr	r0, [r7, #20]
 80040f4:	f7fc fe46 	bl	8000d84 <__aeabi_fmul>
 80040f8:	4603      	mov	r3, r0
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
 80040fc:	e002      	b.n	8004104 <qFIS_ZMF+0x138>
    }
    else {
        y = 0.0f;
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004106:	4618      	mov	r0, r3
 8004108:	372c      	adds	r7, #44	; 0x2c
 800410a:	46bd      	mov	sp, r7
 800410c:	bd90      	pop	{r4, r7, pc}

0800410e <qFIS_LinSMF>:
/*============================================================================*/
static float qFIS_LinSMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 800410e:	b590      	push	{r4, r7, lr}
 8004110:	b089      	sub	sp, #36	; 0x24
 8004112:	af00      	add	r7, sp, #0
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	60b9      	str	r1, [r7, #8]
 8004118:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ];
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	617b      	str	r3, [r7, #20]
    b = p[ 1 ];
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	613b      	str	r3, [r7, #16]
    if ( a < b ) {
 800412c:	6939      	ldr	r1, [r7, #16]
 800412e:	6978      	ldr	r0, [r7, #20]
 8004130:	f7fc ffc6 	bl	80010c0 <__aeabi_fcmplt>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d027      	beq.n	800418a <qFIS_LinSMF+0x7c>
        if ( x < a ) {
 800413a:	6979      	ldr	r1, [r7, #20]
 800413c:	69b8      	ldr	r0, [r7, #24]
 800413e:	f7fc ffbf 	bl	80010c0 <__aeabi_fcmplt>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d003      	beq.n	8004150 <qFIS_LinSMF+0x42>
            y = 0.0f;
 8004148:	f04f 0300 	mov.w	r3, #0
 800414c:	61fb      	str	r3, [r7, #28]
 800414e:	e034      	b.n	80041ba <qFIS_LinSMF+0xac>
        }
        else if ( x > b ) {
 8004150:	6939      	ldr	r1, [r7, #16]
 8004152:	69b8      	ldr	r0, [r7, #24]
 8004154:	f7fc ffd2 	bl	80010fc <__aeabi_fcmpgt>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <qFIS_LinSMF+0x58>
            y = 1.0f;
 800415e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004162:	61fb      	str	r3, [r7, #28]
 8004164:	e029      	b.n	80041ba <qFIS_LinSMF+0xac>
        }
        else {
            y = ( x - a )/( b - a );
 8004166:	6979      	ldr	r1, [r7, #20]
 8004168:	69b8      	ldr	r0, [r7, #24]
 800416a:	f7fc fd01 	bl	8000b70 <__aeabi_fsub>
 800416e:	4603      	mov	r3, r0
 8004170:	461c      	mov	r4, r3
 8004172:	6979      	ldr	r1, [r7, #20]
 8004174:	6938      	ldr	r0, [r7, #16]
 8004176:	f7fc fcfb 	bl	8000b70 <__aeabi_fsub>
 800417a:	4603      	mov	r3, r0
 800417c:	4619      	mov	r1, r3
 800417e:	4620      	mov	r0, r4
 8004180:	f7fc feb4 	bl	8000eec <__aeabi_fdiv>
 8004184:	4603      	mov	r3, r0
 8004186:	61fb      	str	r3, [r7, #28]
 8004188:	e017      	b.n	80041ba <qFIS_LinSMF+0xac>
        }
    }
    else if ( qFMathEx_Equal( a, b ) ) {
 800418a:	6939      	ldr	r1, [r7, #16]
 800418c:	6978      	ldr	r0, [r7, #20]
 800418e:	f000 fc1a 	bl	80049c6 <qFMathEx_Equal>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00d      	beq.n	80041b4 <qFIS_LinSMF+0xa6>
        y = ( x < a ) ? 0.0f : 1.0f;
 8004198:	6979      	ldr	r1, [r7, #20]
 800419a:	69b8      	ldr	r0, [r7, #24]
 800419c:	f7fc ff90 	bl	80010c0 <__aeabi_fcmplt>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <qFIS_LinSMF+0x9e>
 80041a6:	f04f 0300 	mov.w	r3, #0
 80041aa:	e001      	b.n	80041b0 <qFIS_LinSMF+0xa2>
 80041ac:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80041b0:	61fb      	str	r3, [r7, #28]
 80041b2:	e002      	b.n	80041ba <qFIS_LinSMF+0xac>
    }
    else {
        y = 0.0f;
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	61fb      	str	r3, [r7, #28]
    }

    return y;
 80041ba:	69fb      	ldr	r3, [r7, #28]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3724      	adds	r7, #36	; 0x24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd90      	pop	{r4, r7, pc}

080041c4 <qFIS_LinZMF>:
/*============================================================================*/
static float qFIS_LinZMF( const qFIS_IO_Base_t * const in,
                          const float *p,
                          const size_t n )
{
 80041c4:	b590      	push	{r4, r7, lr}
 80041c6:	b089      	sub	sp, #36	; 0x24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
    float a, b, y;
    float x = in[ 0 ].value;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	61bb      	str	r3, [r7, #24]
    (void)n;

    a = p[ 0 ];
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	617b      	str	r3, [r7, #20]
    b = p[ 1 ];
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	613b      	str	r3, [r7, #16]
    if ( a < b ) {
 80041e2:	6939      	ldr	r1, [r7, #16]
 80041e4:	6978      	ldr	r0, [r7, #20]
 80041e6:	f7fc ff6b 	bl	80010c0 <__aeabi_fcmplt>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d027      	beq.n	8004240 <qFIS_LinZMF+0x7c>
        if ( x < a ) {
 80041f0:	6979      	ldr	r1, [r7, #20]
 80041f2:	69b8      	ldr	r0, [r7, #24]
 80041f4:	f7fc ff64 	bl	80010c0 <__aeabi_fcmplt>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <qFIS_LinZMF+0x42>
            y = 1.0f;
 80041fe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004202:	61fb      	str	r3, [r7, #28]
 8004204:	e034      	b.n	8004270 <qFIS_LinZMF+0xac>
        }
        else if ( x > b ) {
 8004206:	6939      	ldr	r1, [r7, #16]
 8004208:	69b8      	ldr	r0, [r7, #24]
 800420a:	f7fc ff77 	bl	80010fc <__aeabi_fcmpgt>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <qFIS_LinZMF+0x58>
            y = 0.0f;
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	61fb      	str	r3, [r7, #28]
 800421a:	e029      	b.n	8004270 <qFIS_LinZMF+0xac>
        }
        else {
            y = ( a - x )/( a - b );
 800421c:	69b9      	ldr	r1, [r7, #24]
 800421e:	6978      	ldr	r0, [r7, #20]
 8004220:	f7fc fca6 	bl	8000b70 <__aeabi_fsub>
 8004224:	4603      	mov	r3, r0
 8004226:	461c      	mov	r4, r3
 8004228:	6939      	ldr	r1, [r7, #16]
 800422a:	6978      	ldr	r0, [r7, #20]
 800422c:	f7fc fca0 	bl	8000b70 <__aeabi_fsub>
 8004230:	4603      	mov	r3, r0
 8004232:	4619      	mov	r1, r3
 8004234:	4620      	mov	r0, r4
 8004236:	f7fc fe59 	bl	8000eec <__aeabi_fdiv>
 800423a:	4603      	mov	r3, r0
 800423c:	61fb      	str	r3, [r7, #28]
 800423e:	e017      	b.n	8004270 <qFIS_LinZMF+0xac>
        }
    }
    else if ( qFMathEx_Equal( a, b ) ) {
 8004240:	6939      	ldr	r1, [r7, #16]
 8004242:	6978      	ldr	r0, [r7, #20]
 8004244:	f000 fbbf 	bl	80049c6 <qFMathEx_Equal>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00d      	beq.n	800426a <qFIS_LinZMF+0xa6>
        y = ( x < a ) ? 1.0f : 0.0f;
 800424e:	6979      	ldr	r1, [r7, #20]
 8004250:	69b8      	ldr	r0, [r7, #24]
 8004252:	f7fc ff35 	bl	80010c0 <__aeabi_fcmplt>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <qFIS_LinZMF+0x9e>
 800425c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004260:	e001      	b.n	8004266 <qFIS_LinZMF+0xa2>
 8004262:	f04f 0300 	mov.w	r3, #0
 8004266:	61fb      	str	r3, [r7, #28]
 8004268:	e002      	b.n	8004270 <qFIS_LinZMF+0xac>
    }
    else {
        y = 0.0f;
 800426a:	f04f 0300 	mov.w	r3, #0
 800426e:	61fb      	str	r3, [r7, #28]
    }

    return y;
 8004270:	69fb      	ldr	r3, [r7, #28]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3724      	adds	r7, #36	; 0x24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd90      	pop	{r4, r7, pc}

0800427a <qFIS_TZMF>:
/*============================================================================*/
static float qFIS_TZMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 800427a:	b590      	push	{r4, r7, lr}
 800427c:	b091      	sub	sp, #68	; 0x44
 800427e:	af00      	add	r7, sp, #0
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	607a      	str	r2, [r7, #4]
    float diff, a, b, ta, tb, ma, mb;
    float x = in[ 0 ].value;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	63fb      	str	r3, [r7, #60]	; 0x3c
    (void)n;
    qFIS_IO_Base_t tmp = { 0.0f, 0.0f, 0.0f };
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	61bb      	str	r3, [r7, #24]
 8004298:	f04f 0300 	mov.w	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]

    a = p[ 0 ]; /*start*/
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	63bb      	str	r3, [r7, #56]	; 0x38
    b = p[ 1 ]; /*end*/
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	637b      	str	r3, [r7, #52]	; 0x34
    diff = b - a;
 80042aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80042ae:	f7fc fc5f 	bl	8000b70 <__aeabi_fsub>
 80042b2:	4603      	mov	r3, r0
 80042b4:	633b      	str	r3, [r7, #48]	; 0x30
    diff = 0.5f*diff*diff;
 80042b6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80042ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042bc:	f7fc fd62 	bl	8000d84 <__aeabi_fmul>
 80042c0:	4603      	mov	r3, r0
 80042c2:	4619      	mov	r1, r3
 80042c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042c6:	f7fc fd5d 	bl	8000d84 <__aeabi_fmul>
 80042ca:	4603      	mov	r3, r0
 80042cc:	633b      	str	r3, [r7, #48]	; 0x30
    /*cstat -MISRAC2012-Dir-4.11_a -MISRAC2012-Dir-4.11_b*/
    ta = a + QLIB_SQRT( -( x - 1.0f )*diff );
 80042ce:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80042d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80042d4:	f7fc fc4c 	bl	8000b70 <__aeabi_fsub>
 80042d8:	4603      	mov	r3, r0
 80042da:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80042de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fc fd4f 	bl	8000d84 <__aeabi_fmul>
 80042e6:	4603      	mov	r3, r0
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7fe f82c 	bl	8002346 <qFFMath_Sqrt>
 80042ee:	4603      	mov	r3, r0
 80042f0:	4619      	mov	r1, r3
 80042f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80042f4:	f7fc fc3e 	bl	8000b74 <__addsf3>
 80042f8:	4603      	mov	r3, r0
 80042fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    tmp.value = ta;
 80042fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fe:	61fb      	str	r3, [r7, #28]
    ma = qFIS_SMF( &tmp, p, n );
 8004300:	f107 0314 	add.w	r3, r7, #20
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	68b9      	ldr	r1, [r7, #8]
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff fd3a 	bl	8003d82 <qFIS_SMF>
 800430e:	62b8      	str	r0, [r7, #40]	; 0x28
    tb = b + QLIB_SQRT( x*diff );
 8004310:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004312:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004314:	f7fc fd36 	bl	8000d84 <__aeabi_fmul>
 8004318:	4603      	mov	r3, r0
 800431a:	4618      	mov	r0, r3
 800431c:	f7fe f813 	bl	8002346 <qFFMath_Sqrt>
 8004320:	4603      	mov	r3, r0
 8004322:	4619      	mov	r1, r3
 8004324:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004326:	f7fc fc25 	bl	8000b74 <__addsf3>
 800432a:	4603      	mov	r3, r0
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
    tmp.value = tb;
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004330:	61fb      	str	r3, [r7, #28]
    mb = qFIS_SMF( &tmp, p, n );
 8004332:	f107 0314 	add.w	r3, r7, #20
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	68b9      	ldr	r1, [r7, #8]
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff fd21 	bl	8003d82 <qFIS_SMF>
 8004340:	6238      	str	r0, [r7, #32]
    /*cstat +MISRAC2012-Dir-4.11_a +MISRAC2012-Dir-4.11_b*/
    return  ( QLIB_ABS( x - ma ) < QLIB_ABS( x - mb ) ) ? ta : tb;
 8004342:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004344:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004346:	f7fc fc13 	bl	8000b70 <__aeabi_fsub>
 800434a:	4603      	mov	r3, r0
 800434c:	4618      	mov	r0, r3
 800434e:	f7fd ffe5 	bl	800231c <qFFMath_Abs>
 8004352:	4604      	mov	r4, r0
 8004354:	6a39      	ldr	r1, [r7, #32]
 8004356:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004358:	f7fc fc0a 	bl	8000b70 <__aeabi_fsub>
 800435c:	4603      	mov	r3, r0
 800435e:	4618      	mov	r0, r3
 8004360:	f7fd ffdc 	bl	800231c <qFFMath_Abs>
 8004364:	4603      	mov	r3, r0
 8004366:	4619      	mov	r1, r3
 8004368:	4620      	mov	r0, r4
 800436a:	f7fc fea9 	bl	80010c0 <__aeabi_fcmplt>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <qFIS_TZMF+0xfe>
 8004374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004376:	e000      	b.n	800437a <qFIS_TZMF+0x100>
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800437a:	4618      	mov	r0, r3
 800437c:	3744      	adds	r7, #68	; 0x44
 800437e:	46bd      	mov	sp, r7
 8004380:	bd90      	pop	{r4, r7, pc}

08004382 <qFIS_PiMF>:
/*============================================================================*/
static float qFIS_PiMF( const qFIS_IO_Base_t * const in,
                        const float *p,
                        const size_t n )
{
 8004382:	b590      	push	{r4, r7, lr}
 8004384:	b085      	sub	sp, #20
 8004386:	af00      	add	r7, sp, #0
 8004388:	60f8      	str	r0, [r7, #12]
 800438a:	60b9      	str	r1, [r7, #8]
 800438c:	607a      	str	r2, [r7, #4]
    return QLIB_ABS( qFIS_SMF( in , p, n )*qFIS_ZMF( in , &p[ 2 ], n ) );
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	68b9      	ldr	r1, [r7, #8]
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f7ff fcf5 	bl	8003d82 <qFIS_SMF>
 8004398:	4604      	mov	r4, r0
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	3308      	adds	r3, #8
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	4619      	mov	r1, r3
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f7ff fe12 	bl	8003fcc <qFIS_ZMF>
 80043a8:	4603      	mov	r3, r0
 80043aa:	4619      	mov	r1, r3
 80043ac:	4620      	mov	r0, r4
 80043ae:	f7fc fce9 	bl	8000d84 <__aeabi_fmul>
 80043b2:	4603      	mov	r3, r0
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fd ffb1 	bl	800231c <qFFMath_Abs>
 80043ba:	4603      	mov	r3, r0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd90      	pop	{r4, r7, pc}

080043c4 <qFIS_SingletonMF>:
/*============================================================================*/
static float qFIS_SingletonMF( const qFIS_IO_Base_t * const in,
                               const float *p,
                               const size_t n )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	617b      	str	r3, [r7, #20]
    (void)n;

    return ( qFMathEx_Equal( x, p[ 0 ] ) ) ? 1.0f : 0.0f;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4619      	mov	r1, r3
 80043dc:	6978      	ldr	r0, [r7, #20]
 80043de:	f000 faf2 	bl	80049c6 <qFMathEx_Equal>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <qFIS_SingletonMF+0x2a>
 80043e8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80043ec:	e001      	b.n	80043f2 <qFIS_SingletonMF+0x2e>
 80043ee:	f04f 0300 	mov.w	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <qFIS_ConcaveMF>:
/*============================================================================*/
static float qFIS_ConcaveMF( const qFIS_IO_Base_t * const in,
                             const float *p,
                             const size_t n )
{
 80043fa:	b590      	push	{r4, r7, lr}
 80043fc:	b089      	sub	sp, #36	; 0x24
 80043fe:	af00      	add	r7, sp, #0
 8004400:	60f8      	str	r0, [r7, #12]
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	61bb      	str	r3, [r7, #24]
    float i, e, y;
    (void)n;

    i = p[ 0 ];
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	617b      	str	r3, [r7, #20]
    e = p[ 1 ];
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	613b      	str	r3, [r7, #16]
    if ( ( i <= e ) && ( x < e ) ) {
 8004418:	6939      	ldr	r1, [r7, #16]
 800441a:	6978      	ldr	r0, [r7, #20]
 800441c:	f7fc fe5a 	bl	80010d4 <__aeabi_fcmple>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d023      	beq.n	800446e <qFIS_ConcaveMF+0x74>
 8004426:	6939      	ldr	r1, [r7, #16]
 8004428:	69b8      	ldr	r0, [r7, #24]
 800442a:	f7fc fe49 	bl	80010c0 <__aeabi_fcmplt>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d01c      	beq.n	800446e <qFIS_ConcaveMF+0x74>
        y = ( e - i )/( ( 2.0f*e ) - i -x );
 8004434:	6979      	ldr	r1, [r7, #20]
 8004436:	6938      	ldr	r0, [r7, #16]
 8004438:	f7fc fb9a 	bl	8000b70 <__aeabi_fsub>
 800443c:	4603      	mov	r3, r0
 800443e:	461c      	mov	r4, r3
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	4619      	mov	r1, r3
 8004444:	4618      	mov	r0, r3
 8004446:	f7fc fb95 	bl	8000b74 <__addsf3>
 800444a:	4603      	mov	r3, r0
 800444c:	6979      	ldr	r1, [r7, #20]
 800444e:	4618      	mov	r0, r3
 8004450:	f7fc fb8e 	bl	8000b70 <__aeabi_fsub>
 8004454:	4603      	mov	r3, r0
 8004456:	69b9      	ldr	r1, [r7, #24]
 8004458:	4618      	mov	r0, r3
 800445a:	f7fc fb89 	bl	8000b70 <__aeabi_fsub>
 800445e:	4603      	mov	r3, r0
 8004460:	4619      	mov	r1, r3
 8004462:	4620      	mov	r0, r4
 8004464:	f7fc fd42 	bl	8000eec <__aeabi_fdiv>
 8004468:	4603      	mov	r3, r0
 800446a:	61fb      	str	r3, [r7, #28]
 800446c:	e02d      	b.n	80044ca <qFIS_ConcaveMF+0xd0>
    }
    else if ( ( i > e ) && ( x > e ) ) {
 800446e:	6939      	ldr	r1, [r7, #16]
 8004470:	6978      	ldr	r0, [r7, #20]
 8004472:	f7fc fe43 	bl	80010fc <__aeabi_fcmpgt>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d023      	beq.n	80044c4 <qFIS_ConcaveMF+0xca>
 800447c:	6939      	ldr	r1, [r7, #16]
 800447e:	69b8      	ldr	r0, [r7, #24]
 8004480:	f7fc fe3c 	bl	80010fc <__aeabi_fcmpgt>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d01c      	beq.n	80044c4 <qFIS_ConcaveMF+0xca>
        y = ( i - e )/( -( 2.0f*e ) + i +x );
 800448a:	6939      	ldr	r1, [r7, #16]
 800448c:	6978      	ldr	r0, [r7, #20]
 800448e:	f7fc fb6f 	bl	8000b70 <__aeabi_fsub>
 8004492:	4603      	mov	r3, r0
 8004494:	461c      	mov	r4, r3
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	4619      	mov	r1, r3
 800449a:	4618      	mov	r0, r3
 800449c:	f7fc fb6a 	bl	8000b74 <__addsf3>
 80044a0:	4603      	mov	r3, r0
 80044a2:	4619      	mov	r1, r3
 80044a4:	6978      	ldr	r0, [r7, #20]
 80044a6:	f7fc fb63 	bl	8000b70 <__aeabi_fsub>
 80044aa:	4603      	mov	r3, r0
 80044ac:	69b9      	ldr	r1, [r7, #24]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fc fb60 	bl	8000b74 <__addsf3>
 80044b4:	4603      	mov	r3, r0
 80044b6:	4619      	mov	r1, r3
 80044b8:	4620      	mov	r0, r4
 80044ba:	f7fc fd17 	bl	8000eec <__aeabi_fdiv>
 80044be:	4603      	mov	r3, r0
 80044c0:	61fb      	str	r3, [r7, #28]
 80044c2:	e002      	b.n	80044ca <qFIS_ConcaveMF+0xd0>
    }
    else {
        y = 1.0f;
 80044c4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80044c8:	61fb      	str	r3, [r7, #28]
    }

    return y;
 80044ca:	69fb      	ldr	r3, [r7, #28]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3724      	adds	r7, #36	; 0x24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd90      	pop	{r4, r7, pc}

080044d4 <qFIS_TConcaveMF>:
/*============================================================================*/
static float qFIS_TConcaveMF( const qFIS_IO_Base_t * const in,
                              const float *p,
                              const size_t n )
{
 80044d4:	b590      	push	{r4, r7, lr}
 80044d6:	b087      	sub	sp, #28
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
    float i, e;

    i = p[ 0 ];
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	617b      	str	r3, [r7, #20]
    e = p[ 1 ];
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	613b      	str	r3, [r7, #16]

    return ( ( i - e )/qFIS_ConcaveMF( in, p, n ) ) + ( 2.0f*e ) - i;
 80044ec:	6939      	ldr	r1, [r7, #16]
 80044ee:	6978      	ldr	r0, [r7, #20]
 80044f0:	f7fc fb3e 	bl	8000b70 <__aeabi_fsub>
 80044f4:	4603      	mov	r3, r0
 80044f6:	461c      	mov	r4, r3
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	68b9      	ldr	r1, [r7, #8]
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f7ff ff7c 	bl	80043fa <qFIS_ConcaveMF>
 8004502:	4603      	mov	r3, r0
 8004504:	4619      	mov	r1, r3
 8004506:	4620      	mov	r0, r4
 8004508:	f7fc fcf0 	bl	8000eec <__aeabi_fdiv>
 800450c:	4603      	mov	r3, r0
 800450e:	461c      	mov	r4, r3
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	4619      	mov	r1, r3
 8004514:	4618      	mov	r0, r3
 8004516:	f7fc fb2d 	bl	8000b74 <__addsf3>
 800451a:	4603      	mov	r3, r0
 800451c:	4619      	mov	r1, r3
 800451e:	4620      	mov	r0, r4
 8004520:	f7fc fb28 	bl	8000b74 <__addsf3>
 8004524:	4603      	mov	r3, r0
 8004526:	6979      	ldr	r1, [r7, #20]
 8004528:	4618      	mov	r0, r3
 800452a:	f7fc fb21 	bl	8000b70 <__aeabi_fsub>
 800452e:	4603      	mov	r3, r0
}
 8004530:	4618      	mov	r0, r3
 8004532:	371c      	adds	r7, #28
 8004534:	46bd      	mov	sp, r7
 8004536:	bd90      	pop	{r4, r7, pc}

08004538 <qFIS_SpikeMF>:
/*============================================================================*/
static float qFIS_SpikeMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	61fb      	str	r3, [r7, #28]
    float w, c;
    (void)n;

    w = p[ 0 ];
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	61bb      	str	r3, [r7, #24]
    c = p[ 1 ];
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	617b      	str	r3, [r7, #20]

    return QLIB_EXP( -QLIB_ABS( 10.0f*( x - c )/w ) );
 8004556:	6979      	ldr	r1, [r7, #20]
 8004558:	69f8      	ldr	r0, [r7, #28]
 800455a:	f7fc fb09 	bl	8000b70 <__aeabi_fsub>
 800455e:	4603      	mov	r3, r0
 8004560:	490b      	ldr	r1, [pc, #44]	; (8004590 <qFIS_SpikeMF+0x58>)
 8004562:	4618      	mov	r0, r3
 8004564:	f7fc fc0e 	bl	8000d84 <__aeabi_fmul>
 8004568:	4603      	mov	r3, r0
 800456a:	69b9      	ldr	r1, [r7, #24]
 800456c:	4618      	mov	r0, r3
 800456e:	f7fc fcbd 	bl	8000eec <__aeabi_fdiv>
 8004572:	4603      	mov	r3, r0
 8004574:	4618      	mov	r0, r3
 8004576:	f7fd fed1 	bl	800231c <qFFMath_Abs>
 800457a:	4603      	mov	r3, r0
 800457c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004580:	4618      	mov	r0, r3
 8004582:	f7fe f855 	bl	8002630 <qFFMath_Exp>
 8004586:	4603      	mov	r3, r0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3720      	adds	r7, #32
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	41200000 	.word	0x41200000

08004594 <qFIS_TLinSMF>:
/*============================================================================*/
static float qFIS_TLinSMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	61fb      	str	r3, [r7, #28]
    float a, b;
    (void)n;

    a = p[ 0 ];
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	617b      	str	r3, [r7, #20]

    return ( ( b - a )*x ) + a;
 80045b2:	69b9      	ldr	r1, [r7, #24]
 80045b4:	6978      	ldr	r0, [r7, #20]
 80045b6:	f7fc fadb 	bl	8000b70 <__aeabi_fsub>
 80045ba:	4603      	mov	r3, r0
 80045bc:	69f9      	ldr	r1, [r7, #28]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fc fbe0 	bl	8000d84 <__aeabi_fmul>
 80045c4:	4603      	mov	r3, r0
 80045c6:	69b9      	ldr	r1, [r7, #24]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7fc fad3 	bl	8000b74 <__addsf3>
 80045ce:	4603      	mov	r3, r0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3720      	adds	r7, #32
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <qFIS_TLinZMF>:
/*============================================================================*/
static float qFIS_TLinZMF( const qFIS_IO_Base_t * const in,
                           const float *p,
                           const size_t n )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b088      	sub	sp, #32
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	61fb      	str	r3, [r7, #28]
    float a, b;
    (void)n;

    a = p[ 0 ];
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	61bb      	str	r3, [r7, #24]
    b = p[ 1 ];
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	617b      	str	r3, [r7, #20]

    return + a - ( ( a - b )*x );
 80045f6:	6979      	ldr	r1, [r7, #20]
 80045f8:	69b8      	ldr	r0, [r7, #24]
 80045fa:	f7fc fab9 	bl	8000b70 <__aeabi_fsub>
 80045fe:	4603      	mov	r3, r0
 8004600:	69f9      	ldr	r1, [r7, #28]
 8004602:	4618      	mov	r0, r3
 8004604:	f7fc fbbe 	bl	8000d84 <__aeabi_fmul>
 8004608:	4603      	mov	r3, r0
 800460a:	4619      	mov	r1, r3
 800460c:	69b8      	ldr	r0, [r7, #24]
 800460e:	f7fc faaf 	bl	8000b70 <__aeabi_fsub>
 8004612:	4603      	mov	r3, r0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3720      	adds	r7, #32
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <qFIS_RectangleMF>:
/*============================================================================*/
static float qFIS_RectangleMF( const qFIS_IO_Base_t * const in,
                               const float *p,
                               const size_t n )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b088      	sub	sp, #32
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	61fb      	str	r3, [r7, #28]
    float s, e;
    (void)n;

    s = p[ 0 ];
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	61bb      	str	r3, [r7, #24]
    e = p[ 1 ];
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	617b      	str	r3, [r7, #20]

    return ( ( x >= s ) && ( x <= e ) ) ? 1.0f : 0.0f;
 800463a:	69b9      	ldr	r1, [r7, #24]
 800463c:	69f8      	ldr	r0, [r7, #28]
 800463e:	f7fc fd53 	bl	80010e8 <__aeabi_fcmpge>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d009      	beq.n	800465c <qFIS_RectangleMF+0x40>
 8004648:	6979      	ldr	r1, [r7, #20]
 800464a:	69f8      	ldr	r0, [r7, #28]
 800464c:	f7fc fd42 	bl	80010d4 <__aeabi_fcmple>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d002      	beq.n	800465c <qFIS_RectangleMF+0x40>
 8004656:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800465a:	e001      	b.n	8004660 <qFIS_RectangleMF+0x44>
 800465c:	f04f 0300 	mov.w	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3720      	adds	r7, #32
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <qFIS_CosineMF>:
/*============================================================================*/
static float qFIS_CosineMF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 8004668:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800466c:	b08a      	sub	sp, #40	; 0x28
 800466e:	af00      	add	r7, sp, #0
 8004670:	60f8      	str	r0, [r7, #12]
 8004672:	60b9      	str	r1, [r7, #8]
 8004674:	607a      	str	r2, [r7, #4]
    float x = in[ 0 ].value;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	623b      	str	r3, [r7, #32]
    float c, w, y;
    const float pi = 3.14159265358979323846f;
 800467c:	4b35      	ldr	r3, [pc, #212]	; (8004754 <qFIS_CosineMF+0xec>)
 800467e:	61fb      	str	r3, [r7, #28]
    (void)n;

    c = p[ 0 ];
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	61bb      	str	r3, [r7, #24]
    w = p[ 1 ];
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	617b      	str	r3, [r7, #20]
    if ( ( x < ( c - ( 0.5*w ) ) ) || ( x > ( c + ( 0.5f*w ) ) ) ) {
 800468c:	6a38      	ldr	r0, [r7, #32]
 800468e:	f7fb fecb 	bl	8000428 <__aeabi_f2d>
 8004692:	4604      	mov	r4, r0
 8004694:	460d      	mov	r5, r1
 8004696:	69b8      	ldr	r0, [r7, #24]
 8004698:	f7fb fec6 	bl	8000428 <__aeabi_f2d>
 800469c:	4680      	mov	r8, r0
 800469e:	4689      	mov	r9, r1
 80046a0:	6978      	ldr	r0, [r7, #20]
 80046a2:	f7fb fec1 	bl	8000428 <__aeabi_f2d>
 80046a6:	f04f 0200 	mov.w	r2, #0
 80046aa:	4b2b      	ldr	r3, [pc, #172]	; (8004758 <qFIS_CosineMF+0xf0>)
 80046ac:	f7fb ff14 	bl	80004d8 <__aeabi_dmul>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4640      	mov	r0, r8
 80046b6:	4649      	mov	r1, r9
 80046b8:	f7fb fd56 	bl	8000168 <__aeabi_dsub>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4620      	mov	r0, r4
 80046c2:	4629      	mov	r1, r5
 80046c4:	f7fc f97a 	bl	80009bc <__aeabi_dcmplt>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d111      	bne.n	80046f2 <qFIS_CosineMF+0x8a>
 80046ce:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80046d2:	6978      	ldr	r0, [r7, #20]
 80046d4:	f7fc fb56 	bl	8000d84 <__aeabi_fmul>
 80046d8:	4603      	mov	r3, r0
 80046da:	69b9      	ldr	r1, [r7, #24]
 80046dc:	4618      	mov	r0, r3
 80046de:	f7fc fa49 	bl	8000b74 <__addsf3>
 80046e2:	4603      	mov	r3, r0
 80046e4:	4619      	mov	r1, r3
 80046e6:	6a38      	ldr	r0, [r7, #32]
 80046e8:	f7fc fd08 	bl	80010fc <__aeabi_fcmpgt>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <qFIS_CosineMF+0x92>
        y = 0.0f;
 80046f2:	f04f 0300 	mov.w	r3, #0
 80046f6:	627b      	str	r3, [r7, #36]	; 0x24
 80046f8:	e026      	b.n	8004748 <qFIS_CosineMF+0xe0>
    }
    else {
        y = 0.5f*( 1.0f + QLIB_COS( 2.0f/w*pi*( x - c) ) );
 80046fa:	6979      	ldr	r1, [r7, #20]
 80046fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004700:	f7fc fbf4 	bl	8000eec <__aeabi_fdiv>
 8004704:	4603      	mov	r3, r0
 8004706:	69f9      	ldr	r1, [r7, #28]
 8004708:	4618      	mov	r0, r3
 800470a:	f7fc fb3b 	bl	8000d84 <__aeabi_fmul>
 800470e:	4603      	mov	r3, r0
 8004710:	461c      	mov	r4, r3
 8004712:	69b9      	ldr	r1, [r7, #24]
 8004714:	6a38      	ldr	r0, [r7, #32]
 8004716:	f7fc fa2b 	bl	8000b70 <__aeabi_fsub>
 800471a:	4603      	mov	r3, r0
 800471c:	4619      	mov	r1, r3
 800471e:	4620      	mov	r0, r4
 8004720:	f7fc fb30 	bl	8000d84 <__aeabi_fmul>
 8004724:	4603      	mov	r3, r0
 8004726:	4618      	mov	r0, r3
 8004728:	f7fd fe9e 	bl	8002468 <qFFMath_Cos>
 800472c:	4603      	mov	r3, r0
 800472e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8004732:	4618      	mov	r0, r3
 8004734:	f7fc fa1e 	bl	8000b74 <__addsf3>
 8004738:	4603      	mov	r3, r0
 800473a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800473e:	4618      	mov	r0, r3
 8004740:	f7fc fb20 	bl	8000d84 <__aeabi_fmul>
 8004744:	4603      	mov	r3, r0
 8004746:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return y;
 8004748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800474a:	4618      	mov	r0, r3
 800474c:	3728      	adds	r7, #40	; 0x28
 800474e:	46bd      	mov	sp, r7
 8004750:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004754:	40490fdb 	.word	0x40490fdb
 8004758:	3fe00000 	.word	0x3fe00000

0800475c <qFIS_ConstantMF>:
/*============================================================================*/
static float qFIS_ConstantMF( const qFIS_IO_Base_t * const in,
                              const float *p,
                              const size_t n )
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
    (void)in;
    (void)n;
    return p[ 0 ];
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	681b      	ldr	r3, [r3, #0]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	bc80      	pop	{r7}
 8004774:	4770      	bx	lr

08004776 <qFIS_LinearMF>:
/*============================================================================*/
static float qFIS_LinearMF( const qFIS_IO_Base_t * const in,
                            const float *p,
                            const size_t n )
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b086      	sub	sp, #24
 800477a:	af00      	add	r7, sp, #0
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	60b9      	str	r1, [r7, #8]
 8004780:	607a      	str	r2, [r7, #4]
    float px = 0.0f;
 8004782:	f04f 0300 	mov.w	r3, #0
 8004786:	617b      	str	r3, [r7, #20]
    size_t i;

    for ( i = 0u ; i < n ; ++i ) {
 8004788:	2300      	movs	r3, #0
 800478a:	613b      	str	r3, [r7, #16]
 800478c:	e01a      	b.n	80047c4 <qFIS_LinearMF+0x4e>
        px += in[ i ].value*p[ i ];
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	4613      	mov	r3, r2
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	4413      	add	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	461a      	mov	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	4413      	add	r3, r2
 800479e:	6898      	ldr	r0, [r3, #8]
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	4413      	add	r3, r2
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4619      	mov	r1, r3
 80047ac:	f7fc faea 	bl	8000d84 <__aeabi_fmul>
 80047b0:	4603      	mov	r3, r0
 80047b2:	4619      	mov	r1, r3
 80047b4:	6978      	ldr	r0, [r7, #20]
 80047b6:	f7fc f9dd 	bl	8000b74 <__addsf3>
 80047ba:	4603      	mov	r3, r0
 80047bc:	617b      	str	r3, [r7, #20]
    for ( i = 0u ; i < n ; ++i ) {
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	3301      	adds	r3, #1
 80047c2:	613b      	str	r3, [r7, #16]
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d3e0      	bcc.n	800478e <qFIS_LinearMF+0x18>
    }
    px += p[ i ];
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	4413      	add	r3, r2
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4619      	mov	r1, r3
 80047d8:	6978      	ldr	r0, [r7, #20]
 80047da:	f7fc f9cb 	bl	8000b74 <__addsf3>
 80047de:	4603      	mov	r3, r0
 80047e0:	617b      	str	r3, [r7, #20]

    return px;
 80047e2:	697b      	ldr	r3, [r7, #20]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3718      	adds	r7, #24
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <qFIS_Min>:
/*============================================================================*/
static float qFIS_Min( const float a,
                       const float b )
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( ( a < b ) ? a : b, 0.0f, 1.0f );
 80047f6:	6839      	ldr	r1, [r7, #0]
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7fc fc61 	bl	80010c0 <__aeabi_fcmplt>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <qFIS_Min+0x1c>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	e000      	b.n	800480a <qFIS_Min+0x1e>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800480e:	f04f 0100 	mov.w	r1, #0
 8004812:	4618      	mov	r0, r3
 8004814:	f000 f86d 	bl	80048f2 <qFIS_Bound>
 8004818:	4603      	mov	r3, r0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <qFIS_Max>:
/*============================================================================*/
static float qFIS_Max( const float a,
                       const float b )
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b082      	sub	sp, #8
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( ( a > b ) ? a : b, 0.0f, 1.0f );
 800482c:	6839      	ldr	r1, [r7, #0]
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7fc fc64 	bl	80010fc <__aeabi_fcmpgt>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <qFIS_Max+0x1c>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	e000      	b.n	8004840 <qFIS_Max+0x1e>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004844:	f04f 0100 	mov.w	r1, #0
 8004848:	4618      	mov	r0, r3
 800484a:	f000 f852 	bl	80048f2 <qFIS_Bound>
 800484e:	4603      	mov	r3, r0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <qFIS_Prod>:
/*============================================================================*/
static float qFIS_Prod( const float a,
                        const float b )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a*b, 0.0f, 1.0f );
 8004862:	6839      	ldr	r1, [r7, #0]
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7fc fa8d 	bl	8000d84 <__aeabi_fmul>
 800486a:	4603      	mov	r3, r0
 800486c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004870:	f04f 0100 	mov.w	r1, #0
 8004874:	4618      	mov	r0, r3
 8004876:	f000 f83c 	bl	80048f2 <qFIS_Bound>
 800487a:	4603      	mov	r3, r0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <qFIS_ProbOR>:
/*============================================================================*/
static float qFIS_ProbOR( const float a,
                          const float b )
{
 8004884:	b590      	push	{r4, r7, lr}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a + b - ( a*b ), 0.0f, 1.0f );
 800488e:	6839      	ldr	r1, [r7, #0]
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7fc f96f 	bl	8000b74 <__addsf3>
 8004896:	4603      	mov	r3, r0
 8004898:	461c      	mov	r4, r3
 800489a:	6839      	ldr	r1, [r7, #0]
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7fc fa71 	bl	8000d84 <__aeabi_fmul>
 80048a2:	4603      	mov	r3, r0
 80048a4:	4619      	mov	r1, r3
 80048a6:	4620      	mov	r0, r4
 80048a8:	f7fc f962 	bl	8000b70 <__aeabi_fsub>
 80048ac:	4603      	mov	r3, r0
 80048ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80048b2:	f04f 0100 	mov.w	r1, #0
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 f81b 	bl	80048f2 <qFIS_Bound>
 80048bc:	4603      	mov	r3, r0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd90      	pop	{r4, r7, pc}

080048c6 <qFIS_Sum>:
/*============================================================================*/
static float qFIS_Sum( const float a,
                       const float b )
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	6039      	str	r1, [r7, #0]
    return qFIS_Bound( a + b, 0.0f, 1.0f );
 80048d0:	6839      	ldr	r1, [r7, #0]
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7fc f94e 	bl	8000b74 <__addsf3>
 80048d8:	4603      	mov	r3, r0
 80048da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80048de:	f04f 0100 	mov.w	r1, #0
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 f805 	bl	80048f2 <qFIS_Bound>
 80048e8:	4603      	mov	r3, r0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <qFIS_Bound>:
/*============================================================================*/
static float qFIS_Bound( float y,
                         const float yMin,
                         const float yMax )
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b084      	sub	sp, #16
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	60f8      	str	r0, [r7, #12]
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	607a      	str	r2, [r7, #4]
    (void)qFMathEx_InRangeCoerce( &y, yMin, yMax );
 80048fe:	f107 030c 	add.w	r3, r7, #12
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	68b9      	ldr	r1, [r7, #8]
 8004906:	4618      	mov	r0, r3
 8004908:	f000 f805 	bl	8004916 <qFMathEx_InRangeCoerce>

    return y;
 800490c:	68fb      	ldr	r3, [r7, #12]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <qFMathEx_InRangeCoerce>:
}
/*============================================================================*/
bool qFMathEx_InRangeCoerce( float * const x,
                             const float lowerL,
                             const float upperL )
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b086      	sub	sp, #24
 800491a:	af00      	add	r7, sp, #0
 800491c:	60f8      	str	r0, [r7, #12]
 800491e:	60b9      	str	r1, [r7, #8]
 8004920:	607a      	str	r2, [r7, #4]
    bool retVal = false;
 8004922:	2300      	movs	r3, #0
 8004924:	75fb      	strb	r3, [r7, #23]

    if ( 1 == (int)QLIB_ISNAN( x[ 0 ] ) ) {
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4618      	mov	r0, r3
 800492c:	f7fd fce5 	bl	80022fa <qFFMath_IsNaN>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <qFMathEx_InRangeCoerce+0x28>
        x[ 0 ] = lowerL;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	601a      	str	r2, [r3, #0]
 800493c:	e01b      	b.n	8004976 <qFMathEx_InRangeCoerce+0x60>
    }
    else {
        if ( x[ 0 ] < lowerL ) {
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4619      	mov	r1, r3
 8004944:	68b8      	ldr	r0, [r7, #8]
 8004946:	f7fc fbd9 	bl	80010fc <__aeabi_fcmpgt>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <qFMathEx_InRangeCoerce+0x42>
            x[ 0 ] = lowerL;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	e00e      	b.n	8004976 <qFMathEx_InRangeCoerce+0x60>
        }
        else if ( x[ 0 ] > upperL ) {
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4619      	mov	r1, r3
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7fc fbae 	bl	80010c0 <__aeabi_fcmplt>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <qFMathEx_InRangeCoerce+0x5c>
            x[ 0 ] = upperL;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	e001      	b.n	8004976 <qFMathEx_InRangeCoerce+0x60>
        }
        else {
            retVal = true;
 8004972:	2301      	movs	r3, #1
 8004974:	75fb      	strb	r3, [r7, #23]
        }
    }

    return retVal;
 8004976:	7dfb      	ldrb	r3, [r7, #23]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <qFMathEx_AlmostEqual>:
/*============================================================================*/
bool qFMathEx_AlmostEqual( const float a,
                           const float b,
                           const float tol )
{
 8004980:	b5b0      	push	{r4, r5, r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	607a      	str	r2, [r7, #4]
    return ( QLIB_ABS( a - b ) <= QLIB_ABS( tol ) );
 800498c:	68b9      	ldr	r1, [r7, #8]
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f7fc f8ee 	bl	8000b70 <__aeabi_fsub>
 8004994:	4603      	mov	r3, r0
 8004996:	4618      	mov	r0, r3
 8004998:	f7fd fcc0 	bl	800231c <qFFMath_Abs>
 800499c:	4604      	mov	r4, r0
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7fd fcbc 	bl	800231c <qFFMath_Abs>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2201      	movs	r2, #1
 80049a8:	4615      	mov	r5, r2
 80049aa:	4619      	mov	r1, r3
 80049ac:	4620      	mov	r0, r4
 80049ae:	f7fc fb91 	bl	80010d4 <__aeabi_fcmple>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <qFMathEx_AlmostEqual+0x3c>
 80049b8:	2300      	movs	r3, #0
 80049ba:	461d      	mov	r5, r3
 80049bc:	b2eb      	uxtb	r3, r5
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bdb0      	pop	{r4, r5, r7, pc}

080049c6 <qFMathEx_Equal>:
/*============================================================================*/
bool qFMathEx_Equal( const float a,
                     const float b )
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b082      	sub	sp, #8
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	6039      	str	r1, [r7, #0]
    return qFMathEx_AlmostEqual( a, b, FLT_MIN );
 80049d0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80049d4:	6839      	ldr	r1, [r7, #0]
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7ff ffd2 	bl	8004980 <qFMathEx_AlmostEqual>
 80049dc:	4603      	mov	r3, r0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
	...

080049e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80049ee:	4b0e      	ldr	r3, [pc, #56]	; (8004a28 <HAL_MspInit+0x40>)
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	4a0d      	ldr	r2, [pc, #52]	; (8004a28 <HAL_MspInit+0x40>)
 80049f4:	f043 0301 	orr.w	r3, r3, #1
 80049f8:	6193      	str	r3, [r2, #24]
 80049fa:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <HAL_MspInit+0x40>)
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	607b      	str	r3, [r7, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a06:	4b08      	ldr	r3, [pc, #32]	; (8004a28 <HAL_MspInit+0x40>)
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	4a07      	ldr	r2, [pc, #28]	; (8004a28 <HAL_MspInit+0x40>)
 8004a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a10:	61d3      	str	r3, [r2, #28]
 8004a12:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <HAL_MspInit+0x40>)
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1a:	603b      	str	r3, [r7, #0]
 8004a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr
 8004a28:	40021000 	.word	0x40021000

08004a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a30:	e7fe      	b.n	8004a30 <NMI_Handler+0x4>

08004a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a32:	b480      	push	{r7}
 8004a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a36:	e7fe      	b.n	8004a36 <HardFault_Handler+0x4>

08004a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a3c:	e7fe      	b.n	8004a3c <MemManage_Handler+0x4>

08004a3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a42:	e7fe      	b.n	8004a42 <BusFault_Handler+0x4>

08004a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a48:	e7fe      	b.n	8004a48 <UsageFault_Handler+0x4>

08004a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a4e:	bf00      	nop
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr

08004a56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a56:	b480      	push	{r7}
 8004a58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a5a:	bf00      	nop
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr

08004a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a62:	b480      	push	{r7}
 8004a64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a66:	bf00      	nop
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bc80      	pop	{r7}
 8004a6c:	4770      	bx	lr

08004a6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a72:	f000 fb1b 	bl	80050ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a76:	bf00      	nop
 8004a78:	bd80      	pop	{r7, pc}
	...

08004a7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004a80:	4802      	ldr	r0, [pc, #8]	; (8004a8c <TIM2_IRQHandler+0x10>)
 8004a82:	f002 fb77 	bl	8007174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004a86:	bf00      	nop
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	200005e4 	.word	0x200005e4

08004a90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  return 1;
 8004a94:	2301      	movs	r3, #1
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bc80      	pop	{r7}
 8004a9c:	4770      	bx	lr

08004a9e <_kill>:

int _kill(int pid, int sig)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b082      	sub	sp, #8
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004aa8:	f003 fa02 	bl	8007eb0 <__errno>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2216      	movs	r2, #22
 8004ab0:	601a      	str	r2, [r3, #0]
  return -1;
 8004ab2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3708      	adds	r7, #8
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <_exit>:

void _exit (int status)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b082      	sub	sp, #8
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004ac6:	f04f 31ff 	mov.w	r1, #4294967295
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff ffe7 	bl	8004a9e <_kill>
  while (1) {}    /* Make sure we hang here */
 8004ad0:	e7fe      	b.n	8004ad0 <_exit+0x12>

08004ad2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b086      	sub	sp, #24
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	60f8      	str	r0, [r7, #12]
 8004ada:	60b9      	str	r1, [r7, #8]
 8004adc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ade:	2300      	movs	r3, #0
 8004ae0:	617b      	str	r3, [r7, #20]
 8004ae2:	e00a      	b.n	8004afa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004ae4:	f3af 8000 	nop.w
 8004ae8:	4601      	mov	r1, r0
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	1c5a      	adds	r2, r3, #1
 8004aee:	60ba      	str	r2, [r7, #8]
 8004af0:	b2ca      	uxtb	r2, r1
 8004af2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	3301      	adds	r3, #1
 8004af8:	617b      	str	r3, [r7, #20]
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	dbf0      	blt.n	8004ae4 <_read+0x12>
  }

  return len;
 8004b02:	687b      	ldr	r3, [r7, #4]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b18:	2300      	movs	r3, #0
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	e009      	b.n	8004b32 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	60ba      	str	r2, [r7, #8]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	617b      	str	r3, [r7, #20]
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	dbf1      	blt.n	8004b1e <_write+0x12>
  }
  return len;
 8004b3a:	687b      	ldr	r3, [r7, #4]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <_close>:

int _close(int file)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004b4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bc80      	pop	{r7}
 8004b58:	4770      	bx	lr

08004b5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
 8004b62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b6a:	605a      	str	r2, [r3, #4]
  return 0;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bc80      	pop	{r7}
 8004b76:	4770      	bx	lr

08004b78 <_isatty>:

int _isatty(int file)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004b80:	2301      	movs	r3, #1
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr

08004b8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bc80      	pop	{r7}
 8004ba2:	4770      	bx	lr

08004ba4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004bac:	4a14      	ldr	r2, [pc, #80]	; (8004c00 <_sbrk+0x5c>)
 8004bae:	4b15      	ldr	r3, [pc, #84]	; (8004c04 <_sbrk+0x60>)
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004bb8:	4b13      	ldr	r3, [pc, #76]	; (8004c08 <_sbrk+0x64>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d102      	bne.n	8004bc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004bc0:	4b11      	ldr	r3, [pc, #68]	; (8004c08 <_sbrk+0x64>)
 8004bc2:	4a12      	ldr	r2, [pc, #72]	; (8004c0c <_sbrk+0x68>)
 8004bc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bc6:	4b10      	ldr	r3, [pc, #64]	; (8004c08 <_sbrk+0x64>)
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4413      	add	r3, r2
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d207      	bcs.n	8004be4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004bd4:	f003 f96c 	bl	8007eb0 <__errno>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	220c      	movs	r2, #12
 8004bdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004bde:	f04f 33ff 	mov.w	r3, #4294967295
 8004be2:	e009      	b.n	8004bf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004be4:	4b08      	ldr	r3, [pc, #32]	; (8004c08 <_sbrk+0x64>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004bea:	4b07      	ldr	r3, [pc, #28]	; (8004c08 <_sbrk+0x64>)
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	4a05      	ldr	r2, [pc, #20]	; (8004c08 <_sbrk+0x64>)
 8004bf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	20005000 	.word	0x20005000
 8004c04:	00000400 	.word	0x00000400
 8004c08:	200005e0 	.word	0x200005e0
 8004c0c:	200006d0 	.word	0x200006d0

08004c10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c14:	bf00      	nop
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bc80      	pop	{r7}
 8004c1a:	4770      	bx	lr

08004c1c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c22:	f107 0308 	add.w	r3, r7, #8
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	605a      	str	r2, [r3, #4]
 8004c2c:	609a      	str	r2, [r3, #8]
 8004c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c30:	463b      	mov	r3, r7
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004c38:	4b1d      	ldr	r3, [pc, #116]	; (8004cb0 <MX_TIM2_Init+0x94>)
 8004c3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004c3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8004c40:	4b1b      	ldr	r3, [pc, #108]	; (8004cb0 <MX_TIM2_Init+0x94>)
 8004c42:	2263      	movs	r2, #99	; 0x63
 8004c44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c46:	4b1a      	ldr	r3, [pc, #104]	; (8004cb0 <MX_TIM2_Init+0x94>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7199;
 8004c4c:	4b18      	ldr	r3, [pc, #96]	; (8004cb0 <MX_TIM2_Init+0x94>)
 8004c4e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8004c52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c54:	4b16      	ldr	r3, [pc, #88]	; (8004cb0 <MX_TIM2_Init+0x94>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c5a:	4b15      	ldr	r3, [pc, #84]	; (8004cb0 <MX_TIM2_Init+0x94>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004c60:	4813      	ldr	r0, [pc, #76]	; (8004cb0 <MX_TIM2_Init+0x94>)
 8004c62:	f002 f8eb 	bl	8006e3c <HAL_TIM_Base_Init>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8004c6c:	f7fc fe94 	bl	8001998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004c76:	f107 0308 	add.w	r3, r7, #8
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	480c      	ldr	r0, [pc, #48]	; (8004cb0 <MX_TIM2_Init+0x94>)
 8004c7e:	f002 fc3f 	bl	8007500 <HAL_TIM_ConfigClockSource>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d001      	beq.n	8004c8c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004c88:	f7fc fe86 	bl	8001998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c90:	2300      	movs	r3, #0
 8004c92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004c94:	463b      	mov	r3, r7
 8004c96:	4619      	mov	r1, r3
 8004c98:	4805      	ldr	r0, [pc, #20]	; (8004cb0 <MX_TIM2_Init+0x94>)
 8004c9a:	f002 ffbd 	bl	8007c18 <HAL_TIMEx_MasterConfigSynchronization>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d001      	beq.n	8004ca8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8004ca4:	f7fc fe78 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004ca8:	bf00      	nop
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	200005e4 	.word	0x200005e4

08004cb4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08e      	sub	sp, #56	; 0x38
 8004cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	605a      	str	r2, [r3, #4]
 8004cc4:	609a      	str	r2, [r3, #8]
 8004cc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cc8:	f107 0320 	add.w	r3, r7, #32
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004cd2:	1d3b      	adds	r3, r7, #4
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	605a      	str	r2, [r3, #4]
 8004cda:	609a      	str	r2, [r3, #8]
 8004cdc:	60da      	str	r2, [r3, #12]
 8004cde:	611a      	str	r2, [r3, #16]
 8004ce0:	615a      	str	r2, [r3, #20]
 8004ce2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004ce4:	4b3d      	ldr	r3, [pc, #244]	; (8004ddc <MX_TIM3_Init+0x128>)
 8004ce6:	4a3e      	ldr	r2, [pc, #248]	; (8004de0 <MX_TIM3_Init+0x12c>)
 8004ce8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9;
 8004cea:	4b3c      	ldr	r3, [pc, #240]	; (8004ddc <MX_TIM3_Init+0x128>)
 8004cec:	2209      	movs	r2, #9
 8004cee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cf0:	4b3a      	ldr	r3, [pc, #232]	; (8004ddc <MX_TIM3_Init+0x128>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3599;
 8004cf6:	4b39      	ldr	r3, [pc, #228]	; (8004ddc <MX_TIM3_Init+0x128>)
 8004cf8:	f640 620f 	movw	r2, #3599	; 0xe0f
 8004cfc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cfe:	4b37      	ldr	r3, [pc, #220]	; (8004ddc <MX_TIM3_Init+0x128>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d04:	4b35      	ldr	r3, [pc, #212]	; (8004ddc <MX_TIM3_Init+0x128>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004d0a:	4834      	ldr	r0, [pc, #208]	; (8004ddc <MX_TIM3_Init+0x128>)
 8004d0c:	f002 f896 	bl	8006e3c <HAL_TIM_Base_Init>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004d16:	f7fc fe3f 	bl	8001998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004d20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d24:	4619      	mov	r1, r3
 8004d26:	482d      	ldr	r0, [pc, #180]	; (8004ddc <MX_TIM3_Init+0x128>)
 8004d28:	f002 fbea 	bl	8007500 <HAL_TIM_ConfigClockSource>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8004d32:	f7fc fe31 	bl	8001998 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004d36:	4829      	ldr	r0, [pc, #164]	; (8004ddc <MX_TIM3_Init+0x128>)
 8004d38:	f002 f922 	bl	8006f80 <HAL_TIM_PWM_Init>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8004d42:	f7fc fe29 	bl	8001998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d46:	2300      	movs	r3, #0
 8004d48:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004d4e:	f107 0320 	add.w	r3, r7, #32
 8004d52:	4619      	mov	r1, r3
 8004d54:	4821      	ldr	r0, [pc, #132]	; (8004ddc <MX_TIM3_Init+0x128>)
 8004d56:	f002 ff5f 	bl	8007c18 <HAL_TIMEx_MasterConfigSynchronization>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8004d60:	f7fc fe1a 	bl	8001998 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d64:	2360      	movs	r3, #96	; 0x60
 8004d66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d70:	2300      	movs	r3, #0
 8004d72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d74:	1d3b      	adds	r3, r7, #4
 8004d76:	2200      	movs	r2, #0
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4818      	ldr	r0, [pc, #96]	; (8004ddc <MX_TIM3_Init+0x128>)
 8004d7c:	f002 fb02 	bl	8007384 <HAL_TIM_PWM_ConfigChannel>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004d86:	f7fc fe07 	bl	8001998 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004d8a:	1d3b      	adds	r3, r7, #4
 8004d8c:	2204      	movs	r2, #4
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4812      	ldr	r0, [pc, #72]	; (8004ddc <MX_TIM3_Init+0x128>)
 8004d92:	f002 faf7 	bl	8007384 <HAL_TIM_PWM_ConfigChannel>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8004d9c:	f7fc fdfc 	bl	8001998 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004da0:	1d3b      	adds	r3, r7, #4
 8004da2:	2208      	movs	r2, #8
 8004da4:	4619      	mov	r1, r3
 8004da6:	480d      	ldr	r0, [pc, #52]	; (8004ddc <MX_TIM3_Init+0x128>)
 8004da8:	f002 faec 	bl	8007384 <HAL_TIM_PWM_ConfigChannel>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8004db2:	f7fc fdf1 	bl	8001998 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004db6:	1d3b      	adds	r3, r7, #4
 8004db8:	220c      	movs	r2, #12
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4807      	ldr	r0, [pc, #28]	; (8004ddc <MX_TIM3_Init+0x128>)
 8004dbe:	f002 fae1 	bl	8007384 <HAL_TIM_PWM_ConfigChannel>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d001      	beq.n	8004dcc <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8004dc8:	f7fc fde6 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004dcc:	4803      	ldr	r0, [pc, #12]	; (8004ddc <MX_TIM3_Init+0x128>)
 8004dce:	f000 f841 	bl	8004e54 <HAL_TIM_MspPostInit>

}
 8004dd2:	bf00      	nop
 8004dd4:	3738      	adds	r7, #56	; 0x38
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	2000062c 	.word	0x2000062c
 8004de0:	40000400 	.word	0x40000400

08004de4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df4:	d114      	bne.n	8004e20 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004df6:	4b15      	ldr	r3, [pc, #84]	; (8004e4c <HAL_TIM_Base_MspInit+0x68>)
 8004df8:	69db      	ldr	r3, [r3, #28]
 8004dfa:	4a14      	ldr	r2, [pc, #80]	; (8004e4c <HAL_TIM_Base_MspInit+0x68>)
 8004dfc:	f043 0301 	orr.w	r3, r3, #1
 8004e00:	61d3      	str	r3, [r2, #28]
 8004e02:	4b12      	ldr	r3, [pc, #72]	; (8004e4c <HAL_TIM_Base_MspInit+0x68>)
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004e0e:	2200      	movs	r2, #0
 8004e10:	2101      	movs	r1, #1
 8004e12:	201c      	movs	r0, #28
 8004e14:	f000 fa3d 	bl	8005292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004e18:	201c      	movs	r0, #28
 8004e1a:	f000 fa56 	bl	80052ca <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004e1e:	e010      	b.n	8004e42 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a0a      	ldr	r2, [pc, #40]	; (8004e50 <HAL_TIM_Base_MspInit+0x6c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d10b      	bne.n	8004e42 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004e2a:	4b08      	ldr	r3, [pc, #32]	; (8004e4c <HAL_TIM_Base_MspInit+0x68>)
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	4a07      	ldr	r2, [pc, #28]	; (8004e4c <HAL_TIM_Base_MspInit+0x68>)
 8004e30:	f043 0302 	orr.w	r3, r3, #2
 8004e34:	61d3      	str	r3, [r2, #28]
 8004e36:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <HAL_TIM_Base_MspInit+0x68>)
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	60bb      	str	r3, [r7, #8]
 8004e40:	68bb      	ldr	r3, [r7, #8]
}
 8004e42:	bf00      	nop
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40021000 	.word	0x40021000
 8004e50:	40000400 	.word	0x40000400

08004e54 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b088      	sub	sp, #32
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e5c:	f107 0310 	add.w	r3, r7, #16
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	605a      	str	r2, [r3, #4]
 8004e66:	609a      	str	r2, [r3, #8]
 8004e68:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a1b      	ldr	r2, [pc, #108]	; (8004edc <HAL_TIM_MspPostInit+0x88>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d12f      	bne.n	8004ed4 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e74:	4b1a      	ldr	r3, [pc, #104]	; (8004ee0 <HAL_TIM_MspPostInit+0x8c>)
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	4a19      	ldr	r2, [pc, #100]	; (8004ee0 <HAL_TIM_MspPostInit+0x8c>)
 8004e7a:	f043 0304 	orr.w	r3, r3, #4
 8004e7e:	6193      	str	r3, [r2, #24]
 8004e80:	4b17      	ldr	r3, [pc, #92]	; (8004ee0 <HAL_TIM_MspPostInit+0x8c>)
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e8c:	4b14      	ldr	r3, [pc, #80]	; (8004ee0 <HAL_TIM_MspPostInit+0x8c>)
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	4a13      	ldr	r2, [pc, #76]	; (8004ee0 <HAL_TIM_MspPostInit+0x8c>)
 8004e92:	f043 0308 	orr.w	r3, r3, #8
 8004e96:	6193      	str	r3, [r2, #24]
 8004e98:	4b11      	ldr	r3, [pc, #68]	; (8004ee0 <HAL_TIM_MspPostInit+0x8c>)
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	f003 0308 	and.w	r3, r3, #8
 8004ea0:	60bb      	str	r3, [r7, #8]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004ea4:	23c0      	movs	r3, #192	; 0xc0
 8004ea6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eac:	2302      	movs	r3, #2
 8004eae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eb0:	f107 0310 	add.w	r3, r7, #16
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	480b      	ldr	r0, [pc, #44]	; (8004ee4 <HAL_TIM_MspPostInit+0x90>)
 8004eb8:	f000 fa22 	bl	8005300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ec8:	f107 0310 	add.w	r3, r7, #16
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4806      	ldr	r0, [pc, #24]	; (8004ee8 <HAL_TIM_MspPostInit+0x94>)
 8004ed0:	f000 fa16 	bl	8005300 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004ed4:	bf00      	nop
 8004ed6:	3720      	adds	r7, #32
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40000400 	.word	0x40000400
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	40010800 	.word	0x40010800
 8004ee8:	40010c00 	.word	0x40010c00

08004eec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004ef0:	4b11      	ldr	r3, [pc, #68]	; (8004f38 <MX_USART2_UART_Init+0x4c>)
 8004ef2:	4a12      	ldr	r2, [pc, #72]	; (8004f3c <MX_USART2_UART_Init+0x50>)
 8004ef4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004ef6:	4b10      	ldr	r3, [pc, #64]	; (8004f38 <MX_USART2_UART_Init+0x4c>)
 8004ef8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004efc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004efe:	4b0e      	ldr	r3, [pc, #56]	; (8004f38 <MX_USART2_UART_Init+0x4c>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004f04:	4b0c      	ldr	r3, [pc, #48]	; (8004f38 <MX_USART2_UART_Init+0x4c>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004f0a:	4b0b      	ldr	r3, [pc, #44]	; (8004f38 <MX_USART2_UART_Init+0x4c>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004f10:	4b09      	ldr	r3, [pc, #36]	; (8004f38 <MX_USART2_UART_Init+0x4c>)
 8004f12:	220c      	movs	r2, #12
 8004f14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f16:	4b08      	ldr	r3, [pc, #32]	; (8004f38 <MX_USART2_UART_Init+0x4c>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f1c:	4b06      	ldr	r3, [pc, #24]	; (8004f38 <MX_USART2_UART_Init+0x4c>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004f22:	4805      	ldr	r0, [pc, #20]	; (8004f38 <MX_USART2_UART_Init+0x4c>)
 8004f24:	f002 fee8 	bl	8007cf8 <HAL_UART_Init>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004f2e:	f7fc fd33 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004f32:	bf00      	nop
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	20000674 	.word	0x20000674
 8004f3c:	40004400 	.word	0x40004400

08004f40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f48:	f107 0310 	add.w	r3, r7, #16
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	605a      	str	r2, [r3, #4]
 8004f52:	609a      	str	r2, [r3, #8]
 8004f54:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a1b      	ldr	r2, [pc, #108]	; (8004fc8 <HAL_UART_MspInit+0x88>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d12f      	bne.n	8004fc0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f60:	4b1a      	ldr	r3, [pc, #104]	; (8004fcc <HAL_UART_MspInit+0x8c>)
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	4a19      	ldr	r2, [pc, #100]	; (8004fcc <HAL_UART_MspInit+0x8c>)
 8004f66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f6a:	61d3      	str	r3, [r2, #28]
 8004f6c:	4b17      	ldr	r3, [pc, #92]	; (8004fcc <HAL_UART_MspInit+0x8c>)
 8004f6e:	69db      	ldr	r3, [r3, #28]
 8004f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f74:	60fb      	str	r3, [r7, #12]
 8004f76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f78:	4b14      	ldr	r3, [pc, #80]	; (8004fcc <HAL_UART_MspInit+0x8c>)
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	4a13      	ldr	r2, [pc, #76]	; (8004fcc <HAL_UART_MspInit+0x8c>)
 8004f7e:	f043 0304 	orr.w	r3, r3, #4
 8004f82:	6193      	str	r3, [r2, #24]
 8004f84:	4b11      	ldr	r3, [pc, #68]	; (8004fcc <HAL_UART_MspInit+0x8c>)
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	60bb      	str	r3, [r7, #8]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004f90:	2304      	movs	r3, #4
 8004f92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f94:	2302      	movs	r3, #2
 8004f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f9c:	f107 0310 	add.w	r3, r7, #16
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	480b      	ldr	r0, [pc, #44]	; (8004fd0 <HAL_UART_MspInit+0x90>)
 8004fa4:	f000 f9ac 	bl	8005300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004fa8:	2308      	movs	r3, #8
 8004faa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004fac:	2300      	movs	r3, #0
 8004fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	61bb      	str	r3, [r7, #24]
     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fb4:	f107 0310 	add.w	r3, r7, #16
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4805      	ldr	r0, [pc, #20]	; (8004fd0 <HAL_UART_MspInit+0x90>)
 8004fbc:	f000 f9a0 	bl	8005300 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004fc0:	bf00      	nop
 8004fc2:	3720      	adds	r7, #32
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40004400 	.word	0x40004400
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	40010800 	.word	0x40010800

08004fd4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004fd4:	480c      	ldr	r0, [pc, #48]	; (8005008 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004fd6:	490d      	ldr	r1, [pc, #52]	; (800500c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004fd8:	4a0d      	ldr	r2, [pc, #52]	; (8005010 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004fdc:	e002      	b.n	8004fe4 <LoopCopyDataInit>

08004fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004fe2:	3304      	adds	r3, #4

08004fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004fe8:	d3f9      	bcc.n	8004fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004fea:	4a0a      	ldr	r2, [pc, #40]	; (8005014 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004fec:	4c0a      	ldr	r4, [pc, #40]	; (8005018 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004ff0:	e001      	b.n	8004ff6 <LoopFillZerobss>

08004ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004ff4:	3204      	adds	r2, #4

08004ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004ff8:	d3fb      	bcc.n	8004ff2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004ffa:	f7ff fe09 	bl	8004c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ffe:	f002 ff5d 	bl	8007ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005002:	f7fc fb2b 	bl	800165c <main>
  bx lr
 8005006:	4770      	bx	lr
  ldr r0, =_sdata
 8005008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800500c:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 8005010:	0800d628 	.word	0x0800d628
  ldr r2, =_sbss
 8005014:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8005018:	200006cc 	.word	0x200006cc

0800501c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800501c:	e7fe      	b.n	800501c <ADC1_2_IRQHandler>
	...

08005020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005024:	4b08      	ldr	r3, [pc, #32]	; (8005048 <HAL_Init+0x28>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a07      	ldr	r2, [pc, #28]	; (8005048 <HAL_Init+0x28>)
 800502a:	f043 0310 	orr.w	r3, r3, #16
 800502e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005030:	2003      	movs	r0, #3
 8005032:	f000 f923 	bl	800527c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005036:	200f      	movs	r0, #15
 8005038:	f000 f808 	bl	800504c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800503c:	f7ff fcd4 	bl	80049e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	40022000 	.word	0x40022000

0800504c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005054:	4b12      	ldr	r3, [pc, #72]	; (80050a0 <HAL_InitTick+0x54>)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	4b12      	ldr	r3, [pc, #72]	; (80050a4 <HAL_InitTick+0x58>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	4619      	mov	r1, r3
 800505e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005062:	fbb3 f3f1 	udiv	r3, r3, r1
 8005066:	fbb2 f3f3 	udiv	r3, r2, r3
 800506a:	4618      	mov	r0, r3
 800506c:	f000 f93b 	bl	80052e6 <HAL_SYSTICK_Config>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e00e      	b.n	8005098 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b0f      	cmp	r3, #15
 800507e:	d80a      	bhi.n	8005096 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005080:	2200      	movs	r2, #0
 8005082:	6879      	ldr	r1, [r7, #4]
 8005084:	f04f 30ff 	mov.w	r0, #4294967295
 8005088:	f000 f903 	bl	8005292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800508c:	4a06      	ldr	r2, [pc, #24]	; (80050a8 <HAL_InitTick+0x5c>)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005092:	2300      	movs	r3, #0
 8005094:	e000      	b.n	8005098 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
}
 8005098:	4618      	mov	r0, r3
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	20000094 	.word	0x20000094
 80050a4:	2000009c 	.word	0x2000009c
 80050a8:	20000098 	.word	0x20000098

080050ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80050b0:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <HAL_IncTick+0x1c>)
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	461a      	mov	r2, r3
 80050b6:	4b05      	ldr	r3, [pc, #20]	; (80050cc <HAL_IncTick+0x20>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4413      	add	r3, r2
 80050bc:	4a03      	ldr	r2, [pc, #12]	; (80050cc <HAL_IncTick+0x20>)
 80050be:	6013      	str	r3, [r2, #0]
}
 80050c0:	bf00      	nop
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bc80      	pop	{r7}
 80050c6:	4770      	bx	lr
 80050c8:	2000009c 	.word	0x2000009c
 80050cc:	200006b8 	.word	0x200006b8

080050d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
  return uwTick;
 80050d4:	4b02      	ldr	r3, [pc, #8]	; (80050e0 <HAL_GetTick+0x10>)
 80050d6:	681b      	ldr	r3, [r3, #0]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr
 80050e0:	200006b8 	.word	0x200006b8

080050e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050f4:	4b0c      	ldr	r3, [pc, #48]	; (8005128 <__NVIC_SetPriorityGrouping+0x44>)
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005100:	4013      	ands	r3, r2
 8005102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800510c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005116:	4a04      	ldr	r2, [pc, #16]	; (8005128 <__NVIC_SetPriorityGrouping+0x44>)
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	60d3      	str	r3, [r2, #12]
}
 800511c:	bf00      	nop
 800511e:	3714      	adds	r7, #20
 8005120:	46bd      	mov	sp, r7
 8005122:	bc80      	pop	{r7}
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	e000ed00 	.word	0xe000ed00

0800512c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005130:	4b04      	ldr	r3, [pc, #16]	; (8005144 <__NVIC_GetPriorityGrouping+0x18>)
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	0a1b      	lsrs	r3, r3, #8
 8005136:	f003 0307 	and.w	r3, r3, #7
}
 800513a:	4618      	mov	r0, r3
 800513c:	46bd      	mov	sp, r7
 800513e:	bc80      	pop	{r7}
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	e000ed00 	.word	0xe000ed00

08005148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	4603      	mov	r3, r0
 8005150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005156:	2b00      	cmp	r3, #0
 8005158:	db0b      	blt.n	8005172 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800515a:	79fb      	ldrb	r3, [r7, #7]
 800515c:	f003 021f 	and.w	r2, r3, #31
 8005160:	4906      	ldr	r1, [pc, #24]	; (800517c <__NVIC_EnableIRQ+0x34>)
 8005162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005166:	095b      	lsrs	r3, r3, #5
 8005168:	2001      	movs	r0, #1
 800516a:	fa00 f202 	lsl.w	r2, r0, r2
 800516e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005172:	bf00      	nop
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	bc80      	pop	{r7}
 800517a:	4770      	bx	lr
 800517c:	e000e100 	.word	0xe000e100

08005180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	4603      	mov	r3, r0
 8005188:	6039      	str	r1, [r7, #0]
 800518a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800518c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005190:	2b00      	cmp	r3, #0
 8005192:	db0a      	blt.n	80051aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	b2da      	uxtb	r2, r3
 8005198:	490c      	ldr	r1, [pc, #48]	; (80051cc <__NVIC_SetPriority+0x4c>)
 800519a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800519e:	0112      	lsls	r2, r2, #4
 80051a0:	b2d2      	uxtb	r2, r2
 80051a2:	440b      	add	r3, r1
 80051a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051a8:	e00a      	b.n	80051c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	4908      	ldr	r1, [pc, #32]	; (80051d0 <__NVIC_SetPriority+0x50>)
 80051b0:	79fb      	ldrb	r3, [r7, #7]
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	3b04      	subs	r3, #4
 80051b8:	0112      	lsls	r2, r2, #4
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	440b      	add	r3, r1
 80051be:	761a      	strb	r2, [r3, #24]
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bc80      	pop	{r7}
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	e000e100 	.word	0xe000e100
 80051d0:	e000ed00 	.word	0xe000ed00

080051d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b089      	sub	sp, #36	; 0x24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f003 0307 	and.w	r3, r3, #7
 80051e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	f1c3 0307 	rsb	r3, r3, #7
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	bf28      	it	cs
 80051f2:	2304      	movcs	r3, #4
 80051f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	3304      	adds	r3, #4
 80051fa:	2b06      	cmp	r3, #6
 80051fc:	d902      	bls.n	8005204 <NVIC_EncodePriority+0x30>
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	3b03      	subs	r3, #3
 8005202:	e000      	b.n	8005206 <NVIC_EncodePriority+0x32>
 8005204:	2300      	movs	r3, #0
 8005206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005208:	f04f 32ff 	mov.w	r2, #4294967295
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	fa02 f303 	lsl.w	r3, r2, r3
 8005212:	43da      	mvns	r2, r3
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	401a      	ands	r2, r3
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800521c:	f04f 31ff 	mov.w	r1, #4294967295
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	fa01 f303 	lsl.w	r3, r1, r3
 8005226:	43d9      	mvns	r1, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800522c:	4313      	orrs	r3, r2
         );
}
 800522e:	4618      	mov	r0, r3
 8005230:	3724      	adds	r7, #36	; 0x24
 8005232:	46bd      	mov	sp, r7
 8005234:	bc80      	pop	{r7}
 8005236:	4770      	bx	lr

08005238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	3b01      	subs	r3, #1
 8005244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005248:	d301      	bcc.n	800524e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800524a:	2301      	movs	r3, #1
 800524c:	e00f      	b.n	800526e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800524e:	4a0a      	ldr	r2, [pc, #40]	; (8005278 <SysTick_Config+0x40>)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	3b01      	subs	r3, #1
 8005254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005256:	210f      	movs	r1, #15
 8005258:	f04f 30ff 	mov.w	r0, #4294967295
 800525c:	f7ff ff90 	bl	8005180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005260:	4b05      	ldr	r3, [pc, #20]	; (8005278 <SysTick_Config+0x40>)
 8005262:	2200      	movs	r2, #0
 8005264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005266:	4b04      	ldr	r3, [pc, #16]	; (8005278 <SysTick_Config+0x40>)
 8005268:	2207      	movs	r2, #7
 800526a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3708      	adds	r7, #8
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	e000e010 	.word	0xe000e010

0800527c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f7ff ff2d 	bl	80050e4 <__NVIC_SetPriorityGrouping>
}
 800528a:	bf00      	nop
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005292:	b580      	push	{r7, lr}
 8005294:	b086      	sub	sp, #24
 8005296:	af00      	add	r7, sp, #0
 8005298:	4603      	mov	r3, r0
 800529a:	60b9      	str	r1, [r7, #8]
 800529c:	607a      	str	r2, [r7, #4]
 800529e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80052a0:	2300      	movs	r3, #0
 80052a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052a4:	f7ff ff42 	bl	800512c <__NVIC_GetPriorityGrouping>
 80052a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	68b9      	ldr	r1, [r7, #8]
 80052ae:	6978      	ldr	r0, [r7, #20]
 80052b0:	f7ff ff90 	bl	80051d4 <NVIC_EncodePriority>
 80052b4:	4602      	mov	r2, r0
 80052b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052ba:	4611      	mov	r1, r2
 80052bc:	4618      	mov	r0, r3
 80052be:	f7ff ff5f 	bl	8005180 <__NVIC_SetPriority>
}
 80052c2:	bf00      	nop
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b082      	sub	sp, #8
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	4603      	mov	r3, r0
 80052d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052d8:	4618      	mov	r0, r3
 80052da:	f7ff ff35 	bl	8005148 <__NVIC_EnableIRQ>
}
 80052de:	bf00      	nop
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b082      	sub	sp, #8
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7ff ffa2 	bl	8005238 <SysTick_Config>
 80052f4:	4603      	mov	r3, r0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
	...

08005300 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005300:	b480      	push	{r7}
 8005302:	b08b      	sub	sp, #44	; 0x2c
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800530a:	2300      	movs	r3, #0
 800530c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800530e:	2300      	movs	r3, #0
 8005310:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005312:	e169      	b.n	80055e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005314:	2201      	movs	r2, #1
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	fa02 f303 	lsl.w	r3, r2, r3
 800531c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	4013      	ands	r3, r2
 8005326:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	429a      	cmp	r2, r3
 800532e:	f040 8158 	bne.w	80055e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	4a9a      	ldr	r2, [pc, #616]	; (80055a0 <HAL_GPIO_Init+0x2a0>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d05e      	beq.n	80053fa <HAL_GPIO_Init+0xfa>
 800533c:	4a98      	ldr	r2, [pc, #608]	; (80055a0 <HAL_GPIO_Init+0x2a0>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d875      	bhi.n	800542e <HAL_GPIO_Init+0x12e>
 8005342:	4a98      	ldr	r2, [pc, #608]	; (80055a4 <HAL_GPIO_Init+0x2a4>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d058      	beq.n	80053fa <HAL_GPIO_Init+0xfa>
 8005348:	4a96      	ldr	r2, [pc, #600]	; (80055a4 <HAL_GPIO_Init+0x2a4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d86f      	bhi.n	800542e <HAL_GPIO_Init+0x12e>
 800534e:	4a96      	ldr	r2, [pc, #600]	; (80055a8 <HAL_GPIO_Init+0x2a8>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d052      	beq.n	80053fa <HAL_GPIO_Init+0xfa>
 8005354:	4a94      	ldr	r2, [pc, #592]	; (80055a8 <HAL_GPIO_Init+0x2a8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d869      	bhi.n	800542e <HAL_GPIO_Init+0x12e>
 800535a:	4a94      	ldr	r2, [pc, #592]	; (80055ac <HAL_GPIO_Init+0x2ac>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d04c      	beq.n	80053fa <HAL_GPIO_Init+0xfa>
 8005360:	4a92      	ldr	r2, [pc, #584]	; (80055ac <HAL_GPIO_Init+0x2ac>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d863      	bhi.n	800542e <HAL_GPIO_Init+0x12e>
 8005366:	4a92      	ldr	r2, [pc, #584]	; (80055b0 <HAL_GPIO_Init+0x2b0>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d046      	beq.n	80053fa <HAL_GPIO_Init+0xfa>
 800536c:	4a90      	ldr	r2, [pc, #576]	; (80055b0 <HAL_GPIO_Init+0x2b0>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d85d      	bhi.n	800542e <HAL_GPIO_Init+0x12e>
 8005372:	2b12      	cmp	r3, #18
 8005374:	d82a      	bhi.n	80053cc <HAL_GPIO_Init+0xcc>
 8005376:	2b12      	cmp	r3, #18
 8005378:	d859      	bhi.n	800542e <HAL_GPIO_Init+0x12e>
 800537a:	a201      	add	r2, pc, #4	; (adr r2, 8005380 <HAL_GPIO_Init+0x80>)
 800537c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005380:	080053fb 	.word	0x080053fb
 8005384:	080053d5 	.word	0x080053d5
 8005388:	080053e7 	.word	0x080053e7
 800538c:	08005429 	.word	0x08005429
 8005390:	0800542f 	.word	0x0800542f
 8005394:	0800542f 	.word	0x0800542f
 8005398:	0800542f 	.word	0x0800542f
 800539c:	0800542f 	.word	0x0800542f
 80053a0:	0800542f 	.word	0x0800542f
 80053a4:	0800542f 	.word	0x0800542f
 80053a8:	0800542f 	.word	0x0800542f
 80053ac:	0800542f 	.word	0x0800542f
 80053b0:	0800542f 	.word	0x0800542f
 80053b4:	0800542f 	.word	0x0800542f
 80053b8:	0800542f 	.word	0x0800542f
 80053bc:	0800542f 	.word	0x0800542f
 80053c0:	0800542f 	.word	0x0800542f
 80053c4:	080053dd 	.word	0x080053dd
 80053c8:	080053f1 	.word	0x080053f1
 80053cc:	4a79      	ldr	r2, [pc, #484]	; (80055b4 <HAL_GPIO_Init+0x2b4>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d013      	beq.n	80053fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80053d2:	e02c      	b.n	800542e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	623b      	str	r3, [r7, #32]
          break;
 80053da:	e029      	b.n	8005430 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	3304      	adds	r3, #4
 80053e2:	623b      	str	r3, [r7, #32]
          break;
 80053e4:	e024      	b.n	8005430 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	3308      	adds	r3, #8
 80053ec:	623b      	str	r3, [r7, #32]
          break;
 80053ee:	e01f      	b.n	8005430 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	330c      	adds	r3, #12
 80053f6:	623b      	str	r3, [r7, #32]
          break;
 80053f8:	e01a      	b.n	8005430 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d102      	bne.n	8005408 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005402:	2304      	movs	r3, #4
 8005404:	623b      	str	r3, [r7, #32]
          break;
 8005406:	e013      	b.n	8005430 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d105      	bne.n	800541c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005410:	2308      	movs	r3, #8
 8005412:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	69fa      	ldr	r2, [r7, #28]
 8005418:	611a      	str	r2, [r3, #16]
          break;
 800541a:	e009      	b.n	8005430 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800541c:	2308      	movs	r3, #8
 800541e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	69fa      	ldr	r2, [r7, #28]
 8005424:	615a      	str	r2, [r3, #20]
          break;
 8005426:	e003      	b.n	8005430 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005428:	2300      	movs	r3, #0
 800542a:	623b      	str	r3, [r7, #32]
          break;
 800542c:	e000      	b.n	8005430 <HAL_GPIO_Init+0x130>
          break;
 800542e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	2bff      	cmp	r3, #255	; 0xff
 8005434:	d801      	bhi.n	800543a <HAL_GPIO_Init+0x13a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	e001      	b.n	800543e <HAL_GPIO_Init+0x13e>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	3304      	adds	r3, #4
 800543e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	2bff      	cmp	r3, #255	; 0xff
 8005444:	d802      	bhi.n	800544c <HAL_GPIO_Init+0x14c>
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	e002      	b.n	8005452 <HAL_GPIO_Init+0x152>
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	3b08      	subs	r3, #8
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	210f      	movs	r1, #15
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	fa01 f303 	lsl.w	r3, r1, r3
 8005460:	43db      	mvns	r3, r3
 8005462:	401a      	ands	r2, r3
 8005464:	6a39      	ldr	r1, [r7, #32]
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	fa01 f303 	lsl.w	r3, r1, r3
 800546c:	431a      	orrs	r2, r3
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 80b1 	beq.w	80055e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005480:	4b4d      	ldr	r3, [pc, #308]	; (80055b8 <HAL_GPIO_Init+0x2b8>)
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	4a4c      	ldr	r2, [pc, #304]	; (80055b8 <HAL_GPIO_Init+0x2b8>)
 8005486:	f043 0301 	orr.w	r3, r3, #1
 800548a:	6193      	str	r3, [r2, #24]
 800548c:	4b4a      	ldr	r3, [pc, #296]	; (80055b8 <HAL_GPIO_Init+0x2b8>)
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	60bb      	str	r3, [r7, #8]
 8005496:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005498:	4a48      	ldr	r2, [pc, #288]	; (80055bc <HAL_GPIO_Init+0x2bc>)
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549c:	089b      	lsrs	r3, r3, #2
 800549e:	3302      	adds	r3, #2
 80054a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	f003 0303 	and.w	r3, r3, #3
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	220f      	movs	r2, #15
 80054b0:	fa02 f303 	lsl.w	r3, r2, r3
 80054b4:	43db      	mvns	r3, r3
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	4013      	ands	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a40      	ldr	r2, [pc, #256]	; (80055c0 <HAL_GPIO_Init+0x2c0>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d013      	beq.n	80054ec <HAL_GPIO_Init+0x1ec>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a3f      	ldr	r2, [pc, #252]	; (80055c4 <HAL_GPIO_Init+0x2c4>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d00d      	beq.n	80054e8 <HAL_GPIO_Init+0x1e8>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a3e      	ldr	r2, [pc, #248]	; (80055c8 <HAL_GPIO_Init+0x2c8>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d007      	beq.n	80054e4 <HAL_GPIO_Init+0x1e4>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a3d      	ldr	r2, [pc, #244]	; (80055cc <HAL_GPIO_Init+0x2cc>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d101      	bne.n	80054e0 <HAL_GPIO_Init+0x1e0>
 80054dc:	2303      	movs	r3, #3
 80054de:	e006      	b.n	80054ee <HAL_GPIO_Init+0x1ee>
 80054e0:	2304      	movs	r3, #4
 80054e2:	e004      	b.n	80054ee <HAL_GPIO_Init+0x1ee>
 80054e4:	2302      	movs	r3, #2
 80054e6:	e002      	b.n	80054ee <HAL_GPIO_Init+0x1ee>
 80054e8:	2301      	movs	r3, #1
 80054ea:	e000      	b.n	80054ee <HAL_GPIO_Init+0x1ee>
 80054ec:	2300      	movs	r3, #0
 80054ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f0:	f002 0203 	and.w	r2, r2, #3
 80054f4:	0092      	lsls	r2, r2, #2
 80054f6:	4093      	lsls	r3, r2
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80054fe:	492f      	ldr	r1, [pc, #188]	; (80055bc <HAL_GPIO_Init+0x2bc>)
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	089b      	lsrs	r3, r3, #2
 8005504:	3302      	adds	r3, #2
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d006      	beq.n	8005526 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005518:	4b2d      	ldr	r3, [pc, #180]	; (80055d0 <HAL_GPIO_Init+0x2d0>)
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	492c      	ldr	r1, [pc, #176]	; (80055d0 <HAL_GPIO_Init+0x2d0>)
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	4313      	orrs	r3, r2
 8005522:	600b      	str	r3, [r1, #0]
 8005524:	e006      	b.n	8005534 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005526:	4b2a      	ldr	r3, [pc, #168]	; (80055d0 <HAL_GPIO_Init+0x2d0>)
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	43db      	mvns	r3, r3
 800552e:	4928      	ldr	r1, [pc, #160]	; (80055d0 <HAL_GPIO_Init+0x2d0>)
 8005530:	4013      	ands	r3, r2
 8005532:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d006      	beq.n	800554e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005540:	4b23      	ldr	r3, [pc, #140]	; (80055d0 <HAL_GPIO_Init+0x2d0>)
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	4922      	ldr	r1, [pc, #136]	; (80055d0 <HAL_GPIO_Init+0x2d0>)
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	4313      	orrs	r3, r2
 800554a:	604b      	str	r3, [r1, #4]
 800554c:	e006      	b.n	800555c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800554e:	4b20      	ldr	r3, [pc, #128]	; (80055d0 <HAL_GPIO_Init+0x2d0>)
 8005550:	685a      	ldr	r2, [r3, #4]
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	43db      	mvns	r3, r3
 8005556:	491e      	ldr	r1, [pc, #120]	; (80055d0 <HAL_GPIO_Init+0x2d0>)
 8005558:	4013      	ands	r3, r2
 800555a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d006      	beq.n	8005576 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005568:	4b19      	ldr	r3, [pc, #100]	; (80055d0 <HAL_GPIO_Init+0x2d0>)
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	4918      	ldr	r1, [pc, #96]	; (80055d0 <HAL_GPIO_Init+0x2d0>)
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	4313      	orrs	r3, r2
 8005572:	608b      	str	r3, [r1, #8]
 8005574:	e006      	b.n	8005584 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005576:	4b16      	ldr	r3, [pc, #88]	; (80055d0 <HAL_GPIO_Init+0x2d0>)
 8005578:	689a      	ldr	r2, [r3, #8]
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	43db      	mvns	r3, r3
 800557e:	4914      	ldr	r1, [pc, #80]	; (80055d0 <HAL_GPIO_Init+0x2d0>)
 8005580:	4013      	ands	r3, r2
 8005582:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d021      	beq.n	80055d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005590:	4b0f      	ldr	r3, [pc, #60]	; (80055d0 <HAL_GPIO_Init+0x2d0>)
 8005592:	68da      	ldr	r2, [r3, #12]
 8005594:	490e      	ldr	r1, [pc, #56]	; (80055d0 <HAL_GPIO_Init+0x2d0>)
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	4313      	orrs	r3, r2
 800559a:	60cb      	str	r3, [r1, #12]
 800559c:	e021      	b.n	80055e2 <HAL_GPIO_Init+0x2e2>
 800559e:	bf00      	nop
 80055a0:	10320000 	.word	0x10320000
 80055a4:	10310000 	.word	0x10310000
 80055a8:	10220000 	.word	0x10220000
 80055ac:	10210000 	.word	0x10210000
 80055b0:	10120000 	.word	0x10120000
 80055b4:	10110000 	.word	0x10110000
 80055b8:	40021000 	.word	0x40021000
 80055bc:	40010000 	.word	0x40010000
 80055c0:	40010800 	.word	0x40010800
 80055c4:	40010c00 	.word	0x40010c00
 80055c8:	40011000 	.word	0x40011000
 80055cc:	40011400 	.word	0x40011400
 80055d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80055d4:	4b0b      	ldr	r3, [pc, #44]	; (8005604 <HAL_GPIO_Init+0x304>)
 80055d6:	68da      	ldr	r2, [r3, #12]
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	43db      	mvns	r3, r3
 80055dc:	4909      	ldr	r1, [pc, #36]	; (8005604 <HAL_GPIO_Init+0x304>)
 80055de:	4013      	ands	r3, r2
 80055e0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	3301      	adds	r3, #1
 80055e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ee:	fa22 f303 	lsr.w	r3, r2, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f47f ae8e 	bne.w	8005314 <HAL_GPIO_Init+0x14>
  }
}
 80055f8:	bf00      	nop
 80055fa:	bf00      	nop
 80055fc:	372c      	adds	r7, #44	; 0x2c
 80055fe:	46bd      	mov	sp, r7
 8005600:	bc80      	pop	{r7}
 8005602:	4770      	bx	lr
 8005604:	40010400 	.word	0x40010400

08005608 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e12b      	b.n	8005872 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d106      	bne.n	8005634 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f7fb ffd4 	bl	80015dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2224      	movs	r2, #36	; 0x24
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0201 	bic.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800565a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800566a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800566c:	f001 fba0 	bl	8006db0 <HAL_RCC_GetPCLK1Freq>
 8005670:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	4a81      	ldr	r2, [pc, #516]	; (800587c <HAL_I2C_Init+0x274>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d807      	bhi.n	800568c <HAL_I2C_Init+0x84>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4a80      	ldr	r2, [pc, #512]	; (8005880 <HAL_I2C_Init+0x278>)
 8005680:	4293      	cmp	r3, r2
 8005682:	bf94      	ite	ls
 8005684:	2301      	movls	r3, #1
 8005686:	2300      	movhi	r3, #0
 8005688:	b2db      	uxtb	r3, r3
 800568a:	e006      	b.n	800569a <HAL_I2C_Init+0x92>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4a7d      	ldr	r2, [pc, #500]	; (8005884 <HAL_I2C_Init+0x27c>)
 8005690:	4293      	cmp	r3, r2
 8005692:	bf94      	ite	ls
 8005694:	2301      	movls	r3, #1
 8005696:	2300      	movhi	r3, #0
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e0e7      	b.n	8005872 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	4a78      	ldr	r2, [pc, #480]	; (8005888 <HAL_I2C_Init+0x280>)
 80056a6:	fba2 2303 	umull	r2, r3, r2, r3
 80056aa:	0c9b      	lsrs	r3, r3, #18
 80056ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68ba      	ldr	r2, [r7, #8]
 80056be:	430a      	orrs	r2, r1
 80056c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	4a6a      	ldr	r2, [pc, #424]	; (800587c <HAL_I2C_Init+0x274>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d802      	bhi.n	80056dc <HAL_I2C_Init+0xd4>
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	3301      	adds	r3, #1
 80056da:	e009      	b.n	80056f0 <HAL_I2C_Init+0xe8>
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80056e2:	fb02 f303 	mul.w	r3, r2, r3
 80056e6:	4a69      	ldr	r2, [pc, #420]	; (800588c <HAL_I2C_Init+0x284>)
 80056e8:	fba2 2303 	umull	r2, r3, r2, r3
 80056ec:	099b      	lsrs	r3, r3, #6
 80056ee:	3301      	adds	r3, #1
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	6812      	ldr	r2, [r2, #0]
 80056f4:	430b      	orrs	r3, r1
 80056f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005702:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	495c      	ldr	r1, [pc, #368]	; (800587c <HAL_I2C_Init+0x274>)
 800570c:	428b      	cmp	r3, r1
 800570e:	d819      	bhi.n	8005744 <HAL_I2C_Init+0x13c>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	1e59      	subs	r1, r3, #1
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	005b      	lsls	r3, r3, #1
 800571a:	fbb1 f3f3 	udiv	r3, r1, r3
 800571e:	1c59      	adds	r1, r3, #1
 8005720:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005724:	400b      	ands	r3, r1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <HAL_I2C_Init+0x138>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	1e59      	subs	r1, r3, #1
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	005b      	lsls	r3, r3, #1
 8005734:	fbb1 f3f3 	udiv	r3, r1, r3
 8005738:	3301      	adds	r3, #1
 800573a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800573e:	e051      	b.n	80057e4 <HAL_I2C_Init+0x1dc>
 8005740:	2304      	movs	r3, #4
 8005742:	e04f      	b.n	80057e4 <HAL_I2C_Init+0x1dc>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d111      	bne.n	8005770 <HAL_I2C_Init+0x168>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	1e58      	subs	r0, r3, #1
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6859      	ldr	r1, [r3, #4]
 8005754:	460b      	mov	r3, r1
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	440b      	add	r3, r1
 800575a:	fbb0 f3f3 	udiv	r3, r0, r3
 800575e:	3301      	adds	r3, #1
 8005760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005764:	2b00      	cmp	r3, #0
 8005766:	bf0c      	ite	eq
 8005768:	2301      	moveq	r3, #1
 800576a:	2300      	movne	r3, #0
 800576c:	b2db      	uxtb	r3, r3
 800576e:	e012      	b.n	8005796 <HAL_I2C_Init+0x18e>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	1e58      	subs	r0, r3, #1
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6859      	ldr	r1, [r3, #4]
 8005778:	460b      	mov	r3, r1
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	440b      	add	r3, r1
 800577e:	0099      	lsls	r1, r3, #2
 8005780:	440b      	add	r3, r1
 8005782:	fbb0 f3f3 	udiv	r3, r0, r3
 8005786:	3301      	adds	r3, #1
 8005788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800578c:	2b00      	cmp	r3, #0
 800578e:	bf0c      	ite	eq
 8005790:	2301      	moveq	r3, #1
 8005792:	2300      	movne	r3, #0
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <HAL_I2C_Init+0x196>
 800579a:	2301      	movs	r3, #1
 800579c:	e022      	b.n	80057e4 <HAL_I2C_Init+0x1dc>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10e      	bne.n	80057c4 <HAL_I2C_Init+0x1bc>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	1e58      	subs	r0, r3, #1
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6859      	ldr	r1, [r3, #4]
 80057ae:	460b      	mov	r3, r1
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	440b      	add	r3, r1
 80057b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80057b8:	3301      	adds	r3, #1
 80057ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057c2:	e00f      	b.n	80057e4 <HAL_I2C_Init+0x1dc>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	1e58      	subs	r0, r3, #1
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6859      	ldr	r1, [r3, #4]
 80057cc:	460b      	mov	r3, r1
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	440b      	add	r3, r1
 80057d2:	0099      	lsls	r1, r3, #2
 80057d4:	440b      	add	r3, r1
 80057d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80057da:	3301      	adds	r3, #1
 80057dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057e4:	6879      	ldr	r1, [r7, #4]
 80057e6:	6809      	ldr	r1, [r1, #0]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	69da      	ldr	r2, [r3, #28]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	431a      	orrs	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005812:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6911      	ldr	r1, [r2, #16]
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	68d2      	ldr	r2, [r2, #12]
 800581e:	4311      	orrs	r1, r2
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6812      	ldr	r2, [r2, #0]
 8005824:	430b      	orrs	r3, r1
 8005826:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	695a      	ldr	r2, [r3, #20]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	431a      	orrs	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	430a      	orrs	r2, r1
 8005842:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2220      	movs	r2, #32
 800585e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	000186a0 	.word	0x000186a0
 8005880:	001e847f 	.word	0x001e847f
 8005884:	003d08ff 	.word	0x003d08ff
 8005888:	431bde83 	.word	0x431bde83
 800588c:	10624dd3 	.word	0x10624dd3

08005890 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b088      	sub	sp, #32
 8005894:	af02      	add	r7, sp, #8
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	4608      	mov	r0, r1
 800589a:	4611      	mov	r1, r2
 800589c:	461a      	mov	r2, r3
 800589e:	4603      	mov	r3, r0
 80058a0:	817b      	strh	r3, [r7, #10]
 80058a2:	460b      	mov	r3, r1
 80058a4:	813b      	strh	r3, [r7, #8]
 80058a6:	4613      	mov	r3, r2
 80058a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058aa:	f7ff fc11 	bl	80050d0 <HAL_GetTick>
 80058ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b20      	cmp	r3, #32
 80058ba:	f040 80d9 	bne.w	8005a70 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	2319      	movs	r3, #25
 80058c4:	2201      	movs	r2, #1
 80058c6:	496d      	ldr	r1, [pc, #436]	; (8005a7c <HAL_I2C_Mem_Write+0x1ec>)
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 fcc1 	bl	8006250 <I2C_WaitOnFlagUntilTimeout>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80058d4:	2302      	movs	r3, #2
 80058d6:	e0cc      	b.n	8005a72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d101      	bne.n	80058e6 <HAL_I2C_Mem_Write+0x56>
 80058e2:	2302      	movs	r3, #2
 80058e4:	e0c5      	b.n	8005a72 <HAL_I2C_Mem_Write+0x1e2>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d007      	beq.n	800590c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0201 	orr.w	r2, r2, #1
 800590a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800591a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2221      	movs	r2, #33	; 0x21
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2240      	movs	r2, #64	; 0x40
 8005928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6a3a      	ldr	r2, [r7, #32]
 8005936:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800593c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005942:	b29a      	uxth	r2, r3
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4a4d      	ldr	r2, [pc, #308]	; (8005a80 <HAL_I2C_Mem_Write+0x1f0>)
 800594c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800594e:	88f8      	ldrh	r0, [r7, #6]
 8005950:	893a      	ldrh	r2, [r7, #8]
 8005952:	8979      	ldrh	r1, [r7, #10]
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	9301      	str	r3, [sp, #4]
 8005958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	4603      	mov	r3, r0
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f000 faf8 	bl	8005f54 <I2C_RequestMemoryWrite>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d052      	beq.n	8005a10 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e081      	b.n	8005a72 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005972:	68f8      	ldr	r0, [r7, #12]
 8005974:	f000 fd42 	bl	80063fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00d      	beq.n	800599a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005982:	2b04      	cmp	r3, #4
 8005984:	d107      	bne.n	8005996 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005994:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e06b      	b.n	8005a72 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	781a      	ldrb	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059aa:	1c5a      	adds	r2, r3, #1
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	3b01      	subs	r3, #1
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	f003 0304 	and.w	r3, r3, #4
 80059d4:	2b04      	cmp	r3, #4
 80059d6:	d11b      	bne.n	8005a10 <HAL_I2C_Mem_Write+0x180>
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d017      	beq.n	8005a10 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	781a      	ldrb	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1aa      	bne.n	800596e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 fd2e 	bl	800647e <I2C_WaitOnBTFFlagUntilTimeout>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00d      	beq.n	8005a44 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d107      	bne.n	8005a40 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e016      	b.n	8005a72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	e000      	b.n	8005a72 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005a70:	2302      	movs	r3, #2
  }
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3718      	adds	r7, #24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	00100002 	.word	0x00100002
 8005a80:	ffff0000 	.word	0xffff0000

08005a84 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b08c      	sub	sp, #48	; 0x30
 8005a88:	af02      	add	r7, sp, #8
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	4608      	mov	r0, r1
 8005a8e:	4611      	mov	r1, r2
 8005a90:	461a      	mov	r2, r3
 8005a92:	4603      	mov	r3, r0
 8005a94:	817b      	strh	r3, [r7, #10]
 8005a96:	460b      	mov	r3, r1
 8005a98:	813b      	strh	r3, [r7, #8]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005aa2:	f7ff fb15 	bl	80050d0 <HAL_GetTick>
 8005aa6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	2b20      	cmp	r3, #32
 8005ab2:	f040 8244 	bne.w	8005f3e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	2319      	movs	r3, #25
 8005abc:	2201      	movs	r2, #1
 8005abe:	4982      	ldr	r1, [pc, #520]	; (8005cc8 <HAL_I2C_Mem_Read+0x244>)
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 fbc5 	bl	8006250 <I2C_WaitOnFlagUntilTimeout>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8005acc:	2302      	movs	r3, #2
 8005ace:	e237      	b.n	8005f40 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d101      	bne.n	8005ade <HAL_I2C_Mem_Read+0x5a>
 8005ada:	2302      	movs	r3, #2
 8005adc:	e230      	b.n	8005f40 <HAL_I2C_Mem_Read+0x4bc>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d007      	beq.n	8005b04 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f042 0201 	orr.w	r2, r2, #1
 8005b02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2222      	movs	r2, #34	; 0x22
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2240      	movs	r2, #64	; 0x40
 8005b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005b34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	4a62      	ldr	r2, [pc, #392]	; (8005ccc <HAL_I2C_Mem_Read+0x248>)
 8005b44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b46:	88f8      	ldrh	r0, [r7, #6]
 8005b48:	893a      	ldrh	r2, [r7, #8]
 8005b4a:	8979      	ldrh	r1, [r7, #10]
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	9301      	str	r3, [sp, #4]
 8005b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	4603      	mov	r3, r0
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f000 fa92 	bl	8006080 <I2C_RequestMemoryRead>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e1ec      	b.n	8005f40 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d113      	bne.n	8005b96 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b6e:	2300      	movs	r3, #0
 8005b70:	61fb      	str	r3, [r7, #28]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	61fb      	str	r3, [r7, #28]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	61fb      	str	r3, [r7, #28]
 8005b82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	e1c0      	b.n	8005f18 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d11e      	bne.n	8005bdc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005bae:	b672      	cpsid	i
}
 8005bb0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	61bb      	str	r3, [r7, #24]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	695b      	ldr	r3, [r3, #20]
 8005bbc:	61bb      	str	r3, [r7, #24]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	61bb      	str	r3, [r7, #24]
 8005bc6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bd6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005bd8:	b662      	cpsie	i
}
 8005bda:	e035      	b.n	8005c48 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d11e      	bne.n	8005c22 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bf2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005bf4:	b672      	cpsid	i
}
 8005bf6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	617b      	str	r3, [r7, #20]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	617b      	str	r3, [r7, #20]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	617b      	str	r3, [r7, #20]
 8005c0c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005c1e:	b662      	cpsie	i
}
 8005c20:	e012      	b.n	8005c48 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c30:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c32:	2300      	movs	r3, #0
 8005c34:	613b      	str	r3, [r7, #16]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	613b      	str	r3, [r7, #16]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	613b      	str	r3, [r7, #16]
 8005c46:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005c48:	e166      	b.n	8005f18 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c4e:	2b03      	cmp	r3, #3
 8005c50:	f200 811f 	bhi.w	8005e92 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d123      	bne.n	8005ca4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 fc4d 	bl	8006500 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e167      	b.n	8005f40 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	691a      	ldr	r2, [r3, #16]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	b2d2      	uxtb	r2, r2
 8005c7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ca2:	e139      	b.n	8005f18 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d152      	bne.n	8005d52 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	4906      	ldr	r1, [pc, #24]	; (8005cd0 <HAL_I2C_Mem_Read+0x24c>)
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f000 faca 	bl	8006250 <I2C_WaitOnFlagUntilTimeout>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d008      	beq.n	8005cd4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e13c      	b.n	8005f40 <HAL_I2C_Mem_Read+0x4bc>
 8005cc6:	bf00      	nop
 8005cc8:	00100002 	.word	0x00100002
 8005ccc:	ffff0000 	.word	0xffff0000
 8005cd0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005cd4:	b672      	cpsid	i
}
 8005cd6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ce6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	691a      	ldr	r2, [r3, #16]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf2:	b2d2      	uxtb	r2, r2
 8005cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	1c5a      	adds	r2, r3, #1
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005d1a:	b662      	cpsie	i
}
 8005d1c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	691a      	ldr	r2, [r3, #16]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	b2d2      	uxtb	r2, r2
 8005d2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	1c5a      	adds	r2, r3, #1
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d50:	e0e2      	b.n	8005f18 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d58:	2200      	movs	r2, #0
 8005d5a:	497b      	ldr	r1, [pc, #492]	; (8005f48 <HAL_I2C_Mem_Read+0x4c4>)
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f000 fa77 	bl	8006250 <I2C_WaitOnFlagUntilTimeout>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e0e9      	b.n	8005f40 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005d7c:	b672      	cpsid	i
}
 8005d7e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	691a      	ldr	r2, [r3, #16]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	b2d2      	uxtb	r2, r2
 8005d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d92:	1c5a      	adds	r2, r3, #1
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	3b01      	subs	r3, #1
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005db2:	4b66      	ldr	r3, [pc, #408]	; (8005f4c <HAL_I2C_Mem_Read+0x4c8>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	08db      	lsrs	r3, r3, #3
 8005db8:	4a65      	ldr	r2, [pc, #404]	; (8005f50 <HAL_I2C_Mem_Read+0x4cc>)
 8005dba:	fba2 2303 	umull	r2, r3, r2, r3
 8005dbe:	0a1a      	lsrs	r2, r3, #8
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4413      	add	r3, r2
 8005dc6:	00da      	lsls	r2, r3, #3
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005dcc:	6a3b      	ldr	r3, [r7, #32]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d118      	bne.n	8005e0a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2220      	movs	r2, #32
 8005de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	f043 0220 	orr.w	r2, r3, #32
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005dfa:	b662      	cpsie	i
}
 8005dfc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e09a      	b.n	8005f40 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	f003 0304 	and.w	r3, r3, #4
 8005e14:	2b04      	cmp	r3, #4
 8005e16:	d1d9      	bne.n	8005dcc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	691a      	ldr	r2, [r3, #16]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	b2d2      	uxtb	r2, r2
 8005e34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3a:	1c5a      	adds	r2, r3, #1
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e44:	3b01      	subs	r3, #1
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005e5a:	b662      	cpsie	i
}
 8005e5c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	691a      	ldr	r2, [r3, #16]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e68:	b2d2      	uxtb	r2, r2
 8005e6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	1c5a      	adds	r2, r3, #1
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e90:	e042      	b.n	8005f18 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f000 fb32 	bl	8006500 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d001      	beq.n	8005ea6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e04c      	b.n	8005f40 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	691a      	ldr	r2, [r3, #16]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	b2d2      	uxtb	r2, r2
 8005eb2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	3b01      	subs	r3, #1
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	f003 0304 	and.w	r3, r3, #4
 8005ee2:	2b04      	cmp	r3, #4
 8005ee4:	d118      	bne.n	8005f18 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	691a      	ldr	r2, [r3, #16]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	b2d2      	uxtb	r2, r2
 8005ef2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef8:	1c5a      	adds	r2, r3, #1
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f02:	3b01      	subs	r3, #1
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	3b01      	subs	r3, #1
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f47f ae94 	bne.w	8005c4a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2220      	movs	r2, #32
 8005f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	e000      	b.n	8005f40 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8005f3e:	2302      	movs	r3, #2
  }
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3728      	adds	r7, #40	; 0x28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	00010004 	.word	0x00010004
 8005f4c:	20000094 	.word	0x20000094
 8005f50:	14f8b589 	.word	0x14f8b589

08005f54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af02      	add	r7, sp, #8
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	4608      	mov	r0, r1
 8005f5e:	4611      	mov	r1, r2
 8005f60:	461a      	mov	r2, r3
 8005f62:	4603      	mov	r3, r0
 8005f64:	817b      	strh	r3, [r7, #10]
 8005f66:	460b      	mov	r3, r1
 8005f68:	813b      	strh	r3, [r7, #8]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f000 f960 	bl	8006250 <I2C_WaitOnFlagUntilTimeout>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00d      	beq.n	8005fb2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fa4:	d103      	bne.n	8005fae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e05f      	b.n	8006072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fb2:	897b      	ldrh	r3, [r7, #10]
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005fc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	6a3a      	ldr	r2, [r7, #32]
 8005fc6:	492d      	ldr	r1, [pc, #180]	; (800607c <I2C_RequestMemoryWrite+0x128>)
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 f998 	bl	80062fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d001      	beq.n	8005fd8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e04c      	b.n	8006072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fd8:	2300      	movs	r3, #0
 8005fda:	617b      	str	r3, [r7, #20]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	617b      	str	r3, [r7, #20]
 8005fec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ff0:	6a39      	ldr	r1, [r7, #32]
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f000 fa02 	bl	80063fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00d      	beq.n	800601a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	2b04      	cmp	r3, #4
 8006004:	d107      	bne.n	8006016 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006014:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e02b      	b.n	8006072 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800601a:	88fb      	ldrh	r3, [r7, #6]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d105      	bne.n	800602c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006020:	893b      	ldrh	r3, [r7, #8]
 8006022:	b2da      	uxtb	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	611a      	str	r2, [r3, #16]
 800602a:	e021      	b.n	8006070 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800602c:	893b      	ldrh	r3, [r7, #8]
 800602e:	0a1b      	lsrs	r3, r3, #8
 8006030:	b29b      	uxth	r3, r3
 8006032:	b2da      	uxtb	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800603a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800603c:	6a39      	ldr	r1, [r7, #32]
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f000 f9dc 	bl	80063fc <I2C_WaitOnTXEFlagUntilTimeout>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00d      	beq.n	8006066 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604e:	2b04      	cmp	r3, #4
 8006050:	d107      	bne.n	8006062 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006060:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e005      	b.n	8006072 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006066:	893b      	ldrh	r3, [r7, #8]
 8006068:	b2da      	uxtb	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3718      	adds	r7, #24
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	00010002 	.word	0x00010002

08006080 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af02      	add	r7, sp, #8
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	4608      	mov	r0, r1
 800608a:	4611      	mov	r1, r2
 800608c:	461a      	mov	r2, r3
 800608e:	4603      	mov	r3, r0
 8006090:	817b      	strh	r3, [r7, #10]
 8006092:	460b      	mov	r3, r1
 8006094:	813b      	strh	r3, [r7, #8]
 8006096:	4613      	mov	r3, r2
 8006098:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 f8c2 	bl	8006250 <I2C_WaitOnFlagUntilTimeout>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00d      	beq.n	80060ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060e0:	d103      	bne.n	80060ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e0aa      	b.n	8006244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060ee:	897b      	ldrh	r3, [r7, #10]
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	461a      	mov	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80060fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	6a3a      	ldr	r2, [r7, #32]
 8006102:	4952      	ldr	r1, [pc, #328]	; (800624c <I2C_RequestMemoryRead+0x1cc>)
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f000 f8fa 	bl	80062fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e097      	b.n	8006244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006114:	2300      	movs	r3, #0
 8006116:	617b      	str	r3, [r7, #20]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	617b      	str	r3, [r7, #20]
 8006128:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800612a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800612c:	6a39      	ldr	r1, [r7, #32]
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f000 f964 	bl	80063fc <I2C_WaitOnTXEFlagUntilTimeout>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00d      	beq.n	8006156 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	2b04      	cmp	r3, #4
 8006140:	d107      	bne.n	8006152 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006150:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e076      	b.n	8006244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006156:	88fb      	ldrh	r3, [r7, #6]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d105      	bne.n	8006168 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800615c:	893b      	ldrh	r3, [r7, #8]
 800615e:	b2da      	uxtb	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	611a      	str	r2, [r3, #16]
 8006166:	e021      	b.n	80061ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006168:	893b      	ldrh	r3, [r7, #8]
 800616a:	0a1b      	lsrs	r3, r3, #8
 800616c:	b29b      	uxth	r3, r3
 800616e:	b2da      	uxtb	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006178:	6a39      	ldr	r1, [r7, #32]
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 f93e 	bl	80063fc <I2C_WaitOnTXEFlagUntilTimeout>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00d      	beq.n	80061a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618a:	2b04      	cmp	r3, #4
 800618c:	d107      	bne.n	800619e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800619c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e050      	b.n	8006244 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061a2:	893b      	ldrh	r3, [r7, #8]
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ae:	6a39      	ldr	r1, [r7, #32]
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 f923 	bl	80063fc <I2C_WaitOnTXEFlagUntilTimeout>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00d      	beq.n	80061d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c0:	2b04      	cmp	r3, #4
 80061c2:	d107      	bne.n	80061d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e035      	b.n	8006244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ea:	9300      	str	r3, [sp, #0]
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	2200      	movs	r2, #0
 80061f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 f82b 	bl	8006250 <I2C_WaitOnFlagUntilTimeout>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00d      	beq.n	800621c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800620e:	d103      	bne.n	8006218 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006216:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e013      	b.n	8006244 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800621c:	897b      	ldrh	r3, [r7, #10]
 800621e:	b2db      	uxtb	r3, r3
 8006220:	f043 0301 	orr.w	r3, r3, #1
 8006224:	b2da      	uxtb	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	6a3a      	ldr	r2, [r7, #32]
 8006230:	4906      	ldr	r1, [pc, #24]	; (800624c <I2C_RequestMemoryRead+0x1cc>)
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 f863 	bl	80062fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	00010002 	.word	0x00010002

08006250 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	603b      	str	r3, [r7, #0]
 800625c:	4613      	mov	r3, r2
 800625e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006260:	e025      	b.n	80062ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006268:	d021      	beq.n	80062ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800626a:	f7fe ff31 	bl	80050d0 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	d302      	bcc.n	8006280 <I2C_WaitOnFlagUntilTimeout+0x30>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d116      	bne.n	80062ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2220      	movs	r2, #32
 800628a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629a:	f043 0220 	orr.w	r2, r3, #32
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e023      	b.n	80062f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	0c1b      	lsrs	r3, r3, #16
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d10d      	bne.n	80062d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	43da      	mvns	r2, r3
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	4013      	ands	r3, r2
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	bf0c      	ite	eq
 80062ca:	2301      	moveq	r3, #1
 80062cc:	2300      	movne	r3, #0
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	461a      	mov	r2, r3
 80062d2:	e00c      	b.n	80062ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	43da      	mvns	r2, r3
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	4013      	ands	r3, r2
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	bf0c      	ite	eq
 80062e6:	2301      	moveq	r3, #1
 80062e8:	2300      	movne	r3, #0
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	461a      	mov	r2, r3
 80062ee:	79fb      	ldrb	r3, [r7, #7]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d0b6      	beq.n	8006262 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b084      	sub	sp, #16
 8006302:	af00      	add	r7, sp, #0
 8006304:	60f8      	str	r0, [r7, #12]
 8006306:	60b9      	str	r1, [r7, #8]
 8006308:	607a      	str	r2, [r7, #4]
 800630a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800630c:	e051      	b.n	80063b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800631c:	d123      	bne.n	8006366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800632c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006336:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2220      	movs	r2, #32
 8006342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006352:	f043 0204 	orr.w	r2, r3, #4
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e046      	b.n	80063f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800636c:	d021      	beq.n	80063b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800636e:	f7fe feaf 	bl	80050d0 <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	429a      	cmp	r2, r3
 800637c:	d302      	bcc.n	8006384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d116      	bne.n	80063b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2220      	movs	r2, #32
 800638e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639e:	f043 0220 	orr.w	r2, r3, #32
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e020      	b.n	80063f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	0c1b      	lsrs	r3, r3, #16
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d10c      	bne.n	80063d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	43da      	mvns	r2, r3
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	4013      	ands	r3, r2
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	bf14      	ite	ne
 80063ce:	2301      	movne	r3, #1
 80063d0:	2300      	moveq	r3, #0
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	e00b      	b.n	80063ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	699b      	ldr	r3, [r3, #24]
 80063dc:	43da      	mvns	r2, r3
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	4013      	ands	r3, r2
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	bf14      	ite	ne
 80063e8:	2301      	movne	r3, #1
 80063ea:	2300      	moveq	r3, #0
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d18d      	bne.n	800630e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006408:	e02d      	b.n	8006466 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 f8ce 	bl	80065ac <I2C_IsAcknowledgeFailed>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e02d      	b.n	8006476 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006420:	d021      	beq.n	8006466 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006422:	f7fe fe55 	bl	80050d0 <HAL_GetTick>
 8006426:	4602      	mov	r2, r0
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	429a      	cmp	r2, r3
 8006430:	d302      	bcc.n	8006438 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d116      	bne.n	8006466 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2220      	movs	r2, #32
 8006442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	f043 0220 	orr.w	r2, r3, #32
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e007      	b.n	8006476 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006470:	2b80      	cmp	r3, #128	; 0x80
 8006472:	d1ca      	bne.n	800640a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b084      	sub	sp, #16
 8006482:	af00      	add	r7, sp, #0
 8006484:	60f8      	str	r0, [r7, #12]
 8006486:	60b9      	str	r1, [r7, #8]
 8006488:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800648a:	e02d      	b.n	80064e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 f88d 	bl	80065ac <I2C_IsAcknowledgeFailed>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d001      	beq.n	800649c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e02d      	b.n	80064f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a2:	d021      	beq.n	80064e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064a4:	f7fe fe14 	bl	80050d0 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d302      	bcc.n	80064ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d116      	bne.n	80064e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2220      	movs	r2, #32
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d4:	f043 0220 	orr.w	r2, r3, #32
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e007      	b.n	80064f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	695b      	ldr	r3, [r3, #20]
 80064ee:	f003 0304 	and.w	r3, r3, #4
 80064f2:	2b04      	cmp	r3, #4
 80064f4:	d1ca      	bne.n	800648c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800650c:	e042      	b.n	8006594 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	f003 0310 	and.w	r3, r3, #16
 8006518:	2b10      	cmp	r3, #16
 800651a:	d119      	bne.n	8006550 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f06f 0210 	mvn.w	r2, #16
 8006524:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2220      	movs	r2, #32
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e029      	b.n	80065a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006550:	f7fe fdbe 	bl	80050d0 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	429a      	cmp	r2, r3
 800655e:	d302      	bcc.n	8006566 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d116      	bne.n	8006594 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2220      	movs	r2, #32
 8006570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006580:	f043 0220 	orr.w	r2, r3, #32
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e007      	b.n	80065a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659e:	2b40      	cmp	r3, #64	; 0x40
 80065a0:	d1b5      	bne.n	800650e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065c2:	d11b      	bne.n	80065fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e8:	f043 0204 	orr.w	r2, r3, #4
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e000      	b.n	80065fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	bc80      	pop	{r7}
 8006606:	4770      	bx	lr

08006608 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e272      	b.n	8006b00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	f000 8087 	beq.w	8006736 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006628:	4b92      	ldr	r3, [pc, #584]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f003 030c 	and.w	r3, r3, #12
 8006630:	2b04      	cmp	r3, #4
 8006632:	d00c      	beq.n	800664e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006634:	4b8f      	ldr	r3, [pc, #572]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f003 030c 	and.w	r3, r3, #12
 800663c:	2b08      	cmp	r3, #8
 800663e:	d112      	bne.n	8006666 <HAL_RCC_OscConfig+0x5e>
 8006640:	4b8c      	ldr	r3, [pc, #560]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800664c:	d10b      	bne.n	8006666 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800664e:	4b89      	ldr	r3, [pc, #548]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d06c      	beq.n	8006734 <HAL_RCC_OscConfig+0x12c>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d168      	bne.n	8006734 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e24c      	b.n	8006b00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800666e:	d106      	bne.n	800667e <HAL_RCC_OscConfig+0x76>
 8006670:	4b80      	ldr	r3, [pc, #512]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a7f      	ldr	r2, [pc, #508]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 8006676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800667a:	6013      	str	r3, [r2, #0]
 800667c:	e02e      	b.n	80066dc <HAL_RCC_OscConfig+0xd4>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d10c      	bne.n	80066a0 <HAL_RCC_OscConfig+0x98>
 8006686:	4b7b      	ldr	r3, [pc, #492]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a7a      	ldr	r2, [pc, #488]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 800668c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006690:	6013      	str	r3, [r2, #0]
 8006692:	4b78      	ldr	r3, [pc, #480]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a77      	ldr	r2, [pc, #476]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 8006698:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	e01d      	b.n	80066dc <HAL_RCC_OscConfig+0xd4>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066a8:	d10c      	bne.n	80066c4 <HAL_RCC_OscConfig+0xbc>
 80066aa:	4b72      	ldr	r3, [pc, #456]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a71      	ldr	r2, [pc, #452]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 80066b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066b4:	6013      	str	r3, [r2, #0]
 80066b6:	4b6f      	ldr	r3, [pc, #444]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a6e      	ldr	r2, [pc, #440]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 80066bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066c0:	6013      	str	r3, [r2, #0]
 80066c2:	e00b      	b.n	80066dc <HAL_RCC_OscConfig+0xd4>
 80066c4:	4b6b      	ldr	r3, [pc, #428]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a6a      	ldr	r2, [pc, #424]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 80066ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066ce:	6013      	str	r3, [r2, #0]
 80066d0:	4b68      	ldr	r3, [pc, #416]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a67      	ldr	r2, [pc, #412]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 80066d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d013      	beq.n	800670c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066e4:	f7fe fcf4 	bl	80050d0 <HAL_GetTick>
 80066e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066ea:	e008      	b.n	80066fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066ec:	f7fe fcf0 	bl	80050d0 <HAL_GetTick>
 80066f0:	4602      	mov	r2, r0
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	2b64      	cmp	r3, #100	; 0x64
 80066f8:	d901      	bls.n	80066fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e200      	b.n	8006b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066fe:	4b5d      	ldr	r3, [pc, #372]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d0f0      	beq.n	80066ec <HAL_RCC_OscConfig+0xe4>
 800670a:	e014      	b.n	8006736 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800670c:	f7fe fce0 	bl	80050d0 <HAL_GetTick>
 8006710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006712:	e008      	b.n	8006726 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006714:	f7fe fcdc 	bl	80050d0 <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	2b64      	cmp	r3, #100	; 0x64
 8006720:	d901      	bls.n	8006726 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e1ec      	b.n	8006b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006726:	4b53      	ldr	r3, [pc, #332]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1f0      	bne.n	8006714 <HAL_RCC_OscConfig+0x10c>
 8006732:	e000      	b.n	8006736 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d063      	beq.n	800680a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006742:	4b4c      	ldr	r3, [pc, #304]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f003 030c 	and.w	r3, r3, #12
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00b      	beq.n	8006766 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800674e:	4b49      	ldr	r3, [pc, #292]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f003 030c 	and.w	r3, r3, #12
 8006756:	2b08      	cmp	r3, #8
 8006758:	d11c      	bne.n	8006794 <HAL_RCC_OscConfig+0x18c>
 800675a:	4b46      	ldr	r3, [pc, #280]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d116      	bne.n	8006794 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006766:	4b43      	ldr	r3, [pc, #268]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0302 	and.w	r3, r3, #2
 800676e:	2b00      	cmp	r3, #0
 8006770:	d005      	beq.n	800677e <HAL_RCC_OscConfig+0x176>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d001      	beq.n	800677e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e1c0      	b.n	8006b00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800677e:	4b3d      	ldr	r3, [pc, #244]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	00db      	lsls	r3, r3, #3
 800678c:	4939      	ldr	r1, [pc, #228]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 800678e:	4313      	orrs	r3, r2
 8006790:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006792:	e03a      	b.n	800680a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d020      	beq.n	80067de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800679c:	4b36      	ldr	r3, [pc, #216]	; (8006878 <HAL_RCC_OscConfig+0x270>)
 800679e:	2201      	movs	r2, #1
 80067a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067a2:	f7fe fc95 	bl	80050d0 <HAL_GetTick>
 80067a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067a8:	e008      	b.n	80067bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067aa:	f7fe fc91 	bl	80050d0 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d901      	bls.n	80067bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e1a1      	b.n	8006b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067bc:	4b2d      	ldr	r3, [pc, #180]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d0f0      	beq.n	80067aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067c8:	4b2a      	ldr	r3, [pc, #168]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	00db      	lsls	r3, r3, #3
 80067d6:	4927      	ldr	r1, [pc, #156]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	600b      	str	r3, [r1, #0]
 80067dc:	e015      	b.n	800680a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067de:	4b26      	ldr	r3, [pc, #152]	; (8006878 <HAL_RCC_OscConfig+0x270>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067e4:	f7fe fc74 	bl	80050d0 <HAL_GetTick>
 80067e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067ea:	e008      	b.n	80067fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067ec:	f7fe fc70 	bl	80050d0 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e180      	b.n	8006b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067fe:	4b1d      	ldr	r3, [pc, #116]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1f0      	bne.n	80067ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0308 	and.w	r3, r3, #8
 8006812:	2b00      	cmp	r3, #0
 8006814:	d03a      	beq.n	800688c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d019      	beq.n	8006852 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800681e:	4b17      	ldr	r3, [pc, #92]	; (800687c <HAL_RCC_OscConfig+0x274>)
 8006820:	2201      	movs	r2, #1
 8006822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006824:	f7fe fc54 	bl	80050d0 <HAL_GetTick>
 8006828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800682a:	e008      	b.n	800683e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800682c:	f7fe fc50 	bl	80050d0 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b02      	cmp	r3, #2
 8006838:	d901      	bls.n	800683e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e160      	b.n	8006b00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800683e:	4b0d      	ldr	r3, [pc, #52]	; (8006874 <HAL_RCC_OscConfig+0x26c>)
 8006840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	2b00      	cmp	r3, #0
 8006848:	d0f0      	beq.n	800682c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800684a:	2001      	movs	r0, #1
 800684c:	f000 fad8 	bl	8006e00 <RCC_Delay>
 8006850:	e01c      	b.n	800688c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006852:	4b0a      	ldr	r3, [pc, #40]	; (800687c <HAL_RCC_OscConfig+0x274>)
 8006854:	2200      	movs	r2, #0
 8006856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006858:	f7fe fc3a 	bl	80050d0 <HAL_GetTick>
 800685c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800685e:	e00f      	b.n	8006880 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006860:	f7fe fc36 	bl	80050d0 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b02      	cmp	r3, #2
 800686c:	d908      	bls.n	8006880 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e146      	b.n	8006b00 <HAL_RCC_OscConfig+0x4f8>
 8006872:	bf00      	nop
 8006874:	40021000 	.word	0x40021000
 8006878:	42420000 	.word	0x42420000
 800687c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006880:	4b92      	ldr	r3, [pc, #584]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 8006882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006884:	f003 0302 	and.w	r3, r3, #2
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1e9      	bne.n	8006860 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b00      	cmp	r3, #0
 8006896:	f000 80a6 	beq.w	80069e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800689a:	2300      	movs	r3, #0
 800689c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800689e:	4b8b      	ldr	r3, [pc, #556]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d10d      	bne.n	80068c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068aa:	4b88      	ldr	r3, [pc, #544]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	4a87      	ldr	r2, [pc, #540]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 80068b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068b4:	61d3      	str	r3, [r2, #28]
 80068b6:	4b85      	ldr	r3, [pc, #532]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068be:	60bb      	str	r3, [r7, #8]
 80068c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068c2:	2301      	movs	r3, #1
 80068c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068c6:	4b82      	ldr	r3, [pc, #520]	; (8006ad0 <HAL_RCC_OscConfig+0x4c8>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d118      	bne.n	8006904 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068d2:	4b7f      	ldr	r3, [pc, #508]	; (8006ad0 <HAL_RCC_OscConfig+0x4c8>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a7e      	ldr	r2, [pc, #504]	; (8006ad0 <HAL_RCC_OscConfig+0x4c8>)
 80068d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068de:	f7fe fbf7 	bl	80050d0 <HAL_GetTick>
 80068e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068e4:	e008      	b.n	80068f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068e6:	f7fe fbf3 	bl	80050d0 <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	2b64      	cmp	r3, #100	; 0x64
 80068f2:	d901      	bls.n	80068f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e103      	b.n	8006b00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068f8:	4b75      	ldr	r3, [pc, #468]	; (8006ad0 <HAL_RCC_OscConfig+0x4c8>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006900:	2b00      	cmp	r3, #0
 8006902:	d0f0      	beq.n	80068e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d106      	bne.n	800691a <HAL_RCC_OscConfig+0x312>
 800690c:	4b6f      	ldr	r3, [pc, #444]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 800690e:	6a1b      	ldr	r3, [r3, #32]
 8006910:	4a6e      	ldr	r2, [pc, #440]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 8006912:	f043 0301 	orr.w	r3, r3, #1
 8006916:	6213      	str	r3, [r2, #32]
 8006918:	e02d      	b.n	8006976 <HAL_RCC_OscConfig+0x36e>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10c      	bne.n	800693c <HAL_RCC_OscConfig+0x334>
 8006922:	4b6a      	ldr	r3, [pc, #424]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	4a69      	ldr	r2, [pc, #420]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 8006928:	f023 0301 	bic.w	r3, r3, #1
 800692c:	6213      	str	r3, [r2, #32]
 800692e:	4b67      	ldr	r3, [pc, #412]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	4a66      	ldr	r2, [pc, #408]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 8006934:	f023 0304 	bic.w	r3, r3, #4
 8006938:	6213      	str	r3, [r2, #32]
 800693a:	e01c      	b.n	8006976 <HAL_RCC_OscConfig+0x36e>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	2b05      	cmp	r3, #5
 8006942:	d10c      	bne.n	800695e <HAL_RCC_OscConfig+0x356>
 8006944:	4b61      	ldr	r3, [pc, #388]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 8006946:	6a1b      	ldr	r3, [r3, #32]
 8006948:	4a60      	ldr	r2, [pc, #384]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 800694a:	f043 0304 	orr.w	r3, r3, #4
 800694e:	6213      	str	r3, [r2, #32]
 8006950:	4b5e      	ldr	r3, [pc, #376]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	4a5d      	ldr	r2, [pc, #372]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 8006956:	f043 0301 	orr.w	r3, r3, #1
 800695a:	6213      	str	r3, [r2, #32]
 800695c:	e00b      	b.n	8006976 <HAL_RCC_OscConfig+0x36e>
 800695e:	4b5b      	ldr	r3, [pc, #364]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	4a5a      	ldr	r2, [pc, #360]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 8006964:	f023 0301 	bic.w	r3, r3, #1
 8006968:	6213      	str	r3, [r2, #32]
 800696a:	4b58      	ldr	r3, [pc, #352]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	4a57      	ldr	r2, [pc, #348]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 8006970:	f023 0304 	bic.w	r3, r3, #4
 8006974:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d015      	beq.n	80069aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800697e:	f7fe fba7 	bl	80050d0 <HAL_GetTick>
 8006982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006984:	e00a      	b.n	800699c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006986:	f7fe fba3 	bl	80050d0 <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	f241 3288 	movw	r2, #5000	; 0x1388
 8006994:	4293      	cmp	r3, r2
 8006996:	d901      	bls.n	800699c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e0b1      	b.n	8006b00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800699c:	4b4b      	ldr	r3, [pc, #300]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d0ee      	beq.n	8006986 <HAL_RCC_OscConfig+0x37e>
 80069a8:	e014      	b.n	80069d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069aa:	f7fe fb91 	bl	80050d0 <HAL_GetTick>
 80069ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069b0:	e00a      	b.n	80069c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069b2:	f7fe fb8d 	bl	80050d0 <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d901      	bls.n	80069c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e09b      	b.n	8006b00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069c8:	4b40      	ldr	r3, [pc, #256]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 80069ca:	6a1b      	ldr	r3, [r3, #32]
 80069cc:	f003 0302 	and.w	r3, r3, #2
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1ee      	bne.n	80069b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80069d4:	7dfb      	ldrb	r3, [r7, #23]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d105      	bne.n	80069e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069da:	4b3c      	ldr	r3, [pc, #240]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	4a3b      	ldr	r2, [pc, #236]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 80069e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f000 8087 	beq.w	8006afe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80069f0:	4b36      	ldr	r3, [pc, #216]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f003 030c 	and.w	r3, r3, #12
 80069f8:	2b08      	cmp	r3, #8
 80069fa:	d061      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d146      	bne.n	8006a92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a04:	4b33      	ldr	r3, [pc, #204]	; (8006ad4 <HAL_RCC_OscConfig+0x4cc>)
 8006a06:	2200      	movs	r2, #0
 8006a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a0a:	f7fe fb61 	bl	80050d0 <HAL_GetTick>
 8006a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a10:	e008      	b.n	8006a24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a12:	f7fe fb5d 	bl	80050d0 <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d901      	bls.n	8006a24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e06d      	b.n	8006b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a24:	4b29      	ldr	r3, [pc, #164]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1f0      	bne.n	8006a12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a1b      	ldr	r3, [r3, #32]
 8006a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a38:	d108      	bne.n	8006a4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006a3a:	4b24      	ldr	r3, [pc, #144]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	4921      	ldr	r1, [pc, #132]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a4c:	4b1f      	ldr	r3, [pc, #124]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a19      	ldr	r1, [r3, #32]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5c:	430b      	orrs	r3, r1
 8006a5e:	491b      	ldr	r1, [pc, #108]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a64:	4b1b      	ldr	r3, [pc, #108]	; (8006ad4 <HAL_RCC_OscConfig+0x4cc>)
 8006a66:	2201      	movs	r2, #1
 8006a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a6a:	f7fe fb31 	bl	80050d0 <HAL_GetTick>
 8006a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a70:	e008      	b.n	8006a84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a72:	f7fe fb2d 	bl	80050d0 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d901      	bls.n	8006a84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e03d      	b.n	8006b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a84:	4b11      	ldr	r3, [pc, #68]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d0f0      	beq.n	8006a72 <HAL_RCC_OscConfig+0x46a>
 8006a90:	e035      	b.n	8006afe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a92:	4b10      	ldr	r3, [pc, #64]	; (8006ad4 <HAL_RCC_OscConfig+0x4cc>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a98:	f7fe fb1a 	bl	80050d0 <HAL_GetTick>
 8006a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a9e:	e008      	b.n	8006ab2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aa0:	f7fe fb16 	bl	80050d0 <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d901      	bls.n	8006ab2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e026      	b.n	8006b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ab2:	4b06      	ldr	r3, [pc, #24]	; (8006acc <HAL_RCC_OscConfig+0x4c4>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1f0      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x498>
 8006abe:	e01e      	b.n	8006afe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	69db      	ldr	r3, [r3, #28]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d107      	bne.n	8006ad8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e019      	b.n	8006b00 <HAL_RCC_OscConfig+0x4f8>
 8006acc:	40021000 	.word	0x40021000
 8006ad0:	40007000 	.word	0x40007000
 8006ad4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006ad8:	4b0b      	ldr	r3, [pc, #44]	; (8006b08 <HAL_RCC_OscConfig+0x500>)
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d106      	bne.n	8006afa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d001      	beq.n	8006afe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e000      	b.n	8006b00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3718      	adds	r7, #24
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	40021000 	.word	0x40021000

08006b0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b084      	sub	sp, #16
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d101      	bne.n	8006b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e0d0      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b20:	4b6a      	ldr	r3, [pc, #424]	; (8006ccc <HAL_RCC_ClockConfig+0x1c0>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0307 	and.w	r3, r3, #7
 8006b28:	683a      	ldr	r2, [r7, #0]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d910      	bls.n	8006b50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b2e:	4b67      	ldr	r3, [pc, #412]	; (8006ccc <HAL_RCC_ClockConfig+0x1c0>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f023 0207 	bic.w	r2, r3, #7
 8006b36:	4965      	ldr	r1, [pc, #404]	; (8006ccc <HAL_RCC_ClockConfig+0x1c0>)
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b3e:	4b63      	ldr	r3, [pc, #396]	; (8006ccc <HAL_RCC_ClockConfig+0x1c0>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0307 	and.w	r3, r3, #7
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d001      	beq.n	8006b50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e0b8      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0302 	and.w	r3, r3, #2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d020      	beq.n	8006b9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0304 	and.w	r3, r3, #4
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d005      	beq.n	8006b74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b68:	4b59      	ldr	r3, [pc, #356]	; (8006cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	4a58      	ldr	r2, [pc, #352]	; (8006cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006b72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0308 	and.w	r3, r3, #8
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d005      	beq.n	8006b8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b80:	4b53      	ldr	r3, [pc, #332]	; (8006cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	4a52      	ldr	r2, [pc, #328]	; (8006cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006b8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b8c:	4b50      	ldr	r3, [pc, #320]	; (8006cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	494d      	ldr	r1, [pc, #308]	; (8006cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d040      	beq.n	8006c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d107      	bne.n	8006bc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bb2:	4b47      	ldr	r3, [pc, #284]	; (8006cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d115      	bne.n	8006bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e07f      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d107      	bne.n	8006bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bca:	4b41      	ldr	r3, [pc, #260]	; (8006cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d109      	bne.n	8006bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e073      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bda:	4b3d      	ldr	r3, [pc, #244]	; (8006cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0302 	and.w	r3, r3, #2
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d101      	bne.n	8006bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e06b      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bea:	4b39      	ldr	r3, [pc, #228]	; (8006cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f023 0203 	bic.w	r2, r3, #3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	4936      	ldr	r1, [pc, #216]	; (8006cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006bfc:	f7fe fa68 	bl	80050d0 <HAL_GetTick>
 8006c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c02:	e00a      	b.n	8006c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c04:	f7fe fa64 	bl	80050d0 <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d901      	bls.n	8006c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c16:	2303      	movs	r3, #3
 8006c18:	e053      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c1a:	4b2d      	ldr	r3, [pc, #180]	; (8006cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f003 020c 	and.w	r2, r3, #12
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d1eb      	bne.n	8006c04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c2c:	4b27      	ldr	r3, [pc, #156]	; (8006ccc <HAL_RCC_ClockConfig+0x1c0>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0307 	and.w	r3, r3, #7
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d210      	bcs.n	8006c5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c3a:	4b24      	ldr	r3, [pc, #144]	; (8006ccc <HAL_RCC_ClockConfig+0x1c0>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f023 0207 	bic.w	r2, r3, #7
 8006c42:	4922      	ldr	r1, [pc, #136]	; (8006ccc <HAL_RCC_ClockConfig+0x1c0>)
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c4a:	4b20      	ldr	r3, [pc, #128]	; (8006ccc <HAL_RCC_ClockConfig+0x1c0>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0307 	and.w	r3, r3, #7
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d001      	beq.n	8006c5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e032      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0304 	and.w	r3, r3, #4
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d008      	beq.n	8006c7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c68:	4b19      	ldr	r3, [pc, #100]	; (8006cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	4916      	ldr	r1, [pc, #88]	; (8006cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0308 	and.w	r3, r3, #8
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d009      	beq.n	8006c9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c86:	4b12      	ldr	r3, [pc, #72]	; (8006cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	00db      	lsls	r3, r3, #3
 8006c94:	490e      	ldr	r1, [pc, #56]	; (8006cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c9a:	f000 f821 	bl	8006ce0 <HAL_RCC_GetSysClockFreq>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	4b0b      	ldr	r3, [pc, #44]	; (8006cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	091b      	lsrs	r3, r3, #4
 8006ca6:	f003 030f 	and.w	r3, r3, #15
 8006caa:	490a      	ldr	r1, [pc, #40]	; (8006cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8006cac:	5ccb      	ldrb	r3, [r1, r3]
 8006cae:	fa22 f303 	lsr.w	r3, r2, r3
 8006cb2:	4a09      	ldr	r2, [pc, #36]	; (8006cd8 <HAL_RCC_ClockConfig+0x1cc>)
 8006cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006cb6:	4b09      	ldr	r3, [pc, #36]	; (8006cdc <HAL_RCC_ClockConfig+0x1d0>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fe f9c6 	bl	800504c <HAL_InitTick>

  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	40022000 	.word	0x40022000
 8006cd0:	40021000 	.word	0x40021000
 8006cd4:	0800d0ec 	.word	0x0800d0ec
 8006cd8:	20000094 	.word	0x20000094
 8006cdc:	20000098 	.word	0x20000098

08006ce0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ce0:	b490      	push	{r4, r7}
 8006ce2:	b08a      	sub	sp, #40	; 0x28
 8006ce4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006ce6:	4b29      	ldr	r3, [pc, #164]	; (8006d8c <HAL_RCC_GetSysClockFreq+0xac>)
 8006ce8:	1d3c      	adds	r4, r7, #4
 8006cea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006cec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006cf0:	f240 2301 	movw	r3, #513	; 0x201
 8006cf4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	61fb      	str	r3, [r7, #28]
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	61bb      	str	r3, [r7, #24]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	627b      	str	r3, [r7, #36]	; 0x24
 8006d02:	2300      	movs	r3, #0
 8006d04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006d0a:	4b21      	ldr	r3, [pc, #132]	; (8006d90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	f003 030c 	and.w	r3, r3, #12
 8006d16:	2b04      	cmp	r3, #4
 8006d18:	d002      	beq.n	8006d20 <HAL_RCC_GetSysClockFreq+0x40>
 8006d1a:	2b08      	cmp	r3, #8
 8006d1c:	d003      	beq.n	8006d26 <HAL_RCC_GetSysClockFreq+0x46>
 8006d1e:	e02b      	b.n	8006d78 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006d20:	4b1c      	ldr	r3, [pc, #112]	; (8006d94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006d22:	623b      	str	r3, [r7, #32]
      break;
 8006d24:	e02b      	b.n	8006d7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	0c9b      	lsrs	r3, r3, #18
 8006d2a:	f003 030f 	and.w	r3, r3, #15
 8006d2e:	3328      	adds	r3, #40	; 0x28
 8006d30:	443b      	add	r3, r7
 8006d32:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006d36:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d012      	beq.n	8006d68 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006d42:	4b13      	ldr	r3, [pc, #76]	; (8006d90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	0c5b      	lsrs	r3, r3, #17
 8006d48:	f003 0301 	and.w	r3, r3, #1
 8006d4c:	3328      	adds	r3, #40	; 0x28
 8006d4e:	443b      	add	r3, r7
 8006d50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006d54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	4a0e      	ldr	r2, [pc, #56]	; (8006d94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006d5a:	fb03 f202 	mul.w	r2, r3, r2
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d64:	627b      	str	r3, [r7, #36]	; 0x24
 8006d66:	e004      	b.n	8006d72 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	4a0b      	ldr	r2, [pc, #44]	; (8006d98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d6c:	fb02 f303 	mul.w	r3, r2, r3
 8006d70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d74:	623b      	str	r3, [r7, #32]
      break;
 8006d76:	e002      	b.n	8006d7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006d78:	4b06      	ldr	r3, [pc, #24]	; (8006d94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006d7a:	623b      	str	r3, [r7, #32]
      break;
 8006d7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3728      	adds	r7, #40	; 0x28
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bc90      	pop	{r4, r7}
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	0800ce00 	.word	0x0800ce00
 8006d90:	40021000 	.word	0x40021000
 8006d94:	007a1200 	.word	0x007a1200
 8006d98:	003d0900 	.word	0x003d0900

08006d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006da0:	4b02      	ldr	r3, [pc, #8]	; (8006dac <HAL_RCC_GetHCLKFreq+0x10>)
 8006da2:	681b      	ldr	r3, [r3, #0]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bc80      	pop	{r7}
 8006daa:	4770      	bx	lr
 8006dac:	20000094 	.word	0x20000094

08006db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006db4:	f7ff fff2 	bl	8006d9c <HAL_RCC_GetHCLKFreq>
 8006db8:	4602      	mov	r2, r0
 8006dba:	4b05      	ldr	r3, [pc, #20]	; (8006dd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	0a1b      	lsrs	r3, r3, #8
 8006dc0:	f003 0307 	and.w	r3, r3, #7
 8006dc4:	4903      	ldr	r1, [pc, #12]	; (8006dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006dc6:	5ccb      	ldrb	r3, [r1, r3]
 8006dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	40021000 	.word	0x40021000
 8006dd4:	0800d0fc 	.word	0x0800d0fc

08006dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006ddc:	f7ff ffde 	bl	8006d9c <HAL_RCC_GetHCLKFreq>
 8006de0:	4602      	mov	r2, r0
 8006de2:	4b05      	ldr	r3, [pc, #20]	; (8006df8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	0adb      	lsrs	r3, r3, #11
 8006de8:	f003 0307 	and.w	r3, r3, #7
 8006dec:	4903      	ldr	r1, [pc, #12]	; (8006dfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dee:	5ccb      	ldrb	r3, [r1, r3]
 8006df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	40021000 	.word	0x40021000
 8006dfc:	0800d0fc 	.word	0x0800d0fc

08006e00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006e08:	4b0a      	ldr	r3, [pc, #40]	; (8006e34 <RCC_Delay+0x34>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a0a      	ldr	r2, [pc, #40]	; (8006e38 <RCC_Delay+0x38>)
 8006e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e12:	0a5b      	lsrs	r3, r3, #9
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	fb02 f303 	mul.w	r3, r2, r3
 8006e1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006e1c:	bf00      	nop
  }
  while (Delay --);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	1e5a      	subs	r2, r3, #1
 8006e22:	60fa      	str	r2, [r7, #12]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1f9      	bne.n	8006e1c <RCC_Delay+0x1c>
}
 8006e28:	bf00      	nop
 8006e2a:	bf00      	nop
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bc80      	pop	{r7}
 8006e32:	4770      	bx	lr
 8006e34:	20000094 	.word	0x20000094
 8006e38:	10624dd3 	.word	0x10624dd3

08006e3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e041      	b.n	8006ed2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d106      	bne.n	8006e68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7fd ffbe 	bl	8004de4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	3304      	adds	r3, #4
 8006e78:	4619      	mov	r1, r3
 8006e7a:	4610      	mov	r0, r2
 8006e7c:	f000 fc28 	bl	80076d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
	...

08006edc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d001      	beq.n	8006ef4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e03a      	b.n	8006f6a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68da      	ldr	r2, [r3, #12]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f042 0201 	orr.w	r2, r2, #1
 8006f0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a18      	ldr	r2, [pc, #96]	; (8006f74 <HAL_TIM_Base_Start_IT+0x98>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d00e      	beq.n	8006f34 <HAL_TIM_Base_Start_IT+0x58>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f1e:	d009      	beq.n	8006f34 <HAL_TIM_Base_Start_IT+0x58>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a14      	ldr	r2, [pc, #80]	; (8006f78 <HAL_TIM_Base_Start_IT+0x9c>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d004      	beq.n	8006f34 <HAL_TIM_Base_Start_IT+0x58>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a13      	ldr	r2, [pc, #76]	; (8006f7c <HAL_TIM_Base_Start_IT+0xa0>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d111      	bne.n	8006f58 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f003 0307 	and.w	r3, r3, #7
 8006f3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2b06      	cmp	r3, #6
 8006f44:	d010      	beq.n	8006f68 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f042 0201 	orr.w	r2, r2, #1
 8006f54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f56:	e007      	b.n	8006f68 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f042 0201 	orr.w	r2, r2, #1
 8006f66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bc80      	pop	{r7}
 8006f72:	4770      	bx	lr
 8006f74:	40012c00 	.word	0x40012c00
 8006f78:	40000400 	.word	0x40000400
 8006f7c:	40000800 	.word	0x40000800

08006f80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e041      	b.n	8007016 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d106      	bne.n	8006fac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f839 	bl	800701e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2202      	movs	r2, #2
 8006fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	3304      	adds	r3, #4
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	4610      	mov	r0, r2
 8006fc0:	f000 fb86 	bl	80076d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800701e:	b480      	push	{r7}
 8007020:	b083      	sub	sp, #12
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007026:	bf00      	nop
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	bc80      	pop	{r7}
 800702e:	4770      	bx	lr

08007030 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d109      	bne.n	8007054 <HAL_TIM_PWM_Start+0x24>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007046:	b2db      	uxtb	r3, r3
 8007048:	2b01      	cmp	r3, #1
 800704a:	bf14      	ite	ne
 800704c:	2301      	movne	r3, #1
 800704e:	2300      	moveq	r3, #0
 8007050:	b2db      	uxtb	r3, r3
 8007052:	e022      	b.n	800709a <HAL_TIM_PWM_Start+0x6a>
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	2b04      	cmp	r3, #4
 8007058:	d109      	bne.n	800706e <HAL_TIM_PWM_Start+0x3e>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b01      	cmp	r3, #1
 8007064:	bf14      	ite	ne
 8007066:	2301      	movne	r3, #1
 8007068:	2300      	moveq	r3, #0
 800706a:	b2db      	uxtb	r3, r3
 800706c:	e015      	b.n	800709a <HAL_TIM_PWM_Start+0x6a>
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2b08      	cmp	r3, #8
 8007072:	d109      	bne.n	8007088 <HAL_TIM_PWM_Start+0x58>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b01      	cmp	r3, #1
 800707e:	bf14      	ite	ne
 8007080:	2301      	movne	r3, #1
 8007082:	2300      	moveq	r3, #0
 8007084:	b2db      	uxtb	r3, r3
 8007086:	e008      	b.n	800709a <HAL_TIM_PWM_Start+0x6a>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800708e:	b2db      	uxtb	r3, r3
 8007090:	2b01      	cmp	r3, #1
 8007092:	bf14      	ite	ne
 8007094:	2301      	movne	r3, #1
 8007096:	2300      	moveq	r3, #0
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b00      	cmp	r3, #0
 800709c:	d001      	beq.n	80070a2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e05e      	b.n	8007160 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d104      	bne.n	80070b2 <HAL_TIM_PWM_Start+0x82>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2202      	movs	r2, #2
 80070ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070b0:	e013      	b.n	80070da <HAL_TIM_PWM_Start+0xaa>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2b04      	cmp	r3, #4
 80070b6:	d104      	bne.n	80070c2 <HAL_TIM_PWM_Start+0x92>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2202      	movs	r2, #2
 80070bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070c0:	e00b      	b.n	80070da <HAL_TIM_PWM_Start+0xaa>
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2b08      	cmp	r3, #8
 80070c6:	d104      	bne.n	80070d2 <HAL_TIM_PWM_Start+0xa2>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070d0:	e003      	b.n	80070da <HAL_TIM_PWM_Start+0xaa>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2202      	movs	r2, #2
 80070d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2201      	movs	r2, #1
 80070e0:	6839      	ldr	r1, [r7, #0]
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 fd74 	bl	8007bd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a1e      	ldr	r2, [pc, #120]	; (8007168 <HAL_TIM_PWM_Start+0x138>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d107      	bne.n	8007102 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007100:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a18      	ldr	r2, [pc, #96]	; (8007168 <HAL_TIM_PWM_Start+0x138>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d00e      	beq.n	800712a <HAL_TIM_PWM_Start+0xfa>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007114:	d009      	beq.n	800712a <HAL_TIM_PWM_Start+0xfa>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a14      	ldr	r2, [pc, #80]	; (800716c <HAL_TIM_PWM_Start+0x13c>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d004      	beq.n	800712a <HAL_TIM_PWM_Start+0xfa>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a12      	ldr	r2, [pc, #72]	; (8007170 <HAL_TIM_PWM_Start+0x140>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d111      	bne.n	800714e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f003 0307 	and.w	r3, r3, #7
 8007134:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2b06      	cmp	r3, #6
 800713a:	d010      	beq.n	800715e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f042 0201 	orr.w	r2, r2, #1
 800714a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800714c:	e007      	b.n	800715e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f042 0201 	orr.w	r2, r2, #1
 800715c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	40012c00 	.word	0x40012c00
 800716c:	40000400 	.word	0x40000400
 8007170:	40000800 	.word	0x40000800

08007174 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	f003 0302 	and.w	r3, r3, #2
 8007186:	2b02      	cmp	r3, #2
 8007188:	d122      	bne.n	80071d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	f003 0302 	and.w	r3, r3, #2
 8007194:	2b02      	cmp	r3, #2
 8007196:	d11b      	bne.n	80071d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f06f 0202 	mvn.w	r2, #2
 80071a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	f003 0303 	and.w	r3, r3, #3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fa6f 	bl	800769a <HAL_TIM_IC_CaptureCallback>
 80071bc:	e005      	b.n	80071ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fa62 	bl	8007688 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fa71 	bl	80076ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	f003 0304 	and.w	r3, r3, #4
 80071da:	2b04      	cmp	r3, #4
 80071dc:	d122      	bne.n	8007224 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	f003 0304 	and.w	r3, r3, #4
 80071e8:	2b04      	cmp	r3, #4
 80071ea:	d11b      	bne.n	8007224 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f06f 0204 	mvn.w	r2, #4
 80071f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2202      	movs	r2, #2
 80071fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fa45 	bl	800769a <HAL_TIM_IC_CaptureCallback>
 8007210:	e005      	b.n	800721e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fa38 	bl	8007688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 fa47 	bl	80076ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	f003 0308 	and.w	r3, r3, #8
 800722e:	2b08      	cmp	r3, #8
 8007230:	d122      	bne.n	8007278 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	f003 0308 	and.w	r3, r3, #8
 800723c:	2b08      	cmp	r3, #8
 800723e:	d11b      	bne.n	8007278 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f06f 0208 	mvn.w	r2, #8
 8007248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2204      	movs	r2, #4
 800724e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	69db      	ldr	r3, [r3, #28]
 8007256:	f003 0303 	and.w	r3, r3, #3
 800725a:	2b00      	cmp	r3, #0
 800725c:	d003      	beq.n	8007266 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fa1b 	bl	800769a <HAL_TIM_IC_CaptureCallback>
 8007264:	e005      	b.n	8007272 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fa0e 	bl	8007688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fa1d 	bl	80076ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	f003 0310 	and.w	r3, r3, #16
 8007282:	2b10      	cmp	r3, #16
 8007284:	d122      	bne.n	80072cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	f003 0310 	and.w	r3, r3, #16
 8007290:	2b10      	cmp	r3, #16
 8007292:	d11b      	bne.n	80072cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f06f 0210 	mvn.w	r2, #16
 800729c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2208      	movs	r2, #8
 80072a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d003      	beq.n	80072ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f9f1 	bl	800769a <HAL_TIM_IC_CaptureCallback>
 80072b8:	e005      	b.n	80072c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f9e4 	bl	8007688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f9f3 	bl	80076ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d10e      	bne.n	80072f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d107      	bne.n	80072f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f06f 0201 	mvn.w	r2, #1
 80072f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7fa fa2c 	bl	8001750 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007302:	2b80      	cmp	r3, #128	; 0x80
 8007304:	d10e      	bne.n	8007324 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007310:	2b80      	cmp	r3, #128	; 0x80
 8007312:	d107      	bne.n	8007324 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800731c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fce1 	bl	8007ce6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732e:	2b40      	cmp	r3, #64	; 0x40
 8007330:	d10e      	bne.n	8007350 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733c:	2b40      	cmp	r3, #64	; 0x40
 800733e:	d107      	bne.n	8007350 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f9b7 	bl	80076be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	691b      	ldr	r3, [r3, #16]
 8007356:	f003 0320 	and.w	r3, r3, #32
 800735a:	2b20      	cmp	r3, #32
 800735c:	d10e      	bne.n	800737c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	f003 0320 	and.w	r3, r3, #32
 8007368:	2b20      	cmp	r3, #32
 800736a:	d107      	bne.n	800737c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f06f 0220 	mvn.w	r2, #32
 8007374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fcac 	bl	8007cd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800737c:	bf00      	nop
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007396:	2b01      	cmp	r3, #1
 8007398:	d101      	bne.n	800739e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800739a:	2302      	movs	r3, #2
 800739c:	e0ac      	b.n	80074f8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b0c      	cmp	r3, #12
 80073aa:	f200 809f 	bhi.w	80074ec <HAL_TIM_PWM_ConfigChannel+0x168>
 80073ae:	a201      	add	r2, pc, #4	; (adr r2, 80073b4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80073b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b4:	080073e9 	.word	0x080073e9
 80073b8:	080074ed 	.word	0x080074ed
 80073bc:	080074ed 	.word	0x080074ed
 80073c0:	080074ed 	.word	0x080074ed
 80073c4:	08007429 	.word	0x08007429
 80073c8:	080074ed 	.word	0x080074ed
 80073cc:	080074ed 	.word	0x080074ed
 80073d0:	080074ed 	.word	0x080074ed
 80073d4:	0800746b 	.word	0x0800746b
 80073d8:	080074ed 	.word	0x080074ed
 80073dc:	080074ed 	.word	0x080074ed
 80073e0:	080074ed 	.word	0x080074ed
 80073e4:	080074ab 	.word	0x080074ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68b9      	ldr	r1, [r7, #8]
 80073ee:	4618      	mov	r0, r3
 80073f0:	f000 f9d0 	bl	8007794 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	699a      	ldr	r2, [r3, #24]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f042 0208 	orr.w	r2, r2, #8
 8007402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	699a      	ldr	r2, [r3, #24]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f022 0204 	bic.w	r2, r2, #4
 8007412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6999      	ldr	r1, [r3, #24]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	691a      	ldr	r2, [r3, #16]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	430a      	orrs	r2, r1
 8007424:	619a      	str	r2, [r3, #24]
      break;
 8007426:	e062      	b.n	80074ee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68b9      	ldr	r1, [r7, #8]
 800742e:	4618      	mov	r0, r3
 8007430:	f000 fa16 	bl	8007860 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	699a      	ldr	r2, [r3, #24]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	699a      	ldr	r2, [r3, #24]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6999      	ldr	r1, [r3, #24]
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	021a      	lsls	r2, r3, #8
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	430a      	orrs	r2, r1
 8007466:	619a      	str	r2, [r3, #24]
      break;
 8007468:	e041      	b.n	80074ee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68b9      	ldr	r1, [r7, #8]
 8007470:	4618      	mov	r0, r3
 8007472:	f000 fa5f 	bl	8007934 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	69da      	ldr	r2, [r3, #28]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f042 0208 	orr.w	r2, r2, #8
 8007484:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	69da      	ldr	r2, [r3, #28]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f022 0204 	bic.w	r2, r2, #4
 8007494:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	69d9      	ldr	r1, [r3, #28]
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	691a      	ldr	r2, [r3, #16]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	430a      	orrs	r2, r1
 80074a6:	61da      	str	r2, [r3, #28]
      break;
 80074a8:	e021      	b.n	80074ee <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68b9      	ldr	r1, [r7, #8]
 80074b0:	4618      	mov	r0, r3
 80074b2:	f000 faa9 	bl	8007a08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	69da      	ldr	r2, [r3, #28]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	69da      	ldr	r2, [r3, #28]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	69d9      	ldr	r1, [r3, #28]
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	021a      	lsls	r2, r3, #8
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	430a      	orrs	r2, r1
 80074e8:	61da      	str	r2, [r3, #28]
      break;
 80074ea:	e000      	b.n	80074ee <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80074ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007510:	2b01      	cmp	r3, #1
 8007512:	d101      	bne.n	8007518 <HAL_TIM_ConfigClockSource+0x18>
 8007514:	2302      	movs	r3, #2
 8007516:	e0b3      	b.n	8007680 <HAL_TIM_ConfigClockSource+0x180>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2201      	movs	r2, #1
 800751c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2202      	movs	r2, #2
 8007524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007536:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800753e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007550:	d03e      	beq.n	80075d0 <HAL_TIM_ConfigClockSource+0xd0>
 8007552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007556:	f200 8087 	bhi.w	8007668 <HAL_TIM_ConfigClockSource+0x168>
 800755a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800755e:	f000 8085 	beq.w	800766c <HAL_TIM_ConfigClockSource+0x16c>
 8007562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007566:	d87f      	bhi.n	8007668 <HAL_TIM_ConfigClockSource+0x168>
 8007568:	2b70      	cmp	r3, #112	; 0x70
 800756a:	d01a      	beq.n	80075a2 <HAL_TIM_ConfigClockSource+0xa2>
 800756c:	2b70      	cmp	r3, #112	; 0x70
 800756e:	d87b      	bhi.n	8007668 <HAL_TIM_ConfigClockSource+0x168>
 8007570:	2b60      	cmp	r3, #96	; 0x60
 8007572:	d050      	beq.n	8007616 <HAL_TIM_ConfigClockSource+0x116>
 8007574:	2b60      	cmp	r3, #96	; 0x60
 8007576:	d877      	bhi.n	8007668 <HAL_TIM_ConfigClockSource+0x168>
 8007578:	2b50      	cmp	r3, #80	; 0x50
 800757a:	d03c      	beq.n	80075f6 <HAL_TIM_ConfigClockSource+0xf6>
 800757c:	2b50      	cmp	r3, #80	; 0x50
 800757e:	d873      	bhi.n	8007668 <HAL_TIM_ConfigClockSource+0x168>
 8007580:	2b40      	cmp	r3, #64	; 0x40
 8007582:	d058      	beq.n	8007636 <HAL_TIM_ConfigClockSource+0x136>
 8007584:	2b40      	cmp	r3, #64	; 0x40
 8007586:	d86f      	bhi.n	8007668 <HAL_TIM_ConfigClockSource+0x168>
 8007588:	2b30      	cmp	r3, #48	; 0x30
 800758a:	d064      	beq.n	8007656 <HAL_TIM_ConfigClockSource+0x156>
 800758c:	2b30      	cmp	r3, #48	; 0x30
 800758e:	d86b      	bhi.n	8007668 <HAL_TIM_ConfigClockSource+0x168>
 8007590:	2b20      	cmp	r3, #32
 8007592:	d060      	beq.n	8007656 <HAL_TIM_ConfigClockSource+0x156>
 8007594:	2b20      	cmp	r3, #32
 8007596:	d867      	bhi.n	8007668 <HAL_TIM_ConfigClockSource+0x168>
 8007598:	2b00      	cmp	r3, #0
 800759a:	d05c      	beq.n	8007656 <HAL_TIM_ConfigClockSource+0x156>
 800759c:	2b10      	cmp	r3, #16
 800759e:	d05a      	beq.n	8007656 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80075a0:	e062      	b.n	8007668 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6818      	ldr	r0, [r3, #0]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	6899      	ldr	r1, [r3, #8]
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	f000 faee 	bl	8007b92 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80075c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68fa      	ldr	r2, [r7, #12]
 80075cc:	609a      	str	r2, [r3, #8]
      break;
 80075ce:	e04e      	b.n	800766e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6818      	ldr	r0, [r3, #0]
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	6899      	ldr	r1, [r3, #8]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	f000 fad7 	bl	8007b92 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	689a      	ldr	r2, [r3, #8]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075f2:	609a      	str	r2, [r3, #8]
      break;
 80075f4:	e03b      	b.n	800766e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6818      	ldr	r0, [r3, #0]
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	6859      	ldr	r1, [r3, #4]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	461a      	mov	r2, r3
 8007604:	f000 fa4e 	bl	8007aa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2150      	movs	r1, #80	; 0x50
 800760e:	4618      	mov	r0, r3
 8007610:	f000 faa5 	bl	8007b5e <TIM_ITRx_SetConfig>
      break;
 8007614:	e02b      	b.n	800766e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6818      	ldr	r0, [r3, #0]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	6859      	ldr	r1, [r3, #4]
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	461a      	mov	r2, r3
 8007624:	f000 fa6c 	bl	8007b00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2160      	movs	r1, #96	; 0x60
 800762e:	4618      	mov	r0, r3
 8007630:	f000 fa95 	bl	8007b5e <TIM_ITRx_SetConfig>
      break;
 8007634:	e01b      	b.n	800766e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6818      	ldr	r0, [r3, #0]
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	6859      	ldr	r1, [r3, #4]
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	461a      	mov	r2, r3
 8007644:	f000 fa2e 	bl	8007aa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2140      	movs	r1, #64	; 0x40
 800764e:	4618      	mov	r0, r3
 8007650:	f000 fa85 	bl	8007b5e <TIM_ITRx_SetConfig>
      break;
 8007654:	e00b      	b.n	800766e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4619      	mov	r1, r3
 8007660:	4610      	mov	r0, r2
 8007662:	f000 fa7c 	bl	8007b5e <TIM_ITRx_SetConfig>
        break;
 8007666:	e002      	b.n	800766e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007668:	bf00      	nop
 800766a:	e000      	b.n	800766e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800766c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800767e:	2300      	movs	r3, #0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3710      	adds	r7, #16
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	bc80      	pop	{r7}
 8007698:	4770      	bx	lr

0800769a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800769a:	b480      	push	{r7}
 800769c:	b083      	sub	sp, #12
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076a2:	bf00      	nop
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bc80      	pop	{r7}
 80076aa:	4770      	bx	lr

080076ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076b4:	bf00      	nop
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bc80      	pop	{r7}
 80076bc:	4770      	bx	lr

080076be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076be:	b480      	push	{r7}
 80076c0:	b083      	sub	sp, #12
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076c6:	bf00      	nop
 80076c8:	370c      	adds	r7, #12
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bc80      	pop	{r7}
 80076ce:	4770      	bx	lr

080076d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a29      	ldr	r2, [pc, #164]	; (8007788 <TIM_Base_SetConfig+0xb8>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d00b      	beq.n	8007700 <TIM_Base_SetConfig+0x30>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ee:	d007      	beq.n	8007700 <TIM_Base_SetConfig+0x30>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a26      	ldr	r2, [pc, #152]	; (800778c <TIM_Base_SetConfig+0xbc>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d003      	beq.n	8007700 <TIM_Base_SetConfig+0x30>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a25      	ldr	r2, [pc, #148]	; (8007790 <TIM_Base_SetConfig+0xc0>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d108      	bne.n	8007712 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	4313      	orrs	r3, r2
 8007710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a1c      	ldr	r2, [pc, #112]	; (8007788 <TIM_Base_SetConfig+0xb8>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d00b      	beq.n	8007732 <TIM_Base_SetConfig+0x62>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007720:	d007      	beq.n	8007732 <TIM_Base_SetConfig+0x62>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a19      	ldr	r2, [pc, #100]	; (800778c <TIM_Base_SetConfig+0xbc>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d003      	beq.n	8007732 <TIM_Base_SetConfig+0x62>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a18      	ldr	r2, [pc, #96]	; (8007790 <TIM_Base_SetConfig+0xc0>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d108      	bne.n	8007744 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	68fa      	ldr	r2, [r7, #12]
 8007740:	4313      	orrs	r3, r2
 8007742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	4313      	orrs	r3, r2
 8007750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	4a07      	ldr	r2, [pc, #28]	; (8007788 <TIM_Base_SetConfig+0xb8>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d103      	bne.n	8007778 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	691a      	ldr	r2, [r3, #16]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	615a      	str	r2, [r3, #20]
}
 800777e:	bf00      	nop
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	bc80      	pop	{r7}
 8007786:	4770      	bx	lr
 8007788:	40012c00 	.word	0x40012c00
 800778c:	40000400 	.word	0x40000400
 8007790:	40000800 	.word	0x40000800

08007794 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007794:	b480      	push	{r7}
 8007796:	b087      	sub	sp, #28
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a1b      	ldr	r3, [r3, #32]
 80077a2:	f023 0201 	bic.w	r2, r3, #1
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f023 0303 	bic.w	r3, r3, #3
 80077ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	f023 0302 	bic.w	r3, r3, #2
 80077dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	4a1c      	ldr	r2, [pc, #112]	; (800785c <TIM_OC1_SetConfig+0xc8>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d10c      	bne.n	800780a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	f023 0308 	bic.w	r3, r3, #8
 80077f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	697a      	ldr	r2, [r7, #20]
 80077fe:	4313      	orrs	r3, r2
 8007800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f023 0304 	bic.w	r3, r3, #4
 8007808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a13      	ldr	r2, [pc, #76]	; (800785c <TIM_OC1_SetConfig+0xc8>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d111      	bne.n	8007836 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	693a      	ldr	r2, [r7, #16]
 8007828:	4313      	orrs	r3, r2
 800782a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	4313      	orrs	r3, r2
 8007834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	685a      	ldr	r2, [r3, #4]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	697a      	ldr	r2, [r7, #20]
 800784e:	621a      	str	r2, [r3, #32]
}
 8007850:	bf00      	nop
 8007852:	371c      	adds	r7, #28
 8007854:	46bd      	mov	sp, r7
 8007856:	bc80      	pop	{r7}
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	40012c00 	.word	0x40012c00

08007860 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007860:	b480      	push	{r7}
 8007862:	b087      	sub	sp, #28
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	f023 0210 	bic.w	r2, r3, #16
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	699b      	ldr	r3, [r3, #24]
 8007886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800788e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	021b      	lsls	r3, r3, #8
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	f023 0320 	bic.w	r3, r3, #32
 80078aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	011b      	lsls	r3, r3, #4
 80078b2:	697a      	ldr	r2, [r7, #20]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a1d      	ldr	r2, [pc, #116]	; (8007930 <TIM_OC2_SetConfig+0xd0>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d10d      	bne.n	80078dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	011b      	lsls	r3, r3, #4
 80078ce:	697a      	ldr	r2, [r7, #20]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a14      	ldr	r2, [pc, #80]	; (8007930 <TIM_OC2_SetConfig+0xd0>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d113      	bne.n	800790c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	695b      	ldr	r3, [r3, #20]
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	693a      	ldr	r2, [r7, #16]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	4313      	orrs	r3, r2
 800790a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	68fa      	ldr	r2, [r7, #12]
 8007916:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	685a      	ldr	r2, [r3, #4]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	621a      	str	r2, [r3, #32]
}
 8007926:	bf00      	nop
 8007928:	371c      	adds	r7, #28
 800792a:	46bd      	mov	sp, r7
 800792c:	bc80      	pop	{r7}
 800792e:	4770      	bx	lr
 8007930:	40012c00 	.word	0x40012c00

08007934 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007934:	b480      	push	{r7}
 8007936:	b087      	sub	sp, #28
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a1b      	ldr	r3, [r3, #32]
 800794e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f023 0303 	bic.w	r3, r3, #3
 800796a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	4313      	orrs	r3, r2
 8007974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800797c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	021b      	lsls	r3, r3, #8
 8007984:	697a      	ldr	r2, [r7, #20]
 8007986:	4313      	orrs	r3, r2
 8007988:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a1d      	ldr	r2, [pc, #116]	; (8007a04 <TIM_OC3_SetConfig+0xd0>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d10d      	bne.n	80079ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007998:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	021b      	lsls	r3, r3, #8
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a14      	ldr	r2, [pc, #80]	; (8007a04 <TIM_OC3_SetConfig+0xd0>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d113      	bne.n	80079de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	695b      	ldr	r3, [r3, #20]
 80079ca:	011b      	lsls	r3, r3, #4
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	011b      	lsls	r3, r3, #4
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	4313      	orrs	r3, r2
 80079dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	685a      	ldr	r2, [r3, #4]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	621a      	str	r2, [r3, #32]
}
 80079f8:	bf00      	nop
 80079fa:	371c      	adds	r7, #28
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bc80      	pop	{r7}
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	40012c00 	.word	0x40012c00

08007a08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b087      	sub	sp, #28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	69db      	ldr	r3, [r3, #28]
 8007a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	021b      	lsls	r3, r3, #8
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	031b      	lsls	r3, r3, #12
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a0f      	ldr	r2, [pc, #60]	; (8007aa0 <TIM_OC4_SetConfig+0x98>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d109      	bne.n	8007a7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	695b      	ldr	r3, [r3, #20]
 8007a74:	019b      	lsls	r3, r3, #6
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	693a      	ldr	r2, [r7, #16]
 8007a94:	621a      	str	r2, [r3, #32]
}
 8007a96:	bf00      	nop
 8007a98:	371c      	adds	r7, #28
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bc80      	pop	{r7}
 8007a9e:	4770      	bx	lr
 8007aa0:	40012c00 	.word	0x40012c00

08007aa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b087      	sub	sp, #28
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6a1b      	ldr	r3, [r3, #32]
 8007ab4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6a1b      	ldr	r3, [r3, #32]
 8007aba:	f023 0201 	bic.w	r2, r3, #1
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	011b      	lsls	r3, r3, #4
 8007ad4:	693a      	ldr	r2, [r7, #16]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	f023 030a 	bic.w	r3, r3, #10
 8007ae0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ae2:	697a      	ldr	r2, [r7, #20]
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	693a      	ldr	r2, [r7, #16]
 8007aee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	621a      	str	r2, [r3, #32]
}
 8007af6:	bf00      	nop
 8007af8:	371c      	adds	r7, #28
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bc80      	pop	{r7}
 8007afe:	4770      	bx	lr

08007b00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b087      	sub	sp, #28
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6a1b      	ldr	r3, [r3, #32]
 8007b10:	f023 0210 	bic.w	r2, r3, #16
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	6a1b      	ldr	r3, [r3, #32]
 8007b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	031b      	lsls	r3, r3, #12
 8007b30:	697a      	ldr	r2, [r7, #20]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	011b      	lsls	r3, r3, #4
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	621a      	str	r2, [r3, #32]
}
 8007b54:	bf00      	nop
 8007b56:	371c      	adds	r7, #28
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bc80      	pop	{r7}
 8007b5c:	4770      	bx	lr

08007b5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b5e:	b480      	push	{r7}
 8007b60:	b085      	sub	sp, #20
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
 8007b66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b76:	683a      	ldr	r2, [r7, #0]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	f043 0307 	orr.w	r3, r3, #7
 8007b80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	609a      	str	r2, [r3, #8]
}
 8007b88:	bf00      	nop
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bc80      	pop	{r7}
 8007b90:	4770      	bx	lr

08007b92 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b92:	b480      	push	{r7}
 8007b94:	b087      	sub	sp, #28
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	60f8      	str	r0, [r7, #12]
 8007b9a:	60b9      	str	r1, [r7, #8]
 8007b9c:	607a      	str	r2, [r7, #4]
 8007b9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007bac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	021a      	lsls	r2, r3, #8
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	431a      	orrs	r2, r3
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	609a      	str	r2, [r3, #8]
}
 8007bc6:	bf00      	nop
 8007bc8:	371c      	adds	r7, #28
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bc80      	pop	{r7}
 8007bce:	4770      	bx	lr

08007bd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b087      	sub	sp, #28
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	f003 031f 	and.w	r3, r3, #31
 8007be2:	2201      	movs	r2, #1
 8007be4:	fa02 f303 	lsl.w	r3, r2, r3
 8007be8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6a1a      	ldr	r2, [r3, #32]
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	43db      	mvns	r3, r3
 8007bf2:	401a      	ands	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6a1a      	ldr	r2, [r3, #32]
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	f003 031f 	and.w	r3, r3, #31
 8007c02:	6879      	ldr	r1, [r7, #4]
 8007c04:	fa01 f303 	lsl.w	r3, r1, r3
 8007c08:	431a      	orrs	r2, r3
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	621a      	str	r2, [r3, #32]
}
 8007c0e:	bf00      	nop
 8007c10:	371c      	adds	r7, #28
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bc80      	pop	{r7}
 8007c16:	4770      	bx	lr

08007c18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d101      	bne.n	8007c30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	e046      	b.n	8007cbe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a16      	ldr	r2, [pc, #88]	; (8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d00e      	beq.n	8007c92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c7c:	d009      	beq.n	8007c92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a12      	ldr	r2, [pc, #72]	; (8007ccc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d004      	beq.n	8007c92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a10      	ldr	r2, [pc, #64]	; (8007cd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d10c      	bne.n	8007cac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	68ba      	ldr	r2, [r7, #8]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3714      	adds	r7, #20
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bc80      	pop	{r7}
 8007cc6:	4770      	bx	lr
 8007cc8:	40012c00 	.word	0x40012c00
 8007ccc:	40000400 	.word	0x40000400
 8007cd0:	40000800 	.word	0x40000800

08007cd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007cdc:	bf00      	nop
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bc80      	pop	{r7}
 8007ce4:	4770      	bx	lr

08007ce6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007cee:	bf00      	nop
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bc80      	pop	{r7}
 8007cf6:	4770      	bx	lr

08007cf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d101      	bne.n	8007d0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e03f      	b.n	8007d8a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d106      	bne.n	8007d24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7fd f90e 	bl	8004f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2224      	movs	r2, #36	; 0x24
 8007d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68da      	ldr	r2, [r3, #12]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 f829 	bl	8007d94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	691a      	ldr	r2, [r3, #16]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	695a      	ldr	r2, [r3, #20]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68da      	ldr	r2, [r3, #12]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2220      	movs	r2, #32
 8007d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2220      	movs	r2, #32
 8007d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3708      	adds	r7, #8
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
	...

08007d94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68da      	ldr	r2, [r3, #12]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	430a      	orrs	r2, r1
 8007db0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	689a      	ldr	r2, [r3, #8]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	431a      	orrs	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	695b      	ldr	r3, [r3, #20]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007dce:	f023 030c 	bic.w	r3, r3, #12
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	6812      	ldr	r2, [r2, #0]
 8007dd6:	68b9      	ldr	r1, [r7, #8]
 8007dd8:	430b      	orrs	r3, r1
 8007dda:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	699a      	ldr	r2, [r3, #24]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	430a      	orrs	r2, r1
 8007df0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a2c      	ldr	r2, [pc, #176]	; (8007ea8 <UART_SetConfig+0x114>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d103      	bne.n	8007e04 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007dfc:	f7fe ffec 	bl	8006dd8 <HAL_RCC_GetPCLK2Freq>
 8007e00:	60f8      	str	r0, [r7, #12]
 8007e02:	e002      	b.n	8007e0a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007e04:	f7fe ffd4 	bl	8006db0 <HAL_RCC_GetPCLK1Freq>
 8007e08:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4413      	add	r3, r2
 8007e12:	009a      	lsls	r2, r3, #2
 8007e14:	441a      	add	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e20:	4a22      	ldr	r2, [pc, #136]	; (8007eac <UART_SetConfig+0x118>)
 8007e22:	fba2 2303 	umull	r2, r3, r2, r3
 8007e26:	095b      	lsrs	r3, r3, #5
 8007e28:	0119      	lsls	r1, r3, #4
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	4413      	add	r3, r2
 8007e32:	009a      	lsls	r2, r3, #2
 8007e34:	441a      	add	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007e40:	4b1a      	ldr	r3, [pc, #104]	; (8007eac <UART_SetConfig+0x118>)
 8007e42:	fba3 0302 	umull	r0, r3, r3, r2
 8007e46:	095b      	lsrs	r3, r3, #5
 8007e48:	2064      	movs	r0, #100	; 0x64
 8007e4a:	fb00 f303 	mul.w	r3, r0, r3
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	011b      	lsls	r3, r3, #4
 8007e52:	3332      	adds	r3, #50	; 0x32
 8007e54:	4a15      	ldr	r2, [pc, #84]	; (8007eac <UART_SetConfig+0x118>)
 8007e56:	fba2 2303 	umull	r2, r3, r2, r3
 8007e5a:	095b      	lsrs	r3, r3, #5
 8007e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e60:	4419      	add	r1, r3
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	4613      	mov	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	009a      	lsls	r2, r3, #2
 8007e6c:	441a      	add	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	fbb2 f2f3 	udiv	r2, r2, r3
 8007e78:	4b0c      	ldr	r3, [pc, #48]	; (8007eac <UART_SetConfig+0x118>)
 8007e7a:	fba3 0302 	umull	r0, r3, r3, r2
 8007e7e:	095b      	lsrs	r3, r3, #5
 8007e80:	2064      	movs	r0, #100	; 0x64
 8007e82:	fb00 f303 	mul.w	r3, r0, r3
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	011b      	lsls	r3, r3, #4
 8007e8a:	3332      	adds	r3, #50	; 0x32
 8007e8c:	4a07      	ldr	r2, [pc, #28]	; (8007eac <UART_SetConfig+0x118>)
 8007e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e92:	095b      	lsrs	r3, r3, #5
 8007e94:	f003 020f 	and.w	r2, r3, #15
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	440a      	add	r2, r1
 8007e9e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007ea0:	bf00      	nop
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	40013800 	.word	0x40013800
 8007eac:	51eb851f 	.word	0x51eb851f

08007eb0 <__errno>:
 8007eb0:	4b01      	ldr	r3, [pc, #4]	; (8007eb8 <__errno+0x8>)
 8007eb2:	6818      	ldr	r0, [r3, #0]
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	200000a0 	.word	0x200000a0

08007ebc <__libc_init_array>:
 8007ebc:	b570      	push	{r4, r5, r6, lr}
 8007ebe:	2600      	movs	r6, #0
 8007ec0:	4d0c      	ldr	r5, [pc, #48]	; (8007ef4 <__libc_init_array+0x38>)
 8007ec2:	4c0d      	ldr	r4, [pc, #52]	; (8007ef8 <__libc_init_array+0x3c>)
 8007ec4:	1b64      	subs	r4, r4, r5
 8007ec6:	10a4      	asrs	r4, r4, #2
 8007ec8:	42a6      	cmp	r6, r4
 8007eca:	d109      	bne.n	8007ee0 <__libc_init_array+0x24>
 8007ecc:	f004 ff8a 	bl	800cde4 <_init>
 8007ed0:	2600      	movs	r6, #0
 8007ed2:	4d0a      	ldr	r5, [pc, #40]	; (8007efc <__libc_init_array+0x40>)
 8007ed4:	4c0a      	ldr	r4, [pc, #40]	; (8007f00 <__libc_init_array+0x44>)
 8007ed6:	1b64      	subs	r4, r4, r5
 8007ed8:	10a4      	asrs	r4, r4, #2
 8007eda:	42a6      	cmp	r6, r4
 8007edc:	d105      	bne.n	8007eea <__libc_init_array+0x2e>
 8007ede:	bd70      	pop	{r4, r5, r6, pc}
 8007ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ee4:	4798      	blx	r3
 8007ee6:	3601      	adds	r6, #1
 8007ee8:	e7ee      	b.n	8007ec8 <__libc_init_array+0xc>
 8007eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eee:	4798      	blx	r3
 8007ef0:	3601      	adds	r6, #1
 8007ef2:	e7f2      	b.n	8007eda <__libc_init_array+0x1e>
 8007ef4:	0800d620 	.word	0x0800d620
 8007ef8:	0800d620 	.word	0x0800d620
 8007efc:	0800d620 	.word	0x0800d620
 8007f00:	0800d624 	.word	0x0800d624

08007f04 <memset>:
 8007f04:	4603      	mov	r3, r0
 8007f06:	4402      	add	r2, r0
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d100      	bne.n	8007f0e <memset+0xa>
 8007f0c:	4770      	bx	lr
 8007f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8007f12:	e7f9      	b.n	8007f08 <memset+0x4>

08007f14 <__cvt>:
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f1a:	461f      	mov	r7, r3
 8007f1c:	bfbb      	ittet	lt
 8007f1e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007f22:	461f      	movlt	r7, r3
 8007f24:	2300      	movge	r3, #0
 8007f26:	232d      	movlt	r3, #45	; 0x2d
 8007f28:	b088      	sub	sp, #32
 8007f2a:	4614      	mov	r4, r2
 8007f2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f2e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007f30:	7013      	strb	r3, [r2, #0]
 8007f32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f34:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007f38:	f023 0820 	bic.w	r8, r3, #32
 8007f3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f40:	d005      	beq.n	8007f4e <__cvt+0x3a>
 8007f42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007f46:	d100      	bne.n	8007f4a <__cvt+0x36>
 8007f48:	3501      	adds	r5, #1
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	e000      	b.n	8007f50 <__cvt+0x3c>
 8007f4e:	2303      	movs	r3, #3
 8007f50:	aa07      	add	r2, sp, #28
 8007f52:	9204      	str	r2, [sp, #16]
 8007f54:	aa06      	add	r2, sp, #24
 8007f56:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007f5a:	e9cd 3500 	strd	r3, r5, [sp]
 8007f5e:	4622      	mov	r2, r4
 8007f60:	463b      	mov	r3, r7
 8007f62:	f001 fd85 	bl	8009a70 <_dtoa_r>
 8007f66:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007f6a:	4606      	mov	r6, r0
 8007f6c:	d102      	bne.n	8007f74 <__cvt+0x60>
 8007f6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f70:	07db      	lsls	r3, r3, #31
 8007f72:	d522      	bpl.n	8007fba <__cvt+0xa6>
 8007f74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f78:	eb06 0905 	add.w	r9, r6, r5
 8007f7c:	d110      	bne.n	8007fa0 <__cvt+0x8c>
 8007f7e:	7833      	ldrb	r3, [r6, #0]
 8007f80:	2b30      	cmp	r3, #48	; 0x30
 8007f82:	d10a      	bne.n	8007f9a <__cvt+0x86>
 8007f84:	2200      	movs	r2, #0
 8007f86:	2300      	movs	r3, #0
 8007f88:	4620      	mov	r0, r4
 8007f8a:	4639      	mov	r1, r7
 8007f8c:	f7f8 fd0c 	bl	80009a8 <__aeabi_dcmpeq>
 8007f90:	b918      	cbnz	r0, 8007f9a <__cvt+0x86>
 8007f92:	f1c5 0501 	rsb	r5, r5, #1
 8007f96:	f8ca 5000 	str.w	r5, [sl]
 8007f9a:	f8da 3000 	ldr.w	r3, [sl]
 8007f9e:	4499      	add	r9, r3
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	4639      	mov	r1, r7
 8007fa8:	f7f8 fcfe 	bl	80009a8 <__aeabi_dcmpeq>
 8007fac:	b108      	cbz	r0, 8007fb2 <__cvt+0x9e>
 8007fae:	f8cd 901c 	str.w	r9, [sp, #28]
 8007fb2:	2230      	movs	r2, #48	; 0x30
 8007fb4:	9b07      	ldr	r3, [sp, #28]
 8007fb6:	454b      	cmp	r3, r9
 8007fb8:	d307      	bcc.n	8007fca <__cvt+0xb6>
 8007fba:	4630      	mov	r0, r6
 8007fbc:	9b07      	ldr	r3, [sp, #28]
 8007fbe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007fc0:	1b9b      	subs	r3, r3, r6
 8007fc2:	6013      	str	r3, [r2, #0]
 8007fc4:	b008      	add	sp, #32
 8007fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fca:	1c59      	adds	r1, r3, #1
 8007fcc:	9107      	str	r1, [sp, #28]
 8007fce:	701a      	strb	r2, [r3, #0]
 8007fd0:	e7f0      	b.n	8007fb4 <__cvt+0xa0>

08007fd2 <__exponent>:
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fd6:	2900      	cmp	r1, #0
 8007fd8:	f803 2b02 	strb.w	r2, [r3], #2
 8007fdc:	bfb6      	itet	lt
 8007fde:	222d      	movlt	r2, #45	; 0x2d
 8007fe0:	222b      	movge	r2, #43	; 0x2b
 8007fe2:	4249      	neglt	r1, r1
 8007fe4:	2909      	cmp	r1, #9
 8007fe6:	7042      	strb	r2, [r0, #1]
 8007fe8:	dd2b      	ble.n	8008042 <__exponent+0x70>
 8007fea:	f10d 0407 	add.w	r4, sp, #7
 8007fee:	46a4      	mov	ip, r4
 8007ff0:	270a      	movs	r7, #10
 8007ff2:	fb91 f6f7 	sdiv	r6, r1, r7
 8007ff6:	460a      	mov	r2, r1
 8007ff8:	46a6      	mov	lr, r4
 8007ffa:	fb07 1516 	mls	r5, r7, r6, r1
 8007ffe:	2a63      	cmp	r2, #99	; 0x63
 8008000:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8008004:	4631      	mov	r1, r6
 8008006:	f104 34ff 	add.w	r4, r4, #4294967295
 800800a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800800e:	dcf0      	bgt.n	8007ff2 <__exponent+0x20>
 8008010:	3130      	adds	r1, #48	; 0x30
 8008012:	f1ae 0502 	sub.w	r5, lr, #2
 8008016:	f804 1c01 	strb.w	r1, [r4, #-1]
 800801a:	4629      	mov	r1, r5
 800801c:	1c44      	adds	r4, r0, #1
 800801e:	4561      	cmp	r1, ip
 8008020:	d30a      	bcc.n	8008038 <__exponent+0x66>
 8008022:	f10d 0209 	add.w	r2, sp, #9
 8008026:	eba2 020e 	sub.w	r2, r2, lr
 800802a:	4565      	cmp	r5, ip
 800802c:	bf88      	it	hi
 800802e:	2200      	movhi	r2, #0
 8008030:	4413      	add	r3, r2
 8008032:	1a18      	subs	r0, r3, r0
 8008034:	b003      	add	sp, #12
 8008036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008038:	f811 2b01 	ldrb.w	r2, [r1], #1
 800803c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008040:	e7ed      	b.n	800801e <__exponent+0x4c>
 8008042:	2330      	movs	r3, #48	; 0x30
 8008044:	3130      	adds	r1, #48	; 0x30
 8008046:	7083      	strb	r3, [r0, #2]
 8008048:	70c1      	strb	r1, [r0, #3]
 800804a:	1d03      	adds	r3, r0, #4
 800804c:	e7f1      	b.n	8008032 <__exponent+0x60>
	...

08008050 <_printf_float>:
 8008050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008054:	b091      	sub	sp, #68	; 0x44
 8008056:	460c      	mov	r4, r1
 8008058:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800805c:	4616      	mov	r6, r2
 800805e:	461f      	mov	r7, r3
 8008060:	4605      	mov	r5, r0
 8008062:	f002 fe59 	bl	800ad18 <_localeconv_r>
 8008066:	6803      	ldr	r3, [r0, #0]
 8008068:	4618      	mov	r0, r3
 800806a:	9309      	str	r3, [sp, #36]	; 0x24
 800806c:	f7f8 f870 	bl	8000150 <strlen>
 8008070:	2300      	movs	r3, #0
 8008072:	930e      	str	r3, [sp, #56]	; 0x38
 8008074:	f8d8 3000 	ldr.w	r3, [r8]
 8008078:	900a      	str	r0, [sp, #40]	; 0x28
 800807a:	3307      	adds	r3, #7
 800807c:	f023 0307 	bic.w	r3, r3, #7
 8008080:	f103 0208 	add.w	r2, r3, #8
 8008084:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008088:	f8d4 b000 	ldr.w	fp, [r4]
 800808c:	f8c8 2000 	str.w	r2, [r8]
 8008090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008094:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008098:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800809c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80080a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80080a2:	f04f 32ff 	mov.w	r2, #4294967295
 80080a6:	4640      	mov	r0, r8
 80080a8:	4b9c      	ldr	r3, [pc, #624]	; (800831c <_printf_float+0x2cc>)
 80080aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080ac:	f7f8 fcae 	bl	8000a0c <__aeabi_dcmpun>
 80080b0:	bb70      	cbnz	r0, 8008110 <_printf_float+0xc0>
 80080b2:	f04f 32ff 	mov.w	r2, #4294967295
 80080b6:	4640      	mov	r0, r8
 80080b8:	4b98      	ldr	r3, [pc, #608]	; (800831c <_printf_float+0x2cc>)
 80080ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080bc:	f7f8 fc88 	bl	80009d0 <__aeabi_dcmple>
 80080c0:	bb30      	cbnz	r0, 8008110 <_printf_float+0xc0>
 80080c2:	2200      	movs	r2, #0
 80080c4:	2300      	movs	r3, #0
 80080c6:	4640      	mov	r0, r8
 80080c8:	4651      	mov	r1, sl
 80080ca:	f7f8 fc77 	bl	80009bc <__aeabi_dcmplt>
 80080ce:	b110      	cbz	r0, 80080d6 <_printf_float+0x86>
 80080d0:	232d      	movs	r3, #45	; 0x2d
 80080d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080d6:	4b92      	ldr	r3, [pc, #584]	; (8008320 <_printf_float+0x2d0>)
 80080d8:	4892      	ldr	r0, [pc, #584]	; (8008324 <_printf_float+0x2d4>)
 80080da:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80080de:	bf94      	ite	ls
 80080e0:	4698      	movls	r8, r3
 80080e2:	4680      	movhi	r8, r0
 80080e4:	2303      	movs	r3, #3
 80080e6:	f04f 0a00 	mov.w	sl, #0
 80080ea:	6123      	str	r3, [r4, #16]
 80080ec:	f02b 0304 	bic.w	r3, fp, #4
 80080f0:	6023      	str	r3, [r4, #0]
 80080f2:	4633      	mov	r3, r6
 80080f4:	4621      	mov	r1, r4
 80080f6:	4628      	mov	r0, r5
 80080f8:	9700      	str	r7, [sp, #0]
 80080fa:	aa0f      	add	r2, sp, #60	; 0x3c
 80080fc:	f000 f9d4 	bl	80084a8 <_printf_common>
 8008100:	3001      	adds	r0, #1
 8008102:	f040 8090 	bne.w	8008226 <_printf_float+0x1d6>
 8008106:	f04f 30ff 	mov.w	r0, #4294967295
 800810a:	b011      	add	sp, #68	; 0x44
 800810c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008110:	4642      	mov	r2, r8
 8008112:	4653      	mov	r3, sl
 8008114:	4640      	mov	r0, r8
 8008116:	4651      	mov	r1, sl
 8008118:	f7f8 fc78 	bl	8000a0c <__aeabi_dcmpun>
 800811c:	b148      	cbz	r0, 8008132 <_printf_float+0xe2>
 800811e:	f1ba 0f00 	cmp.w	sl, #0
 8008122:	bfb8      	it	lt
 8008124:	232d      	movlt	r3, #45	; 0x2d
 8008126:	4880      	ldr	r0, [pc, #512]	; (8008328 <_printf_float+0x2d8>)
 8008128:	bfb8      	it	lt
 800812a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800812e:	4b7f      	ldr	r3, [pc, #508]	; (800832c <_printf_float+0x2dc>)
 8008130:	e7d3      	b.n	80080da <_printf_float+0x8a>
 8008132:	6863      	ldr	r3, [r4, #4]
 8008134:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	d142      	bne.n	80081c2 <_printf_float+0x172>
 800813c:	2306      	movs	r3, #6
 800813e:	6063      	str	r3, [r4, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	9206      	str	r2, [sp, #24]
 8008144:	aa0e      	add	r2, sp, #56	; 0x38
 8008146:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800814a:	aa0d      	add	r2, sp, #52	; 0x34
 800814c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008150:	9203      	str	r2, [sp, #12]
 8008152:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008156:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800815a:	6023      	str	r3, [r4, #0]
 800815c:	6863      	ldr	r3, [r4, #4]
 800815e:	4642      	mov	r2, r8
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	4628      	mov	r0, r5
 8008164:	4653      	mov	r3, sl
 8008166:	910b      	str	r1, [sp, #44]	; 0x2c
 8008168:	f7ff fed4 	bl	8007f14 <__cvt>
 800816c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800816e:	4680      	mov	r8, r0
 8008170:	2947      	cmp	r1, #71	; 0x47
 8008172:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008174:	d108      	bne.n	8008188 <_printf_float+0x138>
 8008176:	1cc8      	adds	r0, r1, #3
 8008178:	db02      	blt.n	8008180 <_printf_float+0x130>
 800817a:	6863      	ldr	r3, [r4, #4]
 800817c:	4299      	cmp	r1, r3
 800817e:	dd40      	ble.n	8008202 <_printf_float+0x1b2>
 8008180:	f1a9 0902 	sub.w	r9, r9, #2
 8008184:	fa5f f989 	uxtb.w	r9, r9
 8008188:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800818c:	d81f      	bhi.n	80081ce <_printf_float+0x17e>
 800818e:	464a      	mov	r2, r9
 8008190:	3901      	subs	r1, #1
 8008192:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008196:	910d      	str	r1, [sp, #52]	; 0x34
 8008198:	f7ff ff1b 	bl	8007fd2 <__exponent>
 800819c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800819e:	4682      	mov	sl, r0
 80081a0:	1813      	adds	r3, r2, r0
 80081a2:	2a01      	cmp	r2, #1
 80081a4:	6123      	str	r3, [r4, #16]
 80081a6:	dc02      	bgt.n	80081ae <_printf_float+0x15e>
 80081a8:	6822      	ldr	r2, [r4, #0]
 80081aa:	07d2      	lsls	r2, r2, #31
 80081ac:	d501      	bpl.n	80081b2 <_printf_float+0x162>
 80081ae:	3301      	adds	r3, #1
 80081b0:	6123      	str	r3, [r4, #16]
 80081b2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d09b      	beq.n	80080f2 <_printf_float+0xa2>
 80081ba:	232d      	movs	r3, #45	; 0x2d
 80081bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081c0:	e797      	b.n	80080f2 <_printf_float+0xa2>
 80081c2:	2947      	cmp	r1, #71	; 0x47
 80081c4:	d1bc      	bne.n	8008140 <_printf_float+0xf0>
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1ba      	bne.n	8008140 <_printf_float+0xf0>
 80081ca:	2301      	movs	r3, #1
 80081cc:	e7b7      	b.n	800813e <_printf_float+0xee>
 80081ce:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80081d2:	d118      	bne.n	8008206 <_printf_float+0x1b6>
 80081d4:	2900      	cmp	r1, #0
 80081d6:	6863      	ldr	r3, [r4, #4]
 80081d8:	dd0b      	ble.n	80081f2 <_printf_float+0x1a2>
 80081da:	6121      	str	r1, [r4, #16]
 80081dc:	b913      	cbnz	r3, 80081e4 <_printf_float+0x194>
 80081de:	6822      	ldr	r2, [r4, #0]
 80081e0:	07d0      	lsls	r0, r2, #31
 80081e2:	d502      	bpl.n	80081ea <_printf_float+0x19a>
 80081e4:	3301      	adds	r3, #1
 80081e6:	440b      	add	r3, r1
 80081e8:	6123      	str	r3, [r4, #16]
 80081ea:	f04f 0a00 	mov.w	sl, #0
 80081ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80081f0:	e7df      	b.n	80081b2 <_printf_float+0x162>
 80081f2:	b913      	cbnz	r3, 80081fa <_printf_float+0x1aa>
 80081f4:	6822      	ldr	r2, [r4, #0]
 80081f6:	07d2      	lsls	r2, r2, #31
 80081f8:	d501      	bpl.n	80081fe <_printf_float+0x1ae>
 80081fa:	3302      	adds	r3, #2
 80081fc:	e7f4      	b.n	80081e8 <_printf_float+0x198>
 80081fe:	2301      	movs	r3, #1
 8008200:	e7f2      	b.n	80081e8 <_printf_float+0x198>
 8008202:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008206:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008208:	4299      	cmp	r1, r3
 800820a:	db05      	blt.n	8008218 <_printf_float+0x1c8>
 800820c:	6823      	ldr	r3, [r4, #0]
 800820e:	6121      	str	r1, [r4, #16]
 8008210:	07d8      	lsls	r0, r3, #31
 8008212:	d5ea      	bpl.n	80081ea <_printf_float+0x19a>
 8008214:	1c4b      	adds	r3, r1, #1
 8008216:	e7e7      	b.n	80081e8 <_printf_float+0x198>
 8008218:	2900      	cmp	r1, #0
 800821a:	bfcc      	ite	gt
 800821c:	2201      	movgt	r2, #1
 800821e:	f1c1 0202 	rsble	r2, r1, #2
 8008222:	4413      	add	r3, r2
 8008224:	e7e0      	b.n	80081e8 <_printf_float+0x198>
 8008226:	6823      	ldr	r3, [r4, #0]
 8008228:	055a      	lsls	r2, r3, #21
 800822a:	d407      	bmi.n	800823c <_printf_float+0x1ec>
 800822c:	6923      	ldr	r3, [r4, #16]
 800822e:	4642      	mov	r2, r8
 8008230:	4631      	mov	r1, r6
 8008232:	4628      	mov	r0, r5
 8008234:	47b8      	blx	r7
 8008236:	3001      	adds	r0, #1
 8008238:	d12b      	bne.n	8008292 <_printf_float+0x242>
 800823a:	e764      	b.n	8008106 <_printf_float+0xb6>
 800823c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008240:	f240 80dd 	bls.w	80083fe <_printf_float+0x3ae>
 8008244:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008248:	2200      	movs	r2, #0
 800824a:	2300      	movs	r3, #0
 800824c:	f7f8 fbac 	bl	80009a8 <__aeabi_dcmpeq>
 8008250:	2800      	cmp	r0, #0
 8008252:	d033      	beq.n	80082bc <_printf_float+0x26c>
 8008254:	2301      	movs	r3, #1
 8008256:	4631      	mov	r1, r6
 8008258:	4628      	mov	r0, r5
 800825a:	4a35      	ldr	r2, [pc, #212]	; (8008330 <_printf_float+0x2e0>)
 800825c:	47b8      	blx	r7
 800825e:	3001      	adds	r0, #1
 8008260:	f43f af51 	beq.w	8008106 <_printf_float+0xb6>
 8008264:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008268:	429a      	cmp	r2, r3
 800826a:	db02      	blt.n	8008272 <_printf_float+0x222>
 800826c:	6823      	ldr	r3, [r4, #0]
 800826e:	07d8      	lsls	r0, r3, #31
 8008270:	d50f      	bpl.n	8008292 <_printf_float+0x242>
 8008272:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008276:	4631      	mov	r1, r6
 8008278:	4628      	mov	r0, r5
 800827a:	47b8      	blx	r7
 800827c:	3001      	adds	r0, #1
 800827e:	f43f af42 	beq.w	8008106 <_printf_float+0xb6>
 8008282:	f04f 0800 	mov.w	r8, #0
 8008286:	f104 091a 	add.w	r9, r4, #26
 800828a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800828c:	3b01      	subs	r3, #1
 800828e:	4543      	cmp	r3, r8
 8008290:	dc09      	bgt.n	80082a6 <_printf_float+0x256>
 8008292:	6823      	ldr	r3, [r4, #0]
 8008294:	079b      	lsls	r3, r3, #30
 8008296:	f100 8102 	bmi.w	800849e <_printf_float+0x44e>
 800829a:	68e0      	ldr	r0, [r4, #12]
 800829c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800829e:	4298      	cmp	r0, r3
 80082a0:	bfb8      	it	lt
 80082a2:	4618      	movlt	r0, r3
 80082a4:	e731      	b.n	800810a <_printf_float+0xba>
 80082a6:	2301      	movs	r3, #1
 80082a8:	464a      	mov	r2, r9
 80082aa:	4631      	mov	r1, r6
 80082ac:	4628      	mov	r0, r5
 80082ae:	47b8      	blx	r7
 80082b0:	3001      	adds	r0, #1
 80082b2:	f43f af28 	beq.w	8008106 <_printf_float+0xb6>
 80082b6:	f108 0801 	add.w	r8, r8, #1
 80082ba:	e7e6      	b.n	800828a <_printf_float+0x23a>
 80082bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082be:	2b00      	cmp	r3, #0
 80082c0:	dc38      	bgt.n	8008334 <_printf_float+0x2e4>
 80082c2:	2301      	movs	r3, #1
 80082c4:	4631      	mov	r1, r6
 80082c6:	4628      	mov	r0, r5
 80082c8:	4a19      	ldr	r2, [pc, #100]	; (8008330 <_printf_float+0x2e0>)
 80082ca:	47b8      	blx	r7
 80082cc:	3001      	adds	r0, #1
 80082ce:	f43f af1a 	beq.w	8008106 <_printf_float+0xb6>
 80082d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80082d6:	4313      	orrs	r3, r2
 80082d8:	d102      	bne.n	80082e0 <_printf_float+0x290>
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	07d9      	lsls	r1, r3, #31
 80082de:	d5d8      	bpl.n	8008292 <_printf_float+0x242>
 80082e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082e4:	4631      	mov	r1, r6
 80082e6:	4628      	mov	r0, r5
 80082e8:	47b8      	blx	r7
 80082ea:	3001      	adds	r0, #1
 80082ec:	f43f af0b 	beq.w	8008106 <_printf_float+0xb6>
 80082f0:	f04f 0900 	mov.w	r9, #0
 80082f4:	f104 0a1a 	add.w	sl, r4, #26
 80082f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082fa:	425b      	negs	r3, r3
 80082fc:	454b      	cmp	r3, r9
 80082fe:	dc01      	bgt.n	8008304 <_printf_float+0x2b4>
 8008300:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008302:	e794      	b.n	800822e <_printf_float+0x1de>
 8008304:	2301      	movs	r3, #1
 8008306:	4652      	mov	r2, sl
 8008308:	4631      	mov	r1, r6
 800830a:	4628      	mov	r0, r5
 800830c:	47b8      	blx	r7
 800830e:	3001      	adds	r0, #1
 8008310:	f43f aef9 	beq.w	8008106 <_printf_float+0xb6>
 8008314:	f109 0901 	add.w	r9, r9, #1
 8008318:	e7ee      	b.n	80082f8 <_printf_float+0x2a8>
 800831a:	bf00      	nop
 800831c:	7fefffff 	.word	0x7fefffff
 8008320:	0800d108 	.word	0x0800d108
 8008324:	0800d10c 	.word	0x0800d10c
 8008328:	0800d114 	.word	0x0800d114
 800832c:	0800d110 	.word	0x0800d110
 8008330:	0800d118 	.word	0x0800d118
 8008334:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008336:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008338:	429a      	cmp	r2, r3
 800833a:	bfa8      	it	ge
 800833c:	461a      	movge	r2, r3
 800833e:	2a00      	cmp	r2, #0
 8008340:	4691      	mov	r9, r2
 8008342:	dc37      	bgt.n	80083b4 <_printf_float+0x364>
 8008344:	f04f 0b00 	mov.w	fp, #0
 8008348:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800834c:	f104 021a 	add.w	r2, r4, #26
 8008350:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008354:	ebaa 0309 	sub.w	r3, sl, r9
 8008358:	455b      	cmp	r3, fp
 800835a:	dc33      	bgt.n	80083c4 <_printf_float+0x374>
 800835c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008360:	429a      	cmp	r2, r3
 8008362:	db3b      	blt.n	80083dc <_printf_float+0x38c>
 8008364:	6823      	ldr	r3, [r4, #0]
 8008366:	07da      	lsls	r2, r3, #31
 8008368:	d438      	bmi.n	80083dc <_printf_float+0x38c>
 800836a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800836c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800836e:	eba3 020a 	sub.w	r2, r3, sl
 8008372:	eba3 0901 	sub.w	r9, r3, r1
 8008376:	4591      	cmp	r9, r2
 8008378:	bfa8      	it	ge
 800837a:	4691      	movge	r9, r2
 800837c:	f1b9 0f00 	cmp.w	r9, #0
 8008380:	dc34      	bgt.n	80083ec <_printf_float+0x39c>
 8008382:	f04f 0800 	mov.w	r8, #0
 8008386:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800838a:	f104 0a1a 	add.w	sl, r4, #26
 800838e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008392:	1a9b      	subs	r3, r3, r2
 8008394:	eba3 0309 	sub.w	r3, r3, r9
 8008398:	4543      	cmp	r3, r8
 800839a:	f77f af7a 	ble.w	8008292 <_printf_float+0x242>
 800839e:	2301      	movs	r3, #1
 80083a0:	4652      	mov	r2, sl
 80083a2:	4631      	mov	r1, r6
 80083a4:	4628      	mov	r0, r5
 80083a6:	47b8      	blx	r7
 80083a8:	3001      	adds	r0, #1
 80083aa:	f43f aeac 	beq.w	8008106 <_printf_float+0xb6>
 80083ae:	f108 0801 	add.w	r8, r8, #1
 80083b2:	e7ec      	b.n	800838e <_printf_float+0x33e>
 80083b4:	4613      	mov	r3, r2
 80083b6:	4631      	mov	r1, r6
 80083b8:	4642      	mov	r2, r8
 80083ba:	4628      	mov	r0, r5
 80083bc:	47b8      	blx	r7
 80083be:	3001      	adds	r0, #1
 80083c0:	d1c0      	bne.n	8008344 <_printf_float+0x2f4>
 80083c2:	e6a0      	b.n	8008106 <_printf_float+0xb6>
 80083c4:	2301      	movs	r3, #1
 80083c6:	4631      	mov	r1, r6
 80083c8:	4628      	mov	r0, r5
 80083ca:	920b      	str	r2, [sp, #44]	; 0x2c
 80083cc:	47b8      	blx	r7
 80083ce:	3001      	adds	r0, #1
 80083d0:	f43f ae99 	beq.w	8008106 <_printf_float+0xb6>
 80083d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083d6:	f10b 0b01 	add.w	fp, fp, #1
 80083da:	e7b9      	b.n	8008350 <_printf_float+0x300>
 80083dc:	4631      	mov	r1, r6
 80083de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083e2:	4628      	mov	r0, r5
 80083e4:	47b8      	blx	r7
 80083e6:	3001      	adds	r0, #1
 80083e8:	d1bf      	bne.n	800836a <_printf_float+0x31a>
 80083ea:	e68c      	b.n	8008106 <_printf_float+0xb6>
 80083ec:	464b      	mov	r3, r9
 80083ee:	4631      	mov	r1, r6
 80083f0:	4628      	mov	r0, r5
 80083f2:	eb08 020a 	add.w	r2, r8, sl
 80083f6:	47b8      	blx	r7
 80083f8:	3001      	adds	r0, #1
 80083fa:	d1c2      	bne.n	8008382 <_printf_float+0x332>
 80083fc:	e683      	b.n	8008106 <_printf_float+0xb6>
 80083fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008400:	2a01      	cmp	r2, #1
 8008402:	dc01      	bgt.n	8008408 <_printf_float+0x3b8>
 8008404:	07db      	lsls	r3, r3, #31
 8008406:	d537      	bpl.n	8008478 <_printf_float+0x428>
 8008408:	2301      	movs	r3, #1
 800840a:	4642      	mov	r2, r8
 800840c:	4631      	mov	r1, r6
 800840e:	4628      	mov	r0, r5
 8008410:	47b8      	blx	r7
 8008412:	3001      	adds	r0, #1
 8008414:	f43f ae77 	beq.w	8008106 <_printf_float+0xb6>
 8008418:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800841c:	4631      	mov	r1, r6
 800841e:	4628      	mov	r0, r5
 8008420:	47b8      	blx	r7
 8008422:	3001      	adds	r0, #1
 8008424:	f43f ae6f 	beq.w	8008106 <_printf_float+0xb6>
 8008428:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800842c:	2200      	movs	r2, #0
 800842e:	2300      	movs	r3, #0
 8008430:	f7f8 faba 	bl	80009a8 <__aeabi_dcmpeq>
 8008434:	b9d8      	cbnz	r0, 800846e <_printf_float+0x41e>
 8008436:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008438:	f108 0201 	add.w	r2, r8, #1
 800843c:	3b01      	subs	r3, #1
 800843e:	4631      	mov	r1, r6
 8008440:	4628      	mov	r0, r5
 8008442:	47b8      	blx	r7
 8008444:	3001      	adds	r0, #1
 8008446:	d10e      	bne.n	8008466 <_printf_float+0x416>
 8008448:	e65d      	b.n	8008106 <_printf_float+0xb6>
 800844a:	2301      	movs	r3, #1
 800844c:	464a      	mov	r2, r9
 800844e:	4631      	mov	r1, r6
 8008450:	4628      	mov	r0, r5
 8008452:	47b8      	blx	r7
 8008454:	3001      	adds	r0, #1
 8008456:	f43f ae56 	beq.w	8008106 <_printf_float+0xb6>
 800845a:	f108 0801 	add.w	r8, r8, #1
 800845e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008460:	3b01      	subs	r3, #1
 8008462:	4543      	cmp	r3, r8
 8008464:	dcf1      	bgt.n	800844a <_printf_float+0x3fa>
 8008466:	4653      	mov	r3, sl
 8008468:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800846c:	e6e0      	b.n	8008230 <_printf_float+0x1e0>
 800846e:	f04f 0800 	mov.w	r8, #0
 8008472:	f104 091a 	add.w	r9, r4, #26
 8008476:	e7f2      	b.n	800845e <_printf_float+0x40e>
 8008478:	2301      	movs	r3, #1
 800847a:	4642      	mov	r2, r8
 800847c:	e7df      	b.n	800843e <_printf_float+0x3ee>
 800847e:	2301      	movs	r3, #1
 8008480:	464a      	mov	r2, r9
 8008482:	4631      	mov	r1, r6
 8008484:	4628      	mov	r0, r5
 8008486:	47b8      	blx	r7
 8008488:	3001      	adds	r0, #1
 800848a:	f43f ae3c 	beq.w	8008106 <_printf_float+0xb6>
 800848e:	f108 0801 	add.w	r8, r8, #1
 8008492:	68e3      	ldr	r3, [r4, #12]
 8008494:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008496:	1a5b      	subs	r3, r3, r1
 8008498:	4543      	cmp	r3, r8
 800849a:	dcf0      	bgt.n	800847e <_printf_float+0x42e>
 800849c:	e6fd      	b.n	800829a <_printf_float+0x24a>
 800849e:	f04f 0800 	mov.w	r8, #0
 80084a2:	f104 0919 	add.w	r9, r4, #25
 80084a6:	e7f4      	b.n	8008492 <_printf_float+0x442>

080084a8 <_printf_common>:
 80084a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084ac:	4616      	mov	r6, r2
 80084ae:	4699      	mov	r9, r3
 80084b0:	688a      	ldr	r2, [r1, #8]
 80084b2:	690b      	ldr	r3, [r1, #16]
 80084b4:	4607      	mov	r7, r0
 80084b6:	4293      	cmp	r3, r2
 80084b8:	bfb8      	it	lt
 80084ba:	4613      	movlt	r3, r2
 80084bc:	6033      	str	r3, [r6, #0]
 80084be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80084c2:	460c      	mov	r4, r1
 80084c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80084c8:	b10a      	cbz	r2, 80084ce <_printf_common+0x26>
 80084ca:	3301      	adds	r3, #1
 80084cc:	6033      	str	r3, [r6, #0]
 80084ce:	6823      	ldr	r3, [r4, #0]
 80084d0:	0699      	lsls	r1, r3, #26
 80084d2:	bf42      	ittt	mi
 80084d4:	6833      	ldrmi	r3, [r6, #0]
 80084d6:	3302      	addmi	r3, #2
 80084d8:	6033      	strmi	r3, [r6, #0]
 80084da:	6825      	ldr	r5, [r4, #0]
 80084dc:	f015 0506 	ands.w	r5, r5, #6
 80084e0:	d106      	bne.n	80084f0 <_printf_common+0x48>
 80084e2:	f104 0a19 	add.w	sl, r4, #25
 80084e6:	68e3      	ldr	r3, [r4, #12]
 80084e8:	6832      	ldr	r2, [r6, #0]
 80084ea:	1a9b      	subs	r3, r3, r2
 80084ec:	42ab      	cmp	r3, r5
 80084ee:	dc28      	bgt.n	8008542 <_printf_common+0x9a>
 80084f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084f4:	1e13      	subs	r3, r2, #0
 80084f6:	6822      	ldr	r2, [r4, #0]
 80084f8:	bf18      	it	ne
 80084fa:	2301      	movne	r3, #1
 80084fc:	0692      	lsls	r2, r2, #26
 80084fe:	d42d      	bmi.n	800855c <_printf_common+0xb4>
 8008500:	4649      	mov	r1, r9
 8008502:	4638      	mov	r0, r7
 8008504:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008508:	47c0      	blx	r8
 800850a:	3001      	adds	r0, #1
 800850c:	d020      	beq.n	8008550 <_printf_common+0xa8>
 800850e:	6823      	ldr	r3, [r4, #0]
 8008510:	68e5      	ldr	r5, [r4, #12]
 8008512:	f003 0306 	and.w	r3, r3, #6
 8008516:	2b04      	cmp	r3, #4
 8008518:	bf18      	it	ne
 800851a:	2500      	movne	r5, #0
 800851c:	6832      	ldr	r2, [r6, #0]
 800851e:	f04f 0600 	mov.w	r6, #0
 8008522:	68a3      	ldr	r3, [r4, #8]
 8008524:	bf08      	it	eq
 8008526:	1aad      	subeq	r5, r5, r2
 8008528:	6922      	ldr	r2, [r4, #16]
 800852a:	bf08      	it	eq
 800852c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008530:	4293      	cmp	r3, r2
 8008532:	bfc4      	itt	gt
 8008534:	1a9b      	subgt	r3, r3, r2
 8008536:	18ed      	addgt	r5, r5, r3
 8008538:	341a      	adds	r4, #26
 800853a:	42b5      	cmp	r5, r6
 800853c:	d11a      	bne.n	8008574 <_printf_common+0xcc>
 800853e:	2000      	movs	r0, #0
 8008540:	e008      	b.n	8008554 <_printf_common+0xac>
 8008542:	2301      	movs	r3, #1
 8008544:	4652      	mov	r2, sl
 8008546:	4649      	mov	r1, r9
 8008548:	4638      	mov	r0, r7
 800854a:	47c0      	blx	r8
 800854c:	3001      	adds	r0, #1
 800854e:	d103      	bne.n	8008558 <_printf_common+0xb0>
 8008550:	f04f 30ff 	mov.w	r0, #4294967295
 8008554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008558:	3501      	adds	r5, #1
 800855a:	e7c4      	b.n	80084e6 <_printf_common+0x3e>
 800855c:	2030      	movs	r0, #48	; 0x30
 800855e:	18e1      	adds	r1, r4, r3
 8008560:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008564:	1c5a      	adds	r2, r3, #1
 8008566:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800856a:	4422      	add	r2, r4
 800856c:	3302      	adds	r3, #2
 800856e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008572:	e7c5      	b.n	8008500 <_printf_common+0x58>
 8008574:	2301      	movs	r3, #1
 8008576:	4622      	mov	r2, r4
 8008578:	4649      	mov	r1, r9
 800857a:	4638      	mov	r0, r7
 800857c:	47c0      	blx	r8
 800857e:	3001      	adds	r0, #1
 8008580:	d0e6      	beq.n	8008550 <_printf_common+0xa8>
 8008582:	3601      	adds	r6, #1
 8008584:	e7d9      	b.n	800853a <_printf_common+0x92>
	...

08008588 <_printf_i>:
 8008588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800858c:	7e0f      	ldrb	r7, [r1, #24]
 800858e:	4691      	mov	r9, r2
 8008590:	2f78      	cmp	r7, #120	; 0x78
 8008592:	4680      	mov	r8, r0
 8008594:	460c      	mov	r4, r1
 8008596:	469a      	mov	sl, r3
 8008598:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800859a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800859e:	d807      	bhi.n	80085b0 <_printf_i+0x28>
 80085a0:	2f62      	cmp	r7, #98	; 0x62
 80085a2:	d80a      	bhi.n	80085ba <_printf_i+0x32>
 80085a4:	2f00      	cmp	r7, #0
 80085a6:	f000 80d9 	beq.w	800875c <_printf_i+0x1d4>
 80085aa:	2f58      	cmp	r7, #88	; 0x58
 80085ac:	f000 80a4 	beq.w	80086f8 <_printf_i+0x170>
 80085b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80085b8:	e03a      	b.n	8008630 <_printf_i+0xa8>
 80085ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80085be:	2b15      	cmp	r3, #21
 80085c0:	d8f6      	bhi.n	80085b0 <_printf_i+0x28>
 80085c2:	a101      	add	r1, pc, #4	; (adr r1, 80085c8 <_printf_i+0x40>)
 80085c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085c8:	08008621 	.word	0x08008621
 80085cc:	08008635 	.word	0x08008635
 80085d0:	080085b1 	.word	0x080085b1
 80085d4:	080085b1 	.word	0x080085b1
 80085d8:	080085b1 	.word	0x080085b1
 80085dc:	080085b1 	.word	0x080085b1
 80085e0:	08008635 	.word	0x08008635
 80085e4:	080085b1 	.word	0x080085b1
 80085e8:	080085b1 	.word	0x080085b1
 80085ec:	080085b1 	.word	0x080085b1
 80085f0:	080085b1 	.word	0x080085b1
 80085f4:	08008743 	.word	0x08008743
 80085f8:	08008665 	.word	0x08008665
 80085fc:	08008725 	.word	0x08008725
 8008600:	080085b1 	.word	0x080085b1
 8008604:	080085b1 	.word	0x080085b1
 8008608:	08008765 	.word	0x08008765
 800860c:	080085b1 	.word	0x080085b1
 8008610:	08008665 	.word	0x08008665
 8008614:	080085b1 	.word	0x080085b1
 8008618:	080085b1 	.word	0x080085b1
 800861c:	0800872d 	.word	0x0800872d
 8008620:	682b      	ldr	r3, [r5, #0]
 8008622:	1d1a      	adds	r2, r3, #4
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	602a      	str	r2, [r5, #0]
 8008628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800862c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008630:	2301      	movs	r3, #1
 8008632:	e0a4      	b.n	800877e <_printf_i+0x1f6>
 8008634:	6820      	ldr	r0, [r4, #0]
 8008636:	6829      	ldr	r1, [r5, #0]
 8008638:	0606      	lsls	r6, r0, #24
 800863a:	f101 0304 	add.w	r3, r1, #4
 800863e:	d50a      	bpl.n	8008656 <_printf_i+0xce>
 8008640:	680e      	ldr	r6, [r1, #0]
 8008642:	602b      	str	r3, [r5, #0]
 8008644:	2e00      	cmp	r6, #0
 8008646:	da03      	bge.n	8008650 <_printf_i+0xc8>
 8008648:	232d      	movs	r3, #45	; 0x2d
 800864a:	4276      	negs	r6, r6
 800864c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008650:	230a      	movs	r3, #10
 8008652:	485e      	ldr	r0, [pc, #376]	; (80087cc <_printf_i+0x244>)
 8008654:	e019      	b.n	800868a <_printf_i+0x102>
 8008656:	680e      	ldr	r6, [r1, #0]
 8008658:	f010 0f40 	tst.w	r0, #64	; 0x40
 800865c:	602b      	str	r3, [r5, #0]
 800865e:	bf18      	it	ne
 8008660:	b236      	sxthne	r6, r6
 8008662:	e7ef      	b.n	8008644 <_printf_i+0xbc>
 8008664:	682b      	ldr	r3, [r5, #0]
 8008666:	6820      	ldr	r0, [r4, #0]
 8008668:	1d19      	adds	r1, r3, #4
 800866a:	6029      	str	r1, [r5, #0]
 800866c:	0601      	lsls	r1, r0, #24
 800866e:	d501      	bpl.n	8008674 <_printf_i+0xec>
 8008670:	681e      	ldr	r6, [r3, #0]
 8008672:	e002      	b.n	800867a <_printf_i+0xf2>
 8008674:	0646      	lsls	r6, r0, #25
 8008676:	d5fb      	bpl.n	8008670 <_printf_i+0xe8>
 8008678:	881e      	ldrh	r6, [r3, #0]
 800867a:	2f6f      	cmp	r7, #111	; 0x6f
 800867c:	bf0c      	ite	eq
 800867e:	2308      	moveq	r3, #8
 8008680:	230a      	movne	r3, #10
 8008682:	4852      	ldr	r0, [pc, #328]	; (80087cc <_printf_i+0x244>)
 8008684:	2100      	movs	r1, #0
 8008686:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800868a:	6865      	ldr	r5, [r4, #4]
 800868c:	2d00      	cmp	r5, #0
 800868e:	bfa8      	it	ge
 8008690:	6821      	ldrge	r1, [r4, #0]
 8008692:	60a5      	str	r5, [r4, #8]
 8008694:	bfa4      	itt	ge
 8008696:	f021 0104 	bicge.w	r1, r1, #4
 800869a:	6021      	strge	r1, [r4, #0]
 800869c:	b90e      	cbnz	r6, 80086a2 <_printf_i+0x11a>
 800869e:	2d00      	cmp	r5, #0
 80086a0:	d04d      	beq.n	800873e <_printf_i+0x1b6>
 80086a2:	4615      	mov	r5, r2
 80086a4:	fbb6 f1f3 	udiv	r1, r6, r3
 80086a8:	fb03 6711 	mls	r7, r3, r1, r6
 80086ac:	5dc7      	ldrb	r7, [r0, r7]
 80086ae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80086b2:	4637      	mov	r7, r6
 80086b4:	42bb      	cmp	r3, r7
 80086b6:	460e      	mov	r6, r1
 80086b8:	d9f4      	bls.n	80086a4 <_printf_i+0x11c>
 80086ba:	2b08      	cmp	r3, #8
 80086bc:	d10b      	bne.n	80086d6 <_printf_i+0x14e>
 80086be:	6823      	ldr	r3, [r4, #0]
 80086c0:	07de      	lsls	r6, r3, #31
 80086c2:	d508      	bpl.n	80086d6 <_printf_i+0x14e>
 80086c4:	6923      	ldr	r3, [r4, #16]
 80086c6:	6861      	ldr	r1, [r4, #4]
 80086c8:	4299      	cmp	r1, r3
 80086ca:	bfde      	ittt	le
 80086cc:	2330      	movle	r3, #48	; 0x30
 80086ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80086d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80086d6:	1b52      	subs	r2, r2, r5
 80086d8:	6122      	str	r2, [r4, #16]
 80086da:	464b      	mov	r3, r9
 80086dc:	4621      	mov	r1, r4
 80086de:	4640      	mov	r0, r8
 80086e0:	f8cd a000 	str.w	sl, [sp]
 80086e4:	aa03      	add	r2, sp, #12
 80086e6:	f7ff fedf 	bl	80084a8 <_printf_common>
 80086ea:	3001      	adds	r0, #1
 80086ec:	d14c      	bne.n	8008788 <_printf_i+0x200>
 80086ee:	f04f 30ff 	mov.w	r0, #4294967295
 80086f2:	b004      	add	sp, #16
 80086f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086f8:	4834      	ldr	r0, [pc, #208]	; (80087cc <_printf_i+0x244>)
 80086fa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80086fe:	6829      	ldr	r1, [r5, #0]
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	f851 6b04 	ldr.w	r6, [r1], #4
 8008706:	6029      	str	r1, [r5, #0]
 8008708:	061d      	lsls	r5, r3, #24
 800870a:	d514      	bpl.n	8008736 <_printf_i+0x1ae>
 800870c:	07df      	lsls	r7, r3, #31
 800870e:	bf44      	itt	mi
 8008710:	f043 0320 	orrmi.w	r3, r3, #32
 8008714:	6023      	strmi	r3, [r4, #0]
 8008716:	b91e      	cbnz	r6, 8008720 <_printf_i+0x198>
 8008718:	6823      	ldr	r3, [r4, #0]
 800871a:	f023 0320 	bic.w	r3, r3, #32
 800871e:	6023      	str	r3, [r4, #0]
 8008720:	2310      	movs	r3, #16
 8008722:	e7af      	b.n	8008684 <_printf_i+0xfc>
 8008724:	6823      	ldr	r3, [r4, #0]
 8008726:	f043 0320 	orr.w	r3, r3, #32
 800872a:	6023      	str	r3, [r4, #0]
 800872c:	2378      	movs	r3, #120	; 0x78
 800872e:	4828      	ldr	r0, [pc, #160]	; (80087d0 <_printf_i+0x248>)
 8008730:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008734:	e7e3      	b.n	80086fe <_printf_i+0x176>
 8008736:	0659      	lsls	r1, r3, #25
 8008738:	bf48      	it	mi
 800873a:	b2b6      	uxthmi	r6, r6
 800873c:	e7e6      	b.n	800870c <_printf_i+0x184>
 800873e:	4615      	mov	r5, r2
 8008740:	e7bb      	b.n	80086ba <_printf_i+0x132>
 8008742:	682b      	ldr	r3, [r5, #0]
 8008744:	6826      	ldr	r6, [r4, #0]
 8008746:	1d18      	adds	r0, r3, #4
 8008748:	6961      	ldr	r1, [r4, #20]
 800874a:	6028      	str	r0, [r5, #0]
 800874c:	0635      	lsls	r5, r6, #24
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	d501      	bpl.n	8008756 <_printf_i+0x1ce>
 8008752:	6019      	str	r1, [r3, #0]
 8008754:	e002      	b.n	800875c <_printf_i+0x1d4>
 8008756:	0670      	lsls	r0, r6, #25
 8008758:	d5fb      	bpl.n	8008752 <_printf_i+0x1ca>
 800875a:	8019      	strh	r1, [r3, #0]
 800875c:	2300      	movs	r3, #0
 800875e:	4615      	mov	r5, r2
 8008760:	6123      	str	r3, [r4, #16]
 8008762:	e7ba      	b.n	80086da <_printf_i+0x152>
 8008764:	682b      	ldr	r3, [r5, #0]
 8008766:	2100      	movs	r1, #0
 8008768:	1d1a      	adds	r2, r3, #4
 800876a:	602a      	str	r2, [r5, #0]
 800876c:	681d      	ldr	r5, [r3, #0]
 800876e:	6862      	ldr	r2, [r4, #4]
 8008770:	4628      	mov	r0, r5
 8008772:	f002 faef 	bl	800ad54 <memchr>
 8008776:	b108      	cbz	r0, 800877c <_printf_i+0x1f4>
 8008778:	1b40      	subs	r0, r0, r5
 800877a:	6060      	str	r0, [r4, #4]
 800877c:	6863      	ldr	r3, [r4, #4]
 800877e:	6123      	str	r3, [r4, #16]
 8008780:	2300      	movs	r3, #0
 8008782:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008786:	e7a8      	b.n	80086da <_printf_i+0x152>
 8008788:	462a      	mov	r2, r5
 800878a:	4649      	mov	r1, r9
 800878c:	4640      	mov	r0, r8
 800878e:	6923      	ldr	r3, [r4, #16]
 8008790:	47d0      	blx	sl
 8008792:	3001      	adds	r0, #1
 8008794:	d0ab      	beq.n	80086ee <_printf_i+0x166>
 8008796:	6823      	ldr	r3, [r4, #0]
 8008798:	079b      	lsls	r3, r3, #30
 800879a:	d413      	bmi.n	80087c4 <_printf_i+0x23c>
 800879c:	68e0      	ldr	r0, [r4, #12]
 800879e:	9b03      	ldr	r3, [sp, #12]
 80087a0:	4298      	cmp	r0, r3
 80087a2:	bfb8      	it	lt
 80087a4:	4618      	movlt	r0, r3
 80087a6:	e7a4      	b.n	80086f2 <_printf_i+0x16a>
 80087a8:	2301      	movs	r3, #1
 80087aa:	4632      	mov	r2, r6
 80087ac:	4649      	mov	r1, r9
 80087ae:	4640      	mov	r0, r8
 80087b0:	47d0      	blx	sl
 80087b2:	3001      	adds	r0, #1
 80087b4:	d09b      	beq.n	80086ee <_printf_i+0x166>
 80087b6:	3501      	adds	r5, #1
 80087b8:	68e3      	ldr	r3, [r4, #12]
 80087ba:	9903      	ldr	r1, [sp, #12]
 80087bc:	1a5b      	subs	r3, r3, r1
 80087be:	42ab      	cmp	r3, r5
 80087c0:	dcf2      	bgt.n	80087a8 <_printf_i+0x220>
 80087c2:	e7eb      	b.n	800879c <_printf_i+0x214>
 80087c4:	2500      	movs	r5, #0
 80087c6:	f104 0619 	add.w	r6, r4, #25
 80087ca:	e7f5      	b.n	80087b8 <_printf_i+0x230>
 80087cc:	0800d11a 	.word	0x0800d11a
 80087d0:	0800d12b 	.word	0x0800d12b

080087d4 <_scanf_float>:
 80087d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087d8:	b087      	sub	sp, #28
 80087da:	9303      	str	r3, [sp, #12]
 80087dc:	688b      	ldr	r3, [r1, #8]
 80087de:	4617      	mov	r7, r2
 80087e0:	1e5a      	subs	r2, r3, #1
 80087e2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80087e6:	bf85      	ittet	hi
 80087e8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80087ec:	195b      	addhi	r3, r3, r5
 80087ee:	2300      	movls	r3, #0
 80087f0:	9302      	strhi	r3, [sp, #8]
 80087f2:	bf88      	it	hi
 80087f4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80087f8:	468b      	mov	fp, r1
 80087fa:	f04f 0500 	mov.w	r5, #0
 80087fe:	bf8c      	ite	hi
 8008800:	608b      	strhi	r3, [r1, #8]
 8008802:	9302      	strls	r3, [sp, #8]
 8008804:	680b      	ldr	r3, [r1, #0]
 8008806:	4680      	mov	r8, r0
 8008808:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800880c:	f84b 3b1c 	str.w	r3, [fp], #28
 8008810:	460c      	mov	r4, r1
 8008812:	465e      	mov	r6, fp
 8008814:	46aa      	mov	sl, r5
 8008816:	46a9      	mov	r9, r5
 8008818:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800881c:	9501      	str	r5, [sp, #4]
 800881e:	68a2      	ldr	r2, [r4, #8]
 8008820:	b152      	cbz	r2, 8008838 <_scanf_float+0x64>
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	2b4e      	cmp	r3, #78	; 0x4e
 8008828:	d864      	bhi.n	80088f4 <_scanf_float+0x120>
 800882a:	2b40      	cmp	r3, #64	; 0x40
 800882c:	d83c      	bhi.n	80088a8 <_scanf_float+0xd4>
 800882e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008832:	b2c8      	uxtb	r0, r1
 8008834:	280e      	cmp	r0, #14
 8008836:	d93a      	bls.n	80088ae <_scanf_float+0xda>
 8008838:	f1b9 0f00 	cmp.w	r9, #0
 800883c:	d003      	beq.n	8008846 <_scanf_float+0x72>
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008844:	6023      	str	r3, [r4, #0]
 8008846:	f10a 3aff 	add.w	sl, sl, #4294967295
 800884a:	f1ba 0f01 	cmp.w	sl, #1
 800884e:	f200 8113 	bhi.w	8008a78 <_scanf_float+0x2a4>
 8008852:	455e      	cmp	r6, fp
 8008854:	f200 8105 	bhi.w	8008a62 <_scanf_float+0x28e>
 8008858:	2501      	movs	r5, #1
 800885a:	4628      	mov	r0, r5
 800885c:	b007      	add	sp, #28
 800885e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008862:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008866:	2a0d      	cmp	r2, #13
 8008868:	d8e6      	bhi.n	8008838 <_scanf_float+0x64>
 800886a:	a101      	add	r1, pc, #4	; (adr r1, 8008870 <_scanf_float+0x9c>)
 800886c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008870:	080089af 	.word	0x080089af
 8008874:	08008839 	.word	0x08008839
 8008878:	08008839 	.word	0x08008839
 800887c:	08008839 	.word	0x08008839
 8008880:	08008a0f 	.word	0x08008a0f
 8008884:	080089e7 	.word	0x080089e7
 8008888:	08008839 	.word	0x08008839
 800888c:	08008839 	.word	0x08008839
 8008890:	080089bd 	.word	0x080089bd
 8008894:	08008839 	.word	0x08008839
 8008898:	08008839 	.word	0x08008839
 800889c:	08008839 	.word	0x08008839
 80088a0:	08008839 	.word	0x08008839
 80088a4:	08008975 	.word	0x08008975
 80088a8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80088ac:	e7db      	b.n	8008866 <_scanf_float+0x92>
 80088ae:	290e      	cmp	r1, #14
 80088b0:	d8c2      	bhi.n	8008838 <_scanf_float+0x64>
 80088b2:	a001      	add	r0, pc, #4	; (adr r0, 80088b8 <_scanf_float+0xe4>)
 80088b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80088b8:	08008967 	.word	0x08008967
 80088bc:	08008839 	.word	0x08008839
 80088c0:	08008967 	.word	0x08008967
 80088c4:	080089fb 	.word	0x080089fb
 80088c8:	08008839 	.word	0x08008839
 80088cc:	08008915 	.word	0x08008915
 80088d0:	08008951 	.word	0x08008951
 80088d4:	08008951 	.word	0x08008951
 80088d8:	08008951 	.word	0x08008951
 80088dc:	08008951 	.word	0x08008951
 80088e0:	08008951 	.word	0x08008951
 80088e4:	08008951 	.word	0x08008951
 80088e8:	08008951 	.word	0x08008951
 80088ec:	08008951 	.word	0x08008951
 80088f0:	08008951 	.word	0x08008951
 80088f4:	2b6e      	cmp	r3, #110	; 0x6e
 80088f6:	d809      	bhi.n	800890c <_scanf_float+0x138>
 80088f8:	2b60      	cmp	r3, #96	; 0x60
 80088fa:	d8b2      	bhi.n	8008862 <_scanf_float+0x8e>
 80088fc:	2b54      	cmp	r3, #84	; 0x54
 80088fe:	d077      	beq.n	80089f0 <_scanf_float+0x21c>
 8008900:	2b59      	cmp	r3, #89	; 0x59
 8008902:	d199      	bne.n	8008838 <_scanf_float+0x64>
 8008904:	2d07      	cmp	r5, #7
 8008906:	d197      	bne.n	8008838 <_scanf_float+0x64>
 8008908:	2508      	movs	r5, #8
 800890a:	e029      	b.n	8008960 <_scanf_float+0x18c>
 800890c:	2b74      	cmp	r3, #116	; 0x74
 800890e:	d06f      	beq.n	80089f0 <_scanf_float+0x21c>
 8008910:	2b79      	cmp	r3, #121	; 0x79
 8008912:	e7f6      	b.n	8008902 <_scanf_float+0x12e>
 8008914:	6821      	ldr	r1, [r4, #0]
 8008916:	05c8      	lsls	r0, r1, #23
 8008918:	d51a      	bpl.n	8008950 <_scanf_float+0x17c>
 800891a:	9b02      	ldr	r3, [sp, #8]
 800891c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008920:	6021      	str	r1, [r4, #0]
 8008922:	f109 0901 	add.w	r9, r9, #1
 8008926:	b11b      	cbz	r3, 8008930 <_scanf_float+0x15c>
 8008928:	3b01      	subs	r3, #1
 800892a:	3201      	adds	r2, #1
 800892c:	9302      	str	r3, [sp, #8]
 800892e:	60a2      	str	r2, [r4, #8]
 8008930:	68a3      	ldr	r3, [r4, #8]
 8008932:	3b01      	subs	r3, #1
 8008934:	60a3      	str	r3, [r4, #8]
 8008936:	6923      	ldr	r3, [r4, #16]
 8008938:	3301      	adds	r3, #1
 800893a:	6123      	str	r3, [r4, #16]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	3b01      	subs	r3, #1
 8008940:	2b00      	cmp	r3, #0
 8008942:	607b      	str	r3, [r7, #4]
 8008944:	f340 8084 	ble.w	8008a50 <_scanf_float+0x27c>
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	3301      	adds	r3, #1
 800894c:	603b      	str	r3, [r7, #0]
 800894e:	e766      	b.n	800881e <_scanf_float+0x4a>
 8008950:	eb1a 0f05 	cmn.w	sl, r5
 8008954:	f47f af70 	bne.w	8008838 <_scanf_float+0x64>
 8008958:	6822      	ldr	r2, [r4, #0]
 800895a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800895e:	6022      	str	r2, [r4, #0]
 8008960:	f806 3b01 	strb.w	r3, [r6], #1
 8008964:	e7e4      	b.n	8008930 <_scanf_float+0x15c>
 8008966:	6822      	ldr	r2, [r4, #0]
 8008968:	0610      	lsls	r0, r2, #24
 800896a:	f57f af65 	bpl.w	8008838 <_scanf_float+0x64>
 800896e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008972:	e7f4      	b.n	800895e <_scanf_float+0x18a>
 8008974:	f1ba 0f00 	cmp.w	sl, #0
 8008978:	d10e      	bne.n	8008998 <_scanf_float+0x1c4>
 800897a:	f1b9 0f00 	cmp.w	r9, #0
 800897e:	d10e      	bne.n	800899e <_scanf_float+0x1ca>
 8008980:	6822      	ldr	r2, [r4, #0]
 8008982:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008986:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800898a:	d108      	bne.n	800899e <_scanf_float+0x1ca>
 800898c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008990:	f04f 0a01 	mov.w	sl, #1
 8008994:	6022      	str	r2, [r4, #0]
 8008996:	e7e3      	b.n	8008960 <_scanf_float+0x18c>
 8008998:	f1ba 0f02 	cmp.w	sl, #2
 800899c:	d055      	beq.n	8008a4a <_scanf_float+0x276>
 800899e:	2d01      	cmp	r5, #1
 80089a0:	d002      	beq.n	80089a8 <_scanf_float+0x1d4>
 80089a2:	2d04      	cmp	r5, #4
 80089a4:	f47f af48 	bne.w	8008838 <_scanf_float+0x64>
 80089a8:	3501      	adds	r5, #1
 80089aa:	b2ed      	uxtb	r5, r5
 80089ac:	e7d8      	b.n	8008960 <_scanf_float+0x18c>
 80089ae:	f1ba 0f01 	cmp.w	sl, #1
 80089b2:	f47f af41 	bne.w	8008838 <_scanf_float+0x64>
 80089b6:	f04f 0a02 	mov.w	sl, #2
 80089ba:	e7d1      	b.n	8008960 <_scanf_float+0x18c>
 80089bc:	b97d      	cbnz	r5, 80089de <_scanf_float+0x20a>
 80089be:	f1b9 0f00 	cmp.w	r9, #0
 80089c2:	f47f af3c 	bne.w	800883e <_scanf_float+0x6a>
 80089c6:	6822      	ldr	r2, [r4, #0]
 80089c8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80089cc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80089d0:	f47f af39 	bne.w	8008846 <_scanf_float+0x72>
 80089d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80089d8:	2501      	movs	r5, #1
 80089da:	6022      	str	r2, [r4, #0]
 80089dc:	e7c0      	b.n	8008960 <_scanf_float+0x18c>
 80089de:	2d03      	cmp	r5, #3
 80089e0:	d0e2      	beq.n	80089a8 <_scanf_float+0x1d4>
 80089e2:	2d05      	cmp	r5, #5
 80089e4:	e7de      	b.n	80089a4 <_scanf_float+0x1d0>
 80089e6:	2d02      	cmp	r5, #2
 80089e8:	f47f af26 	bne.w	8008838 <_scanf_float+0x64>
 80089ec:	2503      	movs	r5, #3
 80089ee:	e7b7      	b.n	8008960 <_scanf_float+0x18c>
 80089f0:	2d06      	cmp	r5, #6
 80089f2:	f47f af21 	bne.w	8008838 <_scanf_float+0x64>
 80089f6:	2507      	movs	r5, #7
 80089f8:	e7b2      	b.n	8008960 <_scanf_float+0x18c>
 80089fa:	6822      	ldr	r2, [r4, #0]
 80089fc:	0591      	lsls	r1, r2, #22
 80089fe:	f57f af1b 	bpl.w	8008838 <_scanf_float+0x64>
 8008a02:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008a06:	6022      	str	r2, [r4, #0]
 8008a08:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a0c:	e7a8      	b.n	8008960 <_scanf_float+0x18c>
 8008a0e:	6822      	ldr	r2, [r4, #0]
 8008a10:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008a14:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008a18:	d006      	beq.n	8008a28 <_scanf_float+0x254>
 8008a1a:	0550      	lsls	r0, r2, #21
 8008a1c:	f57f af0c 	bpl.w	8008838 <_scanf_float+0x64>
 8008a20:	f1b9 0f00 	cmp.w	r9, #0
 8008a24:	f43f af0f 	beq.w	8008846 <_scanf_float+0x72>
 8008a28:	0591      	lsls	r1, r2, #22
 8008a2a:	bf58      	it	pl
 8008a2c:	9901      	ldrpl	r1, [sp, #4]
 8008a2e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a32:	bf58      	it	pl
 8008a34:	eba9 0101 	subpl.w	r1, r9, r1
 8008a38:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008a3c:	f04f 0900 	mov.w	r9, #0
 8008a40:	bf58      	it	pl
 8008a42:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008a46:	6022      	str	r2, [r4, #0]
 8008a48:	e78a      	b.n	8008960 <_scanf_float+0x18c>
 8008a4a:	f04f 0a03 	mov.w	sl, #3
 8008a4e:	e787      	b.n	8008960 <_scanf_float+0x18c>
 8008a50:	4639      	mov	r1, r7
 8008a52:	4640      	mov	r0, r8
 8008a54:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008a58:	4798      	blx	r3
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	f43f aedf 	beq.w	800881e <_scanf_float+0x4a>
 8008a60:	e6ea      	b.n	8008838 <_scanf_float+0x64>
 8008a62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a66:	463a      	mov	r2, r7
 8008a68:	4640      	mov	r0, r8
 8008a6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a6e:	4798      	blx	r3
 8008a70:	6923      	ldr	r3, [r4, #16]
 8008a72:	3b01      	subs	r3, #1
 8008a74:	6123      	str	r3, [r4, #16]
 8008a76:	e6ec      	b.n	8008852 <_scanf_float+0x7e>
 8008a78:	1e6b      	subs	r3, r5, #1
 8008a7a:	2b06      	cmp	r3, #6
 8008a7c:	d825      	bhi.n	8008aca <_scanf_float+0x2f6>
 8008a7e:	2d02      	cmp	r5, #2
 8008a80:	d836      	bhi.n	8008af0 <_scanf_float+0x31c>
 8008a82:	455e      	cmp	r6, fp
 8008a84:	f67f aee8 	bls.w	8008858 <_scanf_float+0x84>
 8008a88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a8c:	463a      	mov	r2, r7
 8008a8e:	4640      	mov	r0, r8
 8008a90:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a94:	4798      	blx	r3
 8008a96:	6923      	ldr	r3, [r4, #16]
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	6123      	str	r3, [r4, #16]
 8008a9c:	e7f1      	b.n	8008a82 <_scanf_float+0x2ae>
 8008a9e:	9802      	ldr	r0, [sp, #8]
 8008aa0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008aa4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008aa8:	463a      	mov	r2, r7
 8008aaa:	9002      	str	r0, [sp, #8]
 8008aac:	4640      	mov	r0, r8
 8008aae:	4798      	blx	r3
 8008ab0:	6923      	ldr	r3, [r4, #16]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	6123      	str	r3, [r4, #16]
 8008ab6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008aba:	fa5f fa8a 	uxtb.w	sl, sl
 8008abe:	f1ba 0f02 	cmp.w	sl, #2
 8008ac2:	d1ec      	bne.n	8008a9e <_scanf_float+0x2ca>
 8008ac4:	3d03      	subs	r5, #3
 8008ac6:	b2ed      	uxtb	r5, r5
 8008ac8:	1b76      	subs	r6, r6, r5
 8008aca:	6823      	ldr	r3, [r4, #0]
 8008acc:	05da      	lsls	r2, r3, #23
 8008ace:	d52f      	bpl.n	8008b30 <_scanf_float+0x35c>
 8008ad0:	055b      	lsls	r3, r3, #21
 8008ad2:	d510      	bpl.n	8008af6 <_scanf_float+0x322>
 8008ad4:	455e      	cmp	r6, fp
 8008ad6:	f67f aebf 	bls.w	8008858 <_scanf_float+0x84>
 8008ada:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ade:	463a      	mov	r2, r7
 8008ae0:	4640      	mov	r0, r8
 8008ae2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ae6:	4798      	blx	r3
 8008ae8:	6923      	ldr	r3, [r4, #16]
 8008aea:	3b01      	subs	r3, #1
 8008aec:	6123      	str	r3, [r4, #16]
 8008aee:	e7f1      	b.n	8008ad4 <_scanf_float+0x300>
 8008af0:	46aa      	mov	sl, r5
 8008af2:	9602      	str	r6, [sp, #8]
 8008af4:	e7df      	b.n	8008ab6 <_scanf_float+0x2e2>
 8008af6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008afa:	6923      	ldr	r3, [r4, #16]
 8008afc:	2965      	cmp	r1, #101	; 0x65
 8008afe:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b02:	f106 35ff 	add.w	r5, r6, #4294967295
 8008b06:	6123      	str	r3, [r4, #16]
 8008b08:	d00c      	beq.n	8008b24 <_scanf_float+0x350>
 8008b0a:	2945      	cmp	r1, #69	; 0x45
 8008b0c:	d00a      	beq.n	8008b24 <_scanf_float+0x350>
 8008b0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b12:	463a      	mov	r2, r7
 8008b14:	4640      	mov	r0, r8
 8008b16:	4798      	blx	r3
 8008b18:	6923      	ldr	r3, [r4, #16]
 8008b1a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	1eb5      	subs	r5, r6, #2
 8008b22:	6123      	str	r3, [r4, #16]
 8008b24:	463a      	mov	r2, r7
 8008b26:	4640      	mov	r0, r8
 8008b28:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b2c:	4798      	blx	r3
 8008b2e:	462e      	mov	r6, r5
 8008b30:	6825      	ldr	r5, [r4, #0]
 8008b32:	f015 0510 	ands.w	r5, r5, #16
 8008b36:	d155      	bne.n	8008be4 <_scanf_float+0x410>
 8008b38:	7035      	strb	r5, [r6, #0]
 8008b3a:	6823      	ldr	r3, [r4, #0]
 8008b3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b44:	d11b      	bne.n	8008b7e <_scanf_float+0x3aa>
 8008b46:	9b01      	ldr	r3, [sp, #4]
 8008b48:	454b      	cmp	r3, r9
 8008b4a:	eba3 0209 	sub.w	r2, r3, r9
 8008b4e:	d123      	bne.n	8008b98 <_scanf_float+0x3c4>
 8008b50:	2200      	movs	r2, #0
 8008b52:	4659      	mov	r1, fp
 8008b54:	4640      	mov	r0, r8
 8008b56:	f000 fe7b 	bl	8009850 <_strtod_r>
 8008b5a:	6822      	ldr	r2, [r4, #0]
 8008b5c:	9b03      	ldr	r3, [sp, #12]
 8008b5e:	f012 0f02 	tst.w	r2, #2
 8008b62:	4606      	mov	r6, r0
 8008b64:	460f      	mov	r7, r1
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	d021      	beq.n	8008bae <_scanf_float+0x3da>
 8008b6a:	1d1a      	adds	r2, r3, #4
 8008b6c:	9903      	ldr	r1, [sp, #12]
 8008b6e:	600a      	str	r2, [r1, #0]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	e9c3 6700 	strd	r6, r7, [r3]
 8008b76:	68e3      	ldr	r3, [r4, #12]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	60e3      	str	r3, [r4, #12]
 8008b7c:	e66d      	b.n	800885a <_scanf_float+0x86>
 8008b7e:	9b04      	ldr	r3, [sp, #16]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d0e5      	beq.n	8008b50 <_scanf_float+0x37c>
 8008b84:	9905      	ldr	r1, [sp, #20]
 8008b86:	230a      	movs	r3, #10
 8008b88:	462a      	mov	r2, r5
 8008b8a:	4640      	mov	r0, r8
 8008b8c:	3101      	adds	r1, #1
 8008b8e:	f000 fee1 	bl	8009954 <_strtol_r>
 8008b92:	9b04      	ldr	r3, [sp, #16]
 8008b94:	9e05      	ldr	r6, [sp, #20]
 8008b96:	1ac2      	subs	r2, r0, r3
 8008b98:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008b9c:	429e      	cmp	r6, r3
 8008b9e:	bf28      	it	cs
 8008ba0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	4910      	ldr	r1, [pc, #64]	; (8008be8 <_scanf_float+0x414>)
 8008ba8:	f000 f826 	bl	8008bf8 <siprintf>
 8008bac:	e7d0      	b.n	8008b50 <_scanf_float+0x37c>
 8008bae:	f012 0f04 	tst.w	r2, #4
 8008bb2:	f103 0204 	add.w	r2, r3, #4
 8008bb6:	d1d9      	bne.n	8008b6c <_scanf_float+0x398>
 8008bb8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8008bbc:	f8cc 2000 	str.w	r2, [ip]
 8008bc0:	f8d3 8000 	ldr.w	r8, [r3]
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	f7f7 ff20 	bl	8000a0c <__aeabi_dcmpun>
 8008bcc:	b128      	cbz	r0, 8008bda <_scanf_float+0x406>
 8008bce:	4807      	ldr	r0, [pc, #28]	; (8008bec <_scanf_float+0x418>)
 8008bd0:	f000 f80e 	bl	8008bf0 <nanf>
 8008bd4:	f8c8 0000 	str.w	r0, [r8]
 8008bd8:	e7cd      	b.n	8008b76 <_scanf_float+0x3a2>
 8008bda:	4630      	mov	r0, r6
 8008bdc:	4639      	mov	r1, r7
 8008bde:	f7f7 ff73 	bl	8000ac8 <__aeabi_d2f>
 8008be2:	e7f7      	b.n	8008bd4 <_scanf_float+0x400>
 8008be4:	2500      	movs	r5, #0
 8008be6:	e638      	b.n	800885a <_scanf_float+0x86>
 8008be8:	0800d13c 	.word	0x0800d13c
 8008bec:	0800d548 	.word	0x0800d548

08008bf0 <nanf>:
 8008bf0:	4800      	ldr	r0, [pc, #0]	; (8008bf4 <nanf+0x4>)
 8008bf2:	4770      	bx	lr
 8008bf4:	7fc00000 	.word	0x7fc00000

08008bf8 <siprintf>:
 8008bf8:	b40e      	push	{r1, r2, r3}
 8008bfa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008bfe:	b500      	push	{lr}
 8008c00:	b09c      	sub	sp, #112	; 0x70
 8008c02:	ab1d      	add	r3, sp, #116	; 0x74
 8008c04:	9002      	str	r0, [sp, #8]
 8008c06:	9006      	str	r0, [sp, #24]
 8008c08:	9107      	str	r1, [sp, #28]
 8008c0a:	9104      	str	r1, [sp, #16]
 8008c0c:	4808      	ldr	r0, [pc, #32]	; (8008c30 <siprintf+0x38>)
 8008c0e:	4909      	ldr	r1, [pc, #36]	; (8008c34 <siprintf+0x3c>)
 8008c10:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c14:	9105      	str	r1, [sp, #20]
 8008c16:	6800      	ldr	r0, [r0, #0]
 8008c18:	a902      	add	r1, sp, #8
 8008c1a:	9301      	str	r3, [sp, #4]
 8008c1c:	f002 feba 	bl	800b994 <_svfiprintf_r>
 8008c20:	2200      	movs	r2, #0
 8008c22:	9b02      	ldr	r3, [sp, #8]
 8008c24:	701a      	strb	r2, [r3, #0]
 8008c26:	b01c      	add	sp, #112	; 0x70
 8008c28:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c2c:	b003      	add	sp, #12
 8008c2e:	4770      	bx	lr
 8008c30:	200000a0 	.word	0x200000a0
 8008c34:	ffff0208 	.word	0xffff0208

08008c38 <sulp>:
 8008c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c3c:	460f      	mov	r7, r1
 8008c3e:	4690      	mov	r8, r2
 8008c40:	f002 fc14 	bl	800b46c <__ulp>
 8008c44:	4604      	mov	r4, r0
 8008c46:	460d      	mov	r5, r1
 8008c48:	f1b8 0f00 	cmp.w	r8, #0
 8008c4c:	d011      	beq.n	8008c72 <sulp+0x3a>
 8008c4e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8008c52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	dd0b      	ble.n	8008c72 <sulp+0x3a>
 8008c5a:	2400      	movs	r4, #0
 8008c5c:	051b      	lsls	r3, r3, #20
 8008c5e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008c62:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008c66:	4622      	mov	r2, r4
 8008c68:	462b      	mov	r3, r5
 8008c6a:	f7f7 fc35 	bl	80004d8 <__aeabi_dmul>
 8008c6e:	4604      	mov	r4, r0
 8008c70:	460d      	mov	r5, r1
 8008c72:	4620      	mov	r0, r4
 8008c74:	4629      	mov	r1, r5
 8008c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c7a:	0000      	movs	r0, r0
 8008c7c:	0000      	movs	r0, r0
	...

08008c80 <_strtod_l>:
 8008c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c84:	469b      	mov	fp, r3
 8008c86:	2300      	movs	r3, #0
 8008c88:	b09f      	sub	sp, #124	; 0x7c
 8008c8a:	931a      	str	r3, [sp, #104]	; 0x68
 8008c8c:	4b9e      	ldr	r3, [pc, #632]	; (8008f08 <_strtod_l+0x288>)
 8008c8e:	4682      	mov	sl, r0
 8008c90:	681f      	ldr	r7, [r3, #0]
 8008c92:	460e      	mov	r6, r1
 8008c94:	4638      	mov	r0, r7
 8008c96:	9215      	str	r2, [sp, #84]	; 0x54
 8008c98:	f7f7 fa5a 	bl	8000150 <strlen>
 8008c9c:	f04f 0800 	mov.w	r8, #0
 8008ca0:	4604      	mov	r4, r0
 8008ca2:	f04f 0900 	mov.w	r9, #0
 8008ca6:	9619      	str	r6, [sp, #100]	; 0x64
 8008ca8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008caa:	781a      	ldrb	r2, [r3, #0]
 8008cac:	2a2b      	cmp	r2, #43	; 0x2b
 8008cae:	d04c      	beq.n	8008d4a <_strtod_l+0xca>
 8008cb0:	d83a      	bhi.n	8008d28 <_strtod_l+0xa8>
 8008cb2:	2a0d      	cmp	r2, #13
 8008cb4:	d833      	bhi.n	8008d1e <_strtod_l+0x9e>
 8008cb6:	2a08      	cmp	r2, #8
 8008cb8:	d833      	bhi.n	8008d22 <_strtod_l+0xa2>
 8008cba:	2a00      	cmp	r2, #0
 8008cbc:	d03d      	beq.n	8008d3a <_strtod_l+0xba>
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	930a      	str	r3, [sp, #40]	; 0x28
 8008cc2:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8008cc4:	782b      	ldrb	r3, [r5, #0]
 8008cc6:	2b30      	cmp	r3, #48	; 0x30
 8008cc8:	f040 80aa 	bne.w	8008e20 <_strtod_l+0x1a0>
 8008ccc:	786b      	ldrb	r3, [r5, #1]
 8008cce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008cd2:	2b58      	cmp	r3, #88	; 0x58
 8008cd4:	d166      	bne.n	8008da4 <_strtod_l+0x124>
 8008cd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cd8:	4650      	mov	r0, sl
 8008cda:	9301      	str	r3, [sp, #4]
 8008cdc:	ab1a      	add	r3, sp, #104	; 0x68
 8008cde:	9300      	str	r3, [sp, #0]
 8008ce0:	4a8a      	ldr	r2, [pc, #552]	; (8008f0c <_strtod_l+0x28c>)
 8008ce2:	f8cd b008 	str.w	fp, [sp, #8]
 8008ce6:	ab1b      	add	r3, sp, #108	; 0x6c
 8008ce8:	a919      	add	r1, sp, #100	; 0x64
 8008cea:	f001 fd17 	bl	800a71c <__gethex>
 8008cee:	f010 0607 	ands.w	r6, r0, #7
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	d005      	beq.n	8008d02 <_strtod_l+0x82>
 8008cf6:	2e06      	cmp	r6, #6
 8008cf8:	d129      	bne.n	8008d4e <_strtod_l+0xce>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	3501      	adds	r5, #1
 8008cfe:	9519      	str	r5, [sp, #100]	; 0x64
 8008d00:	930a      	str	r3, [sp, #40]	; 0x28
 8008d02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	f040 858a 	bne.w	800981e <_strtod_l+0xb9e>
 8008d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d0c:	b1d3      	cbz	r3, 8008d44 <_strtod_l+0xc4>
 8008d0e:	4642      	mov	r2, r8
 8008d10:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008d14:	4610      	mov	r0, r2
 8008d16:	4619      	mov	r1, r3
 8008d18:	b01f      	add	sp, #124	; 0x7c
 8008d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d1e:	2a20      	cmp	r2, #32
 8008d20:	d1cd      	bne.n	8008cbe <_strtod_l+0x3e>
 8008d22:	3301      	adds	r3, #1
 8008d24:	9319      	str	r3, [sp, #100]	; 0x64
 8008d26:	e7bf      	b.n	8008ca8 <_strtod_l+0x28>
 8008d28:	2a2d      	cmp	r2, #45	; 0x2d
 8008d2a:	d1c8      	bne.n	8008cbe <_strtod_l+0x3e>
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	920a      	str	r2, [sp, #40]	; 0x28
 8008d30:	1c5a      	adds	r2, r3, #1
 8008d32:	9219      	str	r2, [sp, #100]	; 0x64
 8008d34:	785b      	ldrb	r3, [r3, #1]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d1c3      	bne.n	8008cc2 <_strtod_l+0x42>
 8008d3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d3c:	9619      	str	r6, [sp, #100]	; 0x64
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	f040 856b 	bne.w	800981a <_strtod_l+0xb9a>
 8008d44:	4642      	mov	r2, r8
 8008d46:	464b      	mov	r3, r9
 8008d48:	e7e4      	b.n	8008d14 <_strtod_l+0x94>
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	e7ef      	b.n	8008d2e <_strtod_l+0xae>
 8008d4e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008d50:	b13a      	cbz	r2, 8008d62 <_strtod_l+0xe2>
 8008d52:	2135      	movs	r1, #53	; 0x35
 8008d54:	a81c      	add	r0, sp, #112	; 0x70
 8008d56:	f002 fc8d 	bl	800b674 <__copybits>
 8008d5a:	4650      	mov	r0, sl
 8008d5c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008d5e:	f002 f855 	bl	800ae0c <_Bfree>
 8008d62:	3e01      	subs	r6, #1
 8008d64:	2e04      	cmp	r6, #4
 8008d66:	d806      	bhi.n	8008d76 <_strtod_l+0xf6>
 8008d68:	e8df f006 	tbb	[pc, r6]
 8008d6c:	1714030a 	.word	0x1714030a
 8008d70:	0a          	.byte	0x0a
 8008d71:	00          	.byte	0x00
 8008d72:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8008d76:	0721      	lsls	r1, r4, #28
 8008d78:	d5c3      	bpl.n	8008d02 <_strtod_l+0x82>
 8008d7a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008d7e:	e7c0      	b.n	8008d02 <_strtod_l+0x82>
 8008d80:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008d82:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8008d86:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008d8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008d8e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008d92:	e7f0      	b.n	8008d76 <_strtod_l+0xf6>
 8008d94:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008f10 <_strtod_l+0x290>
 8008d98:	e7ed      	b.n	8008d76 <_strtod_l+0xf6>
 8008d9a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008d9e:	f04f 38ff 	mov.w	r8, #4294967295
 8008da2:	e7e8      	b.n	8008d76 <_strtod_l+0xf6>
 8008da4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008da6:	1c5a      	adds	r2, r3, #1
 8008da8:	9219      	str	r2, [sp, #100]	; 0x64
 8008daa:	785b      	ldrb	r3, [r3, #1]
 8008dac:	2b30      	cmp	r3, #48	; 0x30
 8008dae:	d0f9      	beq.n	8008da4 <_strtod_l+0x124>
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d0a6      	beq.n	8008d02 <_strtod_l+0x82>
 8008db4:	2301      	movs	r3, #1
 8008db6:	9307      	str	r3, [sp, #28]
 8008db8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008dba:	220a      	movs	r2, #10
 8008dbc:	9308      	str	r3, [sp, #32]
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	469b      	mov	fp, r3
 8008dc2:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008dc6:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008dc8:	7805      	ldrb	r5, [r0, #0]
 8008dca:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8008dce:	b2d9      	uxtb	r1, r3
 8008dd0:	2909      	cmp	r1, #9
 8008dd2:	d927      	bls.n	8008e24 <_strtod_l+0x1a4>
 8008dd4:	4622      	mov	r2, r4
 8008dd6:	4639      	mov	r1, r7
 8008dd8:	f002 fef2 	bl	800bbc0 <strncmp>
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	d033      	beq.n	8008e48 <_strtod_l+0x1c8>
 8008de0:	2000      	movs	r0, #0
 8008de2:	462a      	mov	r2, r5
 8008de4:	465c      	mov	r4, fp
 8008de6:	4603      	mov	r3, r0
 8008de8:	9004      	str	r0, [sp, #16]
 8008dea:	2a65      	cmp	r2, #101	; 0x65
 8008dec:	d001      	beq.n	8008df2 <_strtod_l+0x172>
 8008dee:	2a45      	cmp	r2, #69	; 0x45
 8008df0:	d114      	bne.n	8008e1c <_strtod_l+0x19c>
 8008df2:	b91c      	cbnz	r4, 8008dfc <_strtod_l+0x17c>
 8008df4:	9a07      	ldr	r2, [sp, #28]
 8008df6:	4302      	orrs	r2, r0
 8008df8:	d09f      	beq.n	8008d3a <_strtod_l+0xba>
 8008dfa:	2400      	movs	r4, #0
 8008dfc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008dfe:	1c72      	adds	r2, r6, #1
 8008e00:	9219      	str	r2, [sp, #100]	; 0x64
 8008e02:	7872      	ldrb	r2, [r6, #1]
 8008e04:	2a2b      	cmp	r2, #43	; 0x2b
 8008e06:	d079      	beq.n	8008efc <_strtod_l+0x27c>
 8008e08:	2a2d      	cmp	r2, #45	; 0x2d
 8008e0a:	f000 8083 	beq.w	8008f14 <_strtod_l+0x294>
 8008e0e:	2700      	movs	r7, #0
 8008e10:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008e14:	2909      	cmp	r1, #9
 8008e16:	f240 8083 	bls.w	8008f20 <_strtod_l+0x2a0>
 8008e1a:	9619      	str	r6, [sp, #100]	; 0x64
 8008e1c:	2500      	movs	r5, #0
 8008e1e:	e09f      	b.n	8008f60 <_strtod_l+0x2e0>
 8008e20:	2300      	movs	r3, #0
 8008e22:	e7c8      	b.n	8008db6 <_strtod_l+0x136>
 8008e24:	f1bb 0f08 	cmp.w	fp, #8
 8008e28:	bfd5      	itete	le
 8008e2a:	9906      	ldrle	r1, [sp, #24]
 8008e2c:	9905      	ldrgt	r1, [sp, #20]
 8008e2e:	fb02 3301 	mlale	r3, r2, r1, r3
 8008e32:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008e36:	f100 0001 	add.w	r0, r0, #1
 8008e3a:	bfd4      	ite	le
 8008e3c:	9306      	strle	r3, [sp, #24]
 8008e3e:	9305      	strgt	r3, [sp, #20]
 8008e40:	f10b 0b01 	add.w	fp, fp, #1
 8008e44:	9019      	str	r0, [sp, #100]	; 0x64
 8008e46:	e7be      	b.n	8008dc6 <_strtod_l+0x146>
 8008e48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e4a:	191a      	adds	r2, r3, r4
 8008e4c:	9219      	str	r2, [sp, #100]	; 0x64
 8008e4e:	5d1a      	ldrb	r2, [r3, r4]
 8008e50:	f1bb 0f00 	cmp.w	fp, #0
 8008e54:	d036      	beq.n	8008ec4 <_strtod_l+0x244>
 8008e56:	465c      	mov	r4, fp
 8008e58:	9004      	str	r0, [sp, #16]
 8008e5a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008e5e:	2b09      	cmp	r3, #9
 8008e60:	d912      	bls.n	8008e88 <_strtod_l+0x208>
 8008e62:	2301      	movs	r3, #1
 8008e64:	e7c1      	b.n	8008dea <_strtod_l+0x16a>
 8008e66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e68:	3001      	adds	r0, #1
 8008e6a:	1c5a      	adds	r2, r3, #1
 8008e6c:	9219      	str	r2, [sp, #100]	; 0x64
 8008e6e:	785a      	ldrb	r2, [r3, #1]
 8008e70:	2a30      	cmp	r2, #48	; 0x30
 8008e72:	d0f8      	beq.n	8008e66 <_strtod_l+0x1e6>
 8008e74:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008e78:	2b08      	cmp	r3, #8
 8008e7a:	f200 84d5 	bhi.w	8009828 <_strtod_l+0xba8>
 8008e7e:	9004      	str	r0, [sp, #16]
 8008e80:	2000      	movs	r0, #0
 8008e82:	4604      	mov	r4, r0
 8008e84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008e86:	9308      	str	r3, [sp, #32]
 8008e88:	3a30      	subs	r2, #48	; 0x30
 8008e8a:	f100 0301 	add.w	r3, r0, #1
 8008e8e:	d013      	beq.n	8008eb8 <_strtod_l+0x238>
 8008e90:	9904      	ldr	r1, [sp, #16]
 8008e92:	1905      	adds	r5, r0, r4
 8008e94:	4419      	add	r1, r3
 8008e96:	9104      	str	r1, [sp, #16]
 8008e98:	4623      	mov	r3, r4
 8008e9a:	210a      	movs	r1, #10
 8008e9c:	42ab      	cmp	r3, r5
 8008e9e:	d113      	bne.n	8008ec8 <_strtod_l+0x248>
 8008ea0:	1823      	adds	r3, r4, r0
 8008ea2:	2b08      	cmp	r3, #8
 8008ea4:	f104 0401 	add.w	r4, r4, #1
 8008ea8:	4404      	add	r4, r0
 8008eaa:	dc1b      	bgt.n	8008ee4 <_strtod_l+0x264>
 8008eac:	230a      	movs	r3, #10
 8008eae:	9906      	ldr	r1, [sp, #24]
 8008eb0:	fb03 2301 	mla	r3, r3, r1, r2
 8008eb4:	9306      	str	r3, [sp, #24]
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008eba:	4618      	mov	r0, r3
 8008ebc:	1c51      	adds	r1, r2, #1
 8008ebe:	9119      	str	r1, [sp, #100]	; 0x64
 8008ec0:	7852      	ldrb	r2, [r2, #1]
 8008ec2:	e7ca      	b.n	8008e5a <_strtod_l+0x1da>
 8008ec4:	4658      	mov	r0, fp
 8008ec6:	e7d3      	b.n	8008e70 <_strtod_l+0x1f0>
 8008ec8:	2b08      	cmp	r3, #8
 8008eca:	dc04      	bgt.n	8008ed6 <_strtod_l+0x256>
 8008ecc:	9f06      	ldr	r7, [sp, #24]
 8008ece:	434f      	muls	r7, r1
 8008ed0:	9706      	str	r7, [sp, #24]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	e7e2      	b.n	8008e9c <_strtod_l+0x21c>
 8008ed6:	1c5f      	adds	r7, r3, #1
 8008ed8:	2f10      	cmp	r7, #16
 8008eda:	bfde      	ittt	le
 8008edc:	9f05      	ldrle	r7, [sp, #20]
 8008ede:	434f      	mulle	r7, r1
 8008ee0:	9705      	strle	r7, [sp, #20]
 8008ee2:	e7f6      	b.n	8008ed2 <_strtod_l+0x252>
 8008ee4:	2c10      	cmp	r4, #16
 8008ee6:	bfdf      	itttt	le
 8008ee8:	230a      	movle	r3, #10
 8008eea:	9905      	ldrle	r1, [sp, #20]
 8008eec:	fb03 2301 	mlale	r3, r3, r1, r2
 8008ef0:	9305      	strle	r3, [sp, #20]
 8008ef2:	e7e0      	b.n	8008eb6 <_strtod_l+0x236>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	9304      	str	r3, [sp, #16]
 8008ef8:	2301      	movs	r3, #1
 8008efa:	e77b      	b.n	8008df4 <_strtod_l+0x174>
 8008efc:	2700      	movs	r7, #0
 8008efe:	1cb2      	adds	r2, r6, #2
 8008f00:	9219      	str	r2, [sp, #100]	; 0x64
 8008f02:	78b2      	ldrb	r2, [r6, #2]
 8008f04:	e784      	b.n	8008e10 <_strtod_l+0x190>
 8008f06:	bf00      	nop
 8008f08:	0800d390 	.word	0x0800d390
 8008f0c:	0800d144 	.word	0x0800d144
 8008f10:	7ff00000 	.word	0x7ff00000
 8008f14:	2701      	movs	r7, #1
 8008f16:	e7f2      	b.n	8008efe <_strtod_l+0x27e>
 8008f18:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f1a:	1c51      	adds	r1, r2, #1
 8008f1c:	9119      	str	r1, [sp, #100]	; 0x64
 8008f1e:	7852      	ldrb	r2, [r2, #1]
 8008f20:	2a30      	cmp	r2, #48	; 0x30
 8008f22:	d0f9      	beq.n	8008f18 <_strtod_l+0x298>
 8008f24:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008f28:	2908      	cmp	r1, #8
 8008f2a:	f63f af77 	bhi.w	8008e1c <_strtod_l+0x19c>
 8008f2e:	f04f 0e0a 	mov.w	lr, #10
 8008f32:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008f36:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f38:	9209      	str	r2, [sp, #36]	; 0x24
 8008f3a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008f3c:	1c51      	adds	r1, r2, #1
 8008f3e:	9119      	str	r1, [sp, #100]	; 0x64
 8008f40:	7852      	ldrb	r2, [r2, #1]
 8008f42:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008f46:	2d09      	cmp	r5, #9
 8008f48:	d935      	bls.n	8008fb6 <_strtod_l+0x336>
 8008f4a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008f4c:	1b49      	subs	r1, r1, r5
 8008f4e:	2908      	cmp	r1, #8
 8008f50:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008f54:	dc02      	bgt.n	8008f5c <_strtod_l+0x2dc>
 8008f56:	4565      	cmp	r5, ip
 8008f58:	bfa8      	it	ge
 8008f5a:	4665      	movge	r5, ip
 8008f5c:	b107      	cbz	r7, 8008f60 <_strtod_l+0x2e0>
 8008f5e:	426d      	negs	r5, r5
 8008f60:	2c00      	cmp	r4, #0
 8008f62:	d14c      	bne.n	8008ffe <_strtod_l+0x37e>
 8008f64:	9907      	ldr	r1, [sp, #28]
 8008f66:	4301      	orrs	r1, r0
 8008f68:	f47f aecb 	bne.w	8008d02 <_strtod_l+0x82>
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f47f aee4 	bne.w	8008d3a <_strtod_l+0xba>
 8008f72:	2a69      	cmp	r2, #105	; 0x69
 8008f74:	d026      	beq.n	8008fc4 <_strtod_l+0x344>
 8008f76:	dc23      	bgt.n	8008fc0 <_strtod_l+0x340>
 8008f78:	2a49      	cmp	r2, #73	; 0x49
 8008f7a:	d023      	beq.n	8008fc4 <_strtod_l+0x344>
 8008f7c:	2a4e      	cmp	r2, #78	; 0x4e
 8008f7e:	f47f aedc 	bne.w	8008d3a <_strtod_l+0xba>
 8008f82:	499d      	ldr	r1, [pc, #628]	; (80091f8 <_strtod_l+0x578>)
 8008f84:	a819      	add	r0, sp, #100	; 0x64
 8008f86:	f001 fe17 	bl	800abb8 <__match>
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	f43f aed5 	beq.w	8008d3a <_strtod_l+0xba>
 8008f90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	2b28      	cmp	r3, #40	; 0x28
 8008f96:	d12c      	bne.n	8008ff2 <_strtod_l+0x372>
 8008f98:	4998      	ldr	r1, [pc, #608]	; (80091fc <_strtod_l+0x57c>)
 8008f9a:	aa1c      	add	r2, sp, #112	; 0x70
 8008f9c:	a819      	add	r0, sp, #100	; 0x64
 8008f9e:	f001 fe1f 	bl	800abe0 <__hexnan>
 8008fa2:	2805      	cmp	r0, #5
 8008fa4:	d125      	bne.n	8008ff2 <_strtod_l+0x372>
 8008fa6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008fa8:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8008fac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008fb0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008fb4:	e6a5      	b.n	8008d02 <_strtod_l+0x82>
 8008fb6:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8008fba:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8008fbe:	e7bc      	b.n	8008f3a <_strtod_l+0x2ba>
 8008fc0:	2a6e      	cmp	r2, #110	; 0x6e
 8008fc2:	e7dc      	b.n	8008f7e <_strtod_l+0x2fe>
 8008fc4:	498e      	ldr	r1, [pc, #568]	; (8009200 <_strtod_l+0x580>)
 8008fc6:	a819      	add	r0, sp, #100	; 0x64
 8008fc8:	f001 fdf6 	bl	800abb8 <__match>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	f43f aeb4 	beq.w	8008d3a <_strtod_l+0xba>
 8008fd2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008fd4:	498b      	ldr	r1, [pc, #556]	; (8009204 <_strtod_l+0x584>)
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	a819      	add	r0, sp, #100	; 0x64
 8008fda:	9319      	str	r3, [sp, #100]	; 0x64
 8008fdc:	f001 fdec 	bl	800abb8 <__match>
 8008fe0:	b910      	cbnz	r0, 8008fe8 <_strtod_l+0x368>
 8008fe2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	9319      	str	r3, [sp, #100]	; 0x64
 8008fe8:	f04f 0800 	mov.w	r8, #0
 8008fec:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8009208 <_strtod_l+0x588>
 8008ff0:	e687      	b.n	8008d02 <_strtod_l+0x82>
 8008ff2:	4886      	ldr	r0, [pc, #536]	; (800920c <_strtod_l+0x58c>)
 8008ff4:	f002 fdce 	bl	800bb94 <nan>
 8008ff8:	4680      	mov	r8, r0
 8008ffa:	4689      	mov	r9, r1
 8008ffc:	e681      	b.n	8008d02 <_strtod_l+0x82>
 8008ffe:	9b04      	ldr	r3, [sp, #16]
 8009000:	f1bb 0f00 	cmp.w	fp, #0
 8009004:	bf08      	it	eq
 8009006:	46a3      	moveq	fp, r4
 8009008:	1aeb      	subs	r3, r5, r3
 800900a:	2c10      	cmp	r4, #16
 800900c:	9806      	ldr	r0, [sp, #24]
 800900e:	4626      	mov	r6, r4
 8009010:	9307      	str	r3, [sp, #28]
 8009012:	bfa8      	it	ge
 8009014:	2610      	movge	r6, #16
 8009016:	f7f7 f9e5 	bl	80003e4 <__aeabi_ui2d>
 800901a:	2c09      	cmp	r4, #9
 800901c:	4680      	mov	r8, r0
 800901e:	4689      	mov	r9, r1
 8009020:	dd13      	ble.n	800904a <_strtod_l+0x3ca>
 8009022:	4b7b      	ldr	r3, [pc, #492]	; (8009210 <_strtod_l+0x590>)
 8009024:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009028:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800902c:	f7f7 fa54 	bl	80004d8 <__aeabi_dmul>
 8009030:	4680      	mov	r8, r0
 8009032:	9805      	ldr	r0, [sp, #20]
 8009034:	4689      	mov	r9, r1
 8009036:	f7f7 f9d5 	bl	80003e4 <__aeabi_ui2d>
 800903a:	4602      	mov	r2, r0
 800903c:	460b      	mov	r3, r1
 800903e:	4640      	mov	r0, r8
 8009040:	4649      	mov	r1, r9
 8009042:	f7f7 f893 	bl	800016c <__adddf3>
 8009046:	4680      	mov	r8, r0
 8009048:	4689      	mov	r9, r1
 800904a:	2c0f      	cmp	r4, #15
 800904c:	dc36      	bgt.n	80090bc <_strtod_l+0x43c>
 800904e:	9b07      	ldr	r3, [sp, #28]
 8009050:	2b00      	cmp	r3, #0
 8009052:	f43f ae56 	beq.w	8008d02 <_strtod_l+0x82>
 8009056:	dd22      	ble.n	800909e <_strtod_l+0x41e>
 8009058:	2b16      	cmp	r3, #22
 800905a:	dc09      	bgt.n	8009070 <_strtod_l+0x3f0>
 800905c:	496c      	ldr	r1, [pc, #432]	; (8009210 <_strtod_l+0x590>)
 800905e:	4642      	mov	r2, r8
 8009060:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009064:	464b      	mov	r3, r9
 8009066:	e9d1 0100 	ldrd	r0, r1, [r1]
 800906a:	f7f7 fa35 	bl	80004d8 <__aeabi_dmul>
 800906e:	e7c3      	b.n	8008ff8 <_strtod_l+0x378>
 8009070:	9a07      	ldr	r2, [sp, #28]
 8009072:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009076:	4293      	cmp	r3, r2
 8009078:	db20      	blt.n	80090bc <_strtod_l+0x43c>
 800907a:	4d65      	ldr	r5, [pc, #404]	; (8009210 <_strtod_l+0x590>)
 800907c:	f1c4 040f 	rsb	r4, r4, #15
 8009080:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009084:	4642      	mov	r2, r8
 8009086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800908a:	464b      	mov	r3, r9
 800908c:	f7f7 fa24 	bl	80004d8 <__aeabi_dmul>
 8009090:	9b07      	ldr	r3, [sp, #28]
 8009092:	1b1c      	subs	r4, r3, r4
 8009094:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009098:	e9d5 2300 	ldrd	r2, r3, [r5]
 800909c:	e7e5      	b.n	800906a <_strtod_l+0x3ea>
 800909e:	9b07      	ldr	r3, [sp, #28]
 80090a0:	3316      	adds	r3, #22
 80090a2:	db0b      	blt.n	80090bc <_strtod_l+0x43c>
 80090a4:	9b04      	ldr	r3, [sp, #16]
 80090a6:	4640      	mov	r0, r8
 80090a8:	1b5d      	subs	r5, r3, r5
 80090aa:	4b59      	ldr	r3, [pc, #356]	; (8009210 <_strtod_l+0x590>)
 80090ac:	4649      	mov	r1, r9
 80090ae:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80090b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80090b6:	f7f7 fb39 	bl	800072c <__aeabi_ddiv>
 80090ba:	e79d      	b.n	8008ff8 <_strtod_l+0x378>
 80090bc:	9b07      	ldr	r3, [sp, #28]
 80090be:	1ba6      	subs	r6, r4, r6
 80090c0:	441e      	add	r6, r3
 80090c2:	2e00      	cmp	r6, #0
 80090c4:	dd74      	ble.n	80091b0 <_strtod_l+0x530>
 80090c6:	f016 030f 	ands.w	r3, r6, #15
 80090ca:	d00a      	beq.n	80090e2 <_strtod_l+0x462>
 80090cc:	4950      	ldr	r1, [pc, #320]	; (8009210 <_strtod_l+0x590>)
 80090ce:	4642      	mov	r2, r8
 80090d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80090d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090d8:	464b      	mov	r3, r9
 80090da:	f7f7 f9fd 	bl	80004d8 <__aeabi_dmul>
 80090de:	4680      	mov	r8, r0
 80090e0:	4689      	mov	r9, r1
 80090e2:	f036 060f 	bics.w	r6, r6, #15
 80090e6:	d052      	beq.n	800918e <_strtod_l+0x50e>
 80090e8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80090ec:	dd27      	ble.n	800913e <_strtod_l+0x4be>
 80090ee:	f04f 0b00 	mov.w	fp, #0
 80090f2:	f8cd b010 	str.w	fp, [sp, #16]
 80090f6:	f8cd b020 	str.w	fp, [sp, #32]
 80090fa:	f8cd b018 	str.w	fp, [sp, #24]
 80090fe:	2322      	movs	r3, #34	; 0x22
 8009100:	f04f 0800 	mov.w	r8, #0
 8009104:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8009208 <_strtod_l+0x588>
 8009108:	f8ca 3000 	str.w	r3, [sl]
 800910c:	9b08      	ldr	r3, [sp, #32]
 800910e:	2b00      	cmp	r3, #0
 8009110:	f43f adf7 	beq.w	8008d02 <_strtod_l+0x82>
 8009114:	4650      	mov	r0, sl
 8009116:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009118:	f001 fe78 	bl	800ae0c <_Bfree>
 800911c:	4650      	mov	r0, sl
 800911e:	9906      	ldr	r1, [sp, #24]
 8009120:	f001 fe74 	bl	800ae0c <_Bfree>
 8009124:	4650      	mov	r0, sl
 8009126:	9904      	ldr	r1, [sp, #16]
 8009128:	f001 fe70 	bl	800ae0c <_Bfree>
 800912c:	4650      	mov	r0, sl
 800912e:	9908      	ldr	r1, [sp, #32]
 8009130:	f001 fe6c 	bl	800ae0c <_Bfree>
 8009134:	4659      	mov	r1, fp
 8009136:	4650      	mov	r0, sl
 8009138:	f001 fe68 	bl	800ae0c <_Bfree>
 800913c:	e5e1      	b.n	8008d02 <_strtod_l+0x82>
 800913e:	4b35      	ldr	r3, [pc, #212]	; (8009214 <_strtod_l+0x594>)
 8009140:	4640      	mov	r0, r8
 8009142:	9305      	str	r3, [sp, #20]
 8009144:	2300      	movs	r3, #0
 8009146:	4649      	mov	r1, r9
 8009148:	461f      	mov	r7, r3
 800914a:	1136      	asrs	r6, r6, #4
 800914c:	2e01      	cmp	r6, #1
 800914e:	dc21      	bgt.n	8009194 <_strtod_l+0x514>
 8009150:	b10b      	cbz	r3, 8009156 <_strtod_l+0x4d6>
 8009152:	4680      	mov	r8, r0
 8009154:	4689      	mov	r9, r1
 8009156:	4b2f      	ldr	r3, [pc, #188]	; (8009214 <_strtod_l+0x594>)
 8009158:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800915c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009160:	4642      	mov	r2, r8
 8009162:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009166:	464b      	mov	r3, r9
 8009168:	f7f7 f9b6 	bl	80004d8 <__aeabi_dmul>
 800916c:	4b26      	ldr	r3, [pc, #152]	; (8009208 <_strtod_l+0x588>)
 800916e:	460a      	mov	r2, r1
 8009170:	400b      	ands	r3, r1
 8009172:	4929      	ldr	r1, [pc, #164]	; (8009218 <_strtod_l+0x598>)
 8009174:	4680      	mov	r8, r0
 8009176:	428b      	cmp	r3, r1
 8009178:	d8b9      	bhi.n	80090ee <_strtod_l+0x46e>
 800917a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800917e:	428b      	cmp	r3, r1
 8009180:	bf86      	itte	hi
 8009182:	f04f 38ff 	movhi.w	r8, #4294967295
 8009186:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800921c <_strtod_l+0x59c>
 800918a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800918e:	2300      	movs	r3, #0
 8009190:	9305      	str	r3, [sp, #20]
 8009192:	e07f      	b.n	8009294 <_strtod_l+0x614>
 8009194:	07f2      	lsls	r2, r6, #31
 8009196:	d505      	bpl.n	80091a4 <_strtod_l+0x524>
 8009198:	9b05      	ldr	r3, [sp, #20]
 800919a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800919e:	f7f7 f99b 	bl	80004d8 <__aeabi_dmul>
 80091a2:	2301      	movs	r3, #1
 80091a4:	9a05      	ldr	r2, [sp, #20]
 80091a6:	3701      	adds	r7, #1
 80091a8:	3208      	adds	r2, #8
 80091aa:	1076      	asrs	r6, r6, #1
 80091ac:	9205      	str	r2, [sp, #20]
 80091ae:	e7cd      	b.n	800914c <_strtod_l+0x4cc>
 80091b0:	d0ed      	beq.n	800918e <_strtod_l+0x50e>
 80091b2:	4276      	negs	r6, r6
 80091b4:	f016 020f 	ands.w	r2, r6, #15
 80091b8:	d00a      	beq.n	80091d0 <_strtod_l+0x550>
 80091ba:	4b15      	ldr	r3, [pc, #84]	; (8009210 <_strtod_l+0x590>)
 80091bc:	4640      	mov	r0, r8
 80091be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091c2:	4649      	mov	r1, r9
 80091c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c8:	f7f7 fab0 	bl	800072c <__aeabi_ddiv>
 80091cc:	4680      	mov	r8, r0
 80091ce:	4689      	mov	r9, r1
 80091d0:	1136      	asrs	r6, r6, #4
 80091d2:	d0dc      	beq.n	800918e <_strtod_l+0x50e>
 80091d4:	2e1f      	cmp	r6, #31
 80091d6:	dd23      	ble.n	8009220 <_strtod_l+0x5a0>
 80091d8:	f04f 0b00 	mov.w	fp, #0
 80091dc:	f8cd b010 	str.w	fp, [sp, #16]
 80091e0:	f8cd b020 	str.w	fp, [sp, #32]
 80091e4:	f8cd b018 	str.w	fp, [sp, #24]
 80091e8:	2322      	movs	r3, #34	; 0x22
 80091ea:	f04f 0800 	mov.w	r8, #0
 80091ee:	f04f 0900 	mov.w	r9, #0
 80091f2:	f8ca 3000 	str.w	r3, [sl]
 80091f6:	e789      	b.n	800910c <_strtod_l+0x48c>
 80091f8:	0800d115 	.word	0x0800d115
 80091fc:	0800d158 	.word	0x0800d158
 8009200:	0800d10d 	.word	0x0800d10d
 8009204:	0800d29c 	.word	0x0800d29c
 8009208:	7ff00000 	.word	0x7ff00000
 800920c:	0800d548 	.word	0x0800d548
 8009210:	0800d428 	.word	0x0800d428
 8009214:	0800d400 	.word	0x0800d400
 8009218:	7ca00000 	.word	0x7ca00000
 800921c:	7fefffff 	.word	0x7fefffff
 8009220:	f016 0310 	ands.w	r3, r6, #16
 8009224:	bf18      	it	ne
 8009226:	236a      	movne	r3, #106	; 0x6a
 8009228:	4640      	mov	r0, r8
 800922a:	9305      	str	r3, [sp, #20]
 800922c:	4649      	mov	r1, r9
 800922e:	2300      	movs	r3, #0
 8009230:	4fb0      	ldr	r7, [pc, #704]	; (80094f4 <_strtod_l+0x874>)
 8009232:	07f2      	lsls	r2, r6, #31
 8009234:	d504      	bpl.n	8009240 <_strtod_l+0x5c0>
 8009236:	e9d7 2300 	ldrd	r2, r3, [r7]
 800923a:	f7f7 f94d 	bl	80004d8 <__aeabi_dmul>
 800923e:	2301      	movs	r3, #1
 8009240:	1076      	asrs	r6, r6, #1
 8009242:	f107 0708 	add.w	r7, r7, #8
 8009246:	d1f4      	bne.n	8009232 <_strtod_l+0x5b2>
 8009248:	b10b      	cbz	r3, 800924e <_strtod_l+0x5ce>
 800924a:	4680      	mov	r8, r0
 800924c:	4689      	mov	r9, r1
 800924e:	9b05      	ldr	r3, [sp, #20]
 8009250:	b1c3      	cbz	r3, 8009284 <_strtod_l+0x604>
 8009252:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009256:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800925a:	2b00      	cmp	r3, #0
 800925c:	4649      	mov	r1, r9
 800925e:	dd11      	ble.n	8009284 <_strtod_l+0x604>
 8009260:	2b1f      	cmp	r3, #31
 8009262:	f340 8127 	ble.w	80094b4 <_strtod_l+0x834>
 8009266:	2b34      	cmp	r3, #52	; 0x34
 8009268:	bfd8      	it	le
 800926a:	f04f 33ff 	movle.w	r3, #4294967295
 800926e:	f04f 0800 	mov.w	r8, #0
 8009272:	bfcf      	iteee	gt
 8009274:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009278:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800927c:	fa03 f202 	lslle.w	r2, r3, r2
 8009280:	ea02 0901 	andle.w	r9, r2, r1
 8009284:	2200      	movs	r2, #0
 8009286:	2300      	movs	r3, #0
 8009288:	4640      	mov	r0, r8
 800928a:	4649      	mov	r1, r9
 800928c:	f7f7 fb8c 	bl	80009a8 <__aeabi_dcmpeq>
 8009290:	2800      	cmp	r0, #0
 8009292:	d1a1      	bne.n	80091d8 <_strtod_l+0x558>
 8009294:	9b06      	ldr	r3, [sp, #24]
 8009296:	465a      	mov	r2, fp
 8009298:	9300      	str	r3, [sp, #0]
 800929a:	4650      	mov	r0, sl
 800929c:	4623      	mov	r3, r4
 800929e:	9908      	ldr	r1, [sp, #32]
 80092a0:	f001 fe1c 	bl	800aedc <__s2b>
 80092a4:	9008      	str	r0, [sp, #32]
 80092a6:	2800      	cmp	r0, #0
 80092a8:	f43f af21 	beq.w	80090ee <_strtod_l+0x46e>
 80092ac:	9b04      	ldr	r3, [sp, #16]
 80092ae:	f04f 0b00 	mov.w	fp, #0
 80092b2:	1b5d      	subs	r5, r3, r5
 80092b4:	9b07      	ldr	r3, [sp, #28]
 80092b6:	f8cd b010 	str.w	fp, [sp, #16]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	bfb4      	ite	lt
 80092be:	462b      	movlt	r3, r5
 80092c0:	2300      	movge	r3, #0
 80092c2:	930e      	str	r3, [sp, #56]	; 0x38
 80092c4:	9b07      	ldr	r3, [sp, #28]
 80092c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80092ca:	9314      	str	r3, [sp, #80]	; 0x50
 80092cc:	9b08      	ldr	r3, [sp, #32]
 80092ce:	4650      	mov	r0, sl
 80092d0:	6859      	ldr	r1, [r3, #4]
 80092d2:	f001 fd5b 	bl	800ad8c <_Balloc>
 80092d6:	9006      	str	r0, [sp, #24]
 80092d8:	2800      	cmp	r0, #0
 80092da:	f43f af10 	beq.w	80090fe <_strtod_l+0x47e>
 80092de:	9b08      	ldr	r3, [sp, #32]
 80092e0:	300c      	adds	r0, #12
 80092e2:	691a      	ldr	r2, [r3, #16]
 80092e4:	f103 010c 	add.w	r1, r3, #12
 80092e8:	3202      	adds	r2, #2
 80092ea:	0092      	lsls	r2, r2, #2
 80092ec:	f001 fd40 	bl	800ad70 <memcpy>
 80092f0:	ab1c      	add	r3, sp, #112	; 0x70
 80092f2:	9301      	str	r3, [sp, #4]
 80092f4:	ab1b      	add	r3, sp, #108	; 0x6c
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	4642      	mov	r2, r8
 80092fa:	464b      	mov	r3, r9
 80092fc:	4650      	mov	r0, sl
 80092fe:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8009302:	f002 f92d 	bl	800b560 <__d2b>
 8009306:	901a      	str	r0, [sp, #104]	; 0x68
 8009308:	2800      	cmp	r0, #0
 800930a:	f43f aef8 	beq.w	80090fe <_strtod_l+0x47e>
 800930e:	2101      	movs	r1, #1
 8009310:	4650      	mov	r0, sl
 8009312:	f001 fe7b 	bl	800b00c <__i2b>
 8009316:	4603      	mov	r3, r0
 8009318:	9004      	str	r0, [sp, #16]
 800931a:	2800      	cmp	r0, #0
 800931c:	f43f aeef 	beq.w	80090fe <_strtod_l+0x47e>
 8009320:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009322:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009324:	2d00      	cmp	r5, #0
 8009326:	bfab      	itete	ge
 8009328:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800932a:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800932c:	18ee      	addge	r6, r5, r3
 800932e:	1b5c      	sublt	r4, r3, r5
 8009330:	9b05      	ldr	r3, [sp, #20]
 8009332:	bfa8      	it	ge
 8009334:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 8009336:	eba5 0503 	sub.w	r5, r5, r3
 800933a:	4415      	add	r5, r2
 800933c:	4b6e      	ldr	r3, [pc, #440]	; (80094f8 <_strtod_l+0x878>)
 800933e:	f105 35ff 	add.w	r5, r5, #4294967295
 8009342:	bfb8      	it	lt
 8009344:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009346:	429d      	cmp	r5, r3
 8009348:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800934c:	f280 80c4 	bge.w	80094d8 <_strtod_l+0x858>
 8009350:	1b5b      	subs	r3, r3, r5
 8009352:	2b1f      	cmp	r3, #31
 8009354:	f04f 0701 	mov.w	r7, #1
 8009358:	eba2 0203 	sub.w	r2, r2, r3
 800935c:	f300 80b1 	bgt.w	80094c2 <_strtod_l+0x842>
 8009360:	2500      	movs	r5, #0
 8009362:	fa07 f303 	lsl.w	r3, r7, r3
 8009366:	930f      	str	r3, [sp, #60]	; 0x3c
 8009368:	18b7      	adds	r7, r6, r2
 800936a:	9b05      	ldr	r3, [sp, #20]
 800936c:	42be      	cmp	r6, r7
 800936e:	4414      	add	r4, r2
 8009370:	441c      	add	r4, r3
 8009372:	4633      	mov	r3, r6
 8009374:	bfa8      	it	ge
 8009376:	463b      	movge	r3, r7
 8009378:	42a3      	cmp	r3, r4
 800937a:	bfa8      	it	ge
 800937c:	4623      	movge	r3, r4
 800937e:	2b00      	cmp	r3, #0
 8009380:	bfc2      	ittt	gt
 8009382:	1aff      	subgt	r7, r7, r3
 8009384:	1ae4      	subgt	r4, r4, r3
 8009386:	1af6      	subgt	r6, r6, r3
 8009388:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800938a:	2b00      	cmp	r3, #0
 800938c:	dd17      	ble.n	80093be <_strtod_l+0x73e>
 800938e:	461a      	mov	r2, r3
 8009390:	4650      	mov	r0, sl
 8009392:	9904      	ldr	r1, [sp, #16]
 8009394:	f001 fef8 	bl	800b188 <__pow5mult>
 8009398:	9004      	str	r0, [sp, #16]
 800939a:	2800      	cmp	r0, #0
 800939c:	f43f aeaf 	beq.w	80090fe <_strtod_l+0x47e>
 80093a0:	4601      	mov	r1, r0
 80093a2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80093a4:	4650      	mov	r0, sl
 80093a6:	f001 fe47 	bl	800b038 <__multiply>
 80093aa:	9009      	str	r0, [sp, #36]	; 0x24
 80093ac:	2800      	cmp	r0, #0
 80093ae:	f43f aea6 	beq.w	80090fe <_strtod_l+0x47e>
 80093b2:	4650      	mov	r0, sl
 80093b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80093b6:	f001 fd29 	bl	800ae0c <_Bfree>
 80093ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093bc:	931a      	str	r3, [sp, #104]	; 0x68
 80093be:	2f00      	cmp	r7, #0
 80093c0:	f300 808e 	bgt.w	80094e0 <_strtod_l+0x860>
 80093c4:	9b07      	ldr	r3, [sp, #28]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	dd08      	ble.n	80093dc <_strtod_l+0x75c>
 80093ca:	4650      	mov	r0, sl
 80093cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80093ce:	9906      	ldr	r1, [sp, #24]
 80093d0:	f001 feda 	bl	800b188 <__pow5mult>
 80093d4:	9006      	str	r0, [sp, #24]
 80093d6:	2800      	cmp	r0, #0
 80093d8:	f43f ae91 	beq.w	80090fe <_strtod_l+0x47e>
 80093dc:	2c00      	cmp	r4, #0
 80093de:	dd08      	ble.n	80093f2 <_strtod_l+0x772>
 80093e0:	4622      	mov	r2, r4
 80093e2:	4650      	mov	r0, sl
 80093e4:	9906      	ldr	r1, [sp, #24]
 80093e6:	f001 ff29 	bl	800b23c <__lshift>
 80093ea:	9006      	str	r0, [sp, #24]
 80093ec:	2800      	cmp	r0, #0
 80093ee:	f43f ae86 	beq.w	80090fe <_strtod_l+0x47e>
 80093f2:	2e00      	cmp	r6, #0
 80093f4:	dd08      	ble.n	8009408 <_strtod_l+0x788>
 80093f6:	4632      	mov	r2, r6
 80093f8:	4650      	mov	r0, sl
 80093fa:	9904      	ldr	r1, [sp, #16]
 80093fc:	f001 ff1e 	bl	800b23c <__lshift>
 8009400:	9004      	str	r0, [sp, #16]
 8009402:	2800      	cmp	r0, #0
 8009404:	f43f ae7b 	beq.w	80090fe <_strtod_l+0x47e>
 8009408:	4650      	mov	r0, sl
 800940a:	9a06      	ldr	r2, [sp, #24]
 800940c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800940e:	f001 ffa1 	bl	800b354 <__mdiff>
 8009412:	4683      	mov	fp, r0
 8009414:	2800      	cmp	r0, #0
 8009416:	f43f ae72 	beq.w	80090fe <_strtod_l+0x47e>
 800941a:	2400      	movs	r4, #0
 800941c:	68c3      	ldr	r3, [r0, #12]
 800941e:	9904      	ldr	r1, [sp, #16]
 8009420:	60c4      	str	r4, [r0, #12]
 8009422:	930b      	str	r3, [sp, #44]	; 0x2c
 8009424:	f001 ff7a 	bl	800b31c <__mcmp>
 8009428:	42a0      	cmp	r0, r4
 800942a:	da6b      	bge.n	8009504 <_strtod_l+0x884>
 800942c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800942e:	ea53 0308 	orrs.w	r3, r3, r8
 8009432:	f040 8091 	bne.w	8009558 <_strtod_l+0x8d8>
 8009436:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800943a:	2b00      	cmp	r3, #0
 800943c:	f040 808c 	bne.w	8009558 <_strtod_l+0x8d8>
 8009440:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009444:	0d1b      	lsrs	r3, r3, #20
 8009446:	051b      	lsls	r3, r3, #20
 8009448:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800944c:	f240 8084 	bls.w	8009558 <_strtod_l+0x8d8>
 8009450:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009454:	b91b      	cbnz	r3, 800945e <_strtod_l+0x7de>
 8009456:	f8db 3010 	ldr.w	r3, [fp, #16]
 800945a:	2b01      	cmp	r3, #1
 800945c:	dd7c      	ble.n	8009558 <_strtod_l+0x8d8>
 800945e:	4659      	mov	r1, fp
 8009460:	2201      	movs	r2, #1
 8009462:	4650      	mov	r0, sl
 8009464:	f001 feea 	bl	800b23c <__lshift>
 8009468:	9904      	ldr	r1, [sp, #16]
 800946a:	4683      	mov	fp, r0
 800946c:	f001 ff56 	bl	800b31c <__mcmp>
 8009470:	2800      	cmp	r0, #0
 8009472:	dd71      	ble.n	8009558 <_strtod_l+0x8d8>
 8009474:	9905      	ldr	r1, [sp, #20]
 8009476:	464b      	mov	r3, r9
 8009478:	4a20      	ldr	r2, [pc, #128]	; (80094fc <_strtod_l+0x87c>)
 800947a:	2900      	cmp	r1, #0
 800947c:	f000 808c 	beq.w	8009598 <_strtod_l+0x918>
 8009480:	ea02 0109 	and.w	r1, r2, r9
 8009484:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009488:	f300 8086 	bgt.w	8009598 <_strtod_l+0x918>
 800948c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009490:	f77f aeaa 	ble.w	80091e8 <_strtod_l+0x568>
 8009494:	4640      	mov	r0, r8
 8009496:	4649      	mov	r1, r9
 8009498:	4b19      	ldr	r3, [pc, #100]	; (8009500 <_strtod_l+0x880>)
 800949a:	2200      	movs	r2, #0
 800949c:	f7f7 f81c 	bl	80004d8 <__aeabi_dmul>
 80094a0:	460b      	mov	r3, r1
 80094a2:	4303      	orrs	r3, r0
 80094a4:	bf08      	it	eq
 80094a6:	2322      	moveq	r3, #34	; 0x22
 80094a8:	4680      	mov	r8, r0
 80094aa:	4689      	mov	r9, r1
 80094ac:	bf08      	it	eq
 80094ae:	f8ca 3000 	streq.w	r3, [sl]
 80094b2:	e62f      	b.n	8009114 <_strtod_l+0x494>
 80094b4:	f04f 32ff 	mov.w	r2, #4294967295
 80094b8:	fa02 f303 	lsl.w	r3, r2, r3
 80094bc:	ea03 0808 	and.w	r8, r3, r8
 80094c0:	e6e0      	b.n	8009284 <_strtod_l+0x604>
 80094c2:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80094c6:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80094ca:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80094ce:	35e2      	adds	r5, #226	; 0xe2
 80094d0:	fa07 f505 	lsl.w	r5, r7, r5
 80094d4:	970f      	str	r7, [sp, #60]	; 0x3c
 80094d6:	e747      	b.n	8009368 <_strtod_l+0x6e8>
 80094d8:	2301      	movs	r3, #1
 80094da:	2500      	movs	r5, #0
 80094dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80094de:	e743      	b.n	8009368 <_strtod_l+0x6e8>
 80094e0:	463a      	mov	r2, r7
 80094e2:	4650      	mov	r0, sl
 80094e4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80094e6:	f001 fea9 	bl	800b23c <__lshift>
 80094ea:	901a      	str	r0, [sp, #104]	; 0x68
 80094ec:	2800      	cmp	r0, #0
 80094ee:	f47f af69 	bne.w	80093c4 <_strtod_l+0x744>
 80094f2:	e604      	b.n	80090fe <_strtod_l+0x47e>
 80094f4:	0800d170 	.word	0x0800d170
 80094f8:	fffffc02 	.word	0xfffffc02
 80094fc:	7ff00000 	.word	0x7ff00000
 8009500:	39500000 	.word	0x39500000
 8009504:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009508:	d165      	bne.n	80095d6 <_strtod_l+0x956>
 800950a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800950c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009510:	b35a      	cbz	r2, 800956a <_strtod_l+0x8ea>
 8009512:	4a99      	ldr	r2, [pc, #612]	; (8009778 <_strtod_l+0xaf8>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d12b      	bne.n	8009570 <_strtod_l+0x8f0>
 8009518:	9b05      	ldr	r3, [sp, #20]
 800951a:	4641      	mov	r1, r8
 800951c:	b303      	cbz	r3, 8009560 <_strtod_l+0x8e0>
 800951e:	464a      	mov	r2, r9
 8009520:	4b96      	ldr	r3, [pc, #600]	; (800977c <_strtod_l+0xafc>)
 8009522:	4013      	ands	r3, r2
 8009524:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009528:	f04f 32ff 	mov.w	r2, #4294967295
 800952c:	d81b      	bhi.n	8009566 <_strtod_l+0x8e6>
 800952e:	0d1b      	lsrs	r3, r3, #20
 8009530:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009534:	fa02 f303 	lsl.w	r3, r2, r3
 8009538:	4299      	cmp	r1, r3
 800953a:	d119      	bne.n	8009570 <_strtod_l+0x8f0>
 800953c:	4b90      	ldr	r3, [pc, #576]	; (8009780 <_strtod_l+0xb00>)
 800953e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009540:	429a      	cmp	r2, r3
 8009542:	d102      	bne.n	800954a <_strtod_l+0x8ca>
 8009544:	3101      	adds	r1, #1
 8009546:	f43f adda 	beq.w	80090fe <_strtod_l+0x47e>
 800954a:	f04f 0800 	mov.w	r8, #0
 800954e:	4b8b      	ldr	r3, [pc, #556]	; (800977c <_strtod_l+0xafc>)
 8009550:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009552:	401a      	ands	r2, r3
 8009554:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8009558:	9b05      	ldr	r3, [sp, #20]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d19a      	bne.n	8009494 <_strtod_l+0x814>
 800955e:	e5d9      	b.n	8009114 <_strtod_l+0x494>
 8009560:	f04f 33ff 	mov.w	r3, #4294967295
 8009564:	e7e8      	b.n	8009538 <_strtod_l+0x8b8>
 8009566:	4613      	mov	r3, r2
 8009568:	e7e6      	b.n	8009538 <_strtod_l+0x8b8>
 800956a:	ea53 0308 	orrs.w	r3, r3, r8
 800956e:	d081      	beq.n	8009474 <_strtod_l+0x7f4>
 8009570:	b1e5      	cbz	r5, 80095ac <_strtod_l+0x92c>
 8009572:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009574:	421d      	tst	r5, r3
 8009576:	d0ef      	beq.n	8009558 <_strtod_l+0x8d8>
 8009578:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800957a:	4640      	mov	r0, r8
 800957c:	4649      	mov	r1, r9
 800957e:	9a05      	ldr	r2, [sp, #20]
 8009580:	b1c3      	cbz	r3, 80095b4 <_strtod_l+0x934>
 8009582:	f7ff fb59 	bl	8008c38 <sulp>
 8009586:	4602      	mov	r2, r0
 8009588:	460b      	mov	r3, r1
 800958a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800958e:	f7f6 fded 	bl	800016c <__adddf3>
 8009592:	4680      	mov	r8, r0
 8009594:	4689      	mov	r9, r1
 8009596:	e7df      	b.n	8009558 <_strtod_l+0x8d8>
 8009598:	4013      	ands	r3, r2
 800959a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800959e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80095a2:	f04f 38ff 	mov.w	r8, #4294967295
 80095a6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80095aa:	e7d5      	b.n	8009558 <_strtod_l+0x8d8>
 80095ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095ae:	ea13 0f08 	tst.w	r3, r8
 80095b2:	e7e0      	b.n	8009576 <_strtod_l+0x8f6>
 80095b4:	f7ff fb40 	bl	8008c38 <sulp>
 80095b8:	4602      	mov	r2, r0
 80095ba:	460b      	mov	r3, r1
 80095bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80095c0:	f7f6 fdd2 	bl	8000168 <__aeabi_dsub>
 80095c4:	2200      	movs	r2, #0
 80095c6:	2300      	movs	r3, #0
 80095c8:	4680      	mov	r8, r0
 80095ca:	4689      	mov	r9, r1
 80095cc:	f7f7 f9ec 	bl	80009a8 <__aeabi_dcmpeq>
 80095d0:	2800      	cmp	r0, #0
 80095d2:	d0c1      	beq.n	8009558 <_strtod_l+0x8d8>
 80095d4:	e608      	b.n	80091e8 <_strtod_l+0x568>
 80095d6:	4658      	mov	r0, fp
 80095d8:	9904      	ldr	r1, [sp, #16]
 80095da:	f002 f81d 	bl	800b618 <__ratio>
 80095de:	2200      	movs	r2, #0
 80095e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80095e4:	4606      	mov	r6, r0
 80095e6:	460f      	mov	r7, r1
 80095e8:	f7f7 f9f2 	bl	80009d0 <__aeabi_dcmple>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	d070      	beq.n	80096d2 <_strtod_l+0xa52>
 80095f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d042      	beq.n	800967c <_strtod_l+0x9fc>
 80095f6:	2600      	movs	r6, #0
 80095f8:	4f62      	ldr	r7, [pc, #392]	; (8009784 <_strtod_l+0xb04>)
 80095fa:	4d62      	ldr	r5, [pc, #392]	; (8009784 <_strtod_l+0xb04>)
 80095fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009602:	0d1b      	lsrs	r3, r3, #20
 8009604:	051b      	lsls	r3, r3, #20
 8009606:	930f      	str	r3, [sp, #60]	; 0x3c
 8009608:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800960a:	4b5f      	ldr	r3, [pc, #380]	; (8009788 <_strtod_l+0xb08>)
 800960c:	429a      	cmp	r2, r3
 800960e:	f040 80c3 	bne.w	8009798 <_strtod_l+0xb18>
 8009612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009614:	4640      	mov	r0, r8
 8009616:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800961a:	4649      	mov	r1, r9
 800961c:	f001 ff26 	bl	800b46c <__ulp>
 8009620:	4602      	mov	r2, r0
 8009622:	460b      	mov	r3, r1
 8009624:	4630      	mov	r0, r6
 8009626:	4639      	mov	r1, r7
 8009628:	f7f6 ff56 	bl	80004d8 <__aeabi_dmul>
 800962c:	4642      	mov	r2, r8
 800962e:	464b      	mov	r3, r9
 8009630:	f7f6 fd9c 	bl	800016c <__adddf3>
 8009634:	460b      	mov	r3, r1
 8009636:	4951      	ldr	r1, [pc, #324]	; (800977c <_strtod_l+0xafc>)
 8009638:	4a54      	ldr	r2, [pc, #336]	; (800978c <_strtod_l+0xb0c>)
 800963a:	4019      	ands	r1, r3
 800963c:	4291      	cmp	r1, r2
 800963e:	4680      	mov	r8, r0
 8009640:	d95d      	bls.n	80096fe <_strtod_l+0xa7e>
 8009642:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009644:	4b4e      	ldr	r3, [pc, #312]	; (8009780 <_strtod_l+0xb00>)
 8009646:	429a      	cmp	r2, r3
 8009648:	d103      	bne.n	8009652 <_strtod_l+0x9d2>
 800964a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800964c:	3301      	adds	r3, #1
 800964e:	f43f ad56 	beq.w	80090fe <_strtod_l+0x47e>
 8009652:	f04f 38ff 	mov.w	r8, #4294967295
 8009656:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8009780 <_strtod_l+0xb00>
 800965a:	4650      	mov	r0, sl
 800965c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800965e:	f001 fbd5 	bl	800ae0c <_Bfree>
 8009662:	4650      	mov	r0, sl
 8009664:	9906      	ldr	r1, [sp, #24]
 8009666:	f001 fbd1 	bl	800ae0c <_Bfree>
 800966a:	4650      	mov	r0, sl
 800966c:	9904      	ldr	r1, [sp, #16]
 800966e:	f001 fbcd 	bl	800ae0c <_Bfree>
 8009672:	4659      	mov	r1, fp
 8009674:	4650      	mov	r0, sl
 8009676:	f001 fbc9 	bl	800ae0c <_Bfree>
 800967a:	e627      	b.n	80092cc <_strtod_l+0x64c>
 800967c:	f1b8 0f00 	cmp.w	r8, #0
 8009680:	d119      	bne.n	80096b6 <_strtod_l+0xa36>
 8009682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009684:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009688:	b9e3      	cbnz	r3, 80096c4 <_strtod_l+0xa44>
 800968a:	2200      	movs	r2, #0
 800968c:	4630      	mov	r0, r6
 800968e:	4639      	mov	r1, r7
 8009690:	4b3c      	ldr	r3, [pc, #240]	; (8009784 <_strtod_l+0xb04>)
 8009692:	f7f7 f993 	bl	80009bc <__aeabi_dcmplt>
 8009696:	b9c8      	cbnz	r0, 80096cc <_strtod_l+0xa4c>
 8009698:	2200      	movs	r2, #0
 800969a:	4630      	mov	r0, r6
 800969c:	4639      	mov	r1, r7
 800969e:	4b3c      	ldr	r3, [pc, #240]	; (8009790 <_strtod_l+0xb10>)
 80096a0:	f7f6 ff1a 	bl	80004d8 <__aeabi_dmul>
 80096a4:	4604      	mov	r4, r0
 80096a6:	460d      	mov	r5, r1
 80096a8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80096ac:	9416      	str	r4, [sp, #88]	; 0x58
 80096ae:	9317      	str	r3, [sp, #92]	; 0x5c
 80096b0:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80096b4:	e7a2      	b.n	80095fc <_strtod_l+0x97c>
 80096b6:	f1b8 0f01 	cmp.w	r8, #1
 80096ba:	d103      	bne.n	80096c4 <_strtod_l+0xa44>
 80096bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096be:	2b00      	cmp	r3, #0
 80096c0:	f43f ad92 	beq.w	80091e8 <_strtod_l+0x568>
 80096c4:	2600      	movs	r6, #0
 80096c6:	2400      	movs	r4, #0
 80096c8:	4f32      	ldr	r7, [pc, #200]	; (8009794 <_strtod_l+0xb14>)
 80096ca:	e796      	b.n	80095fa <_strtod_l+0x97a>
 80096cc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80096ce:	4d30      	ldr	r5, [pc, #192]	; (8009790 <_strtod_l+0xb10>)
 80096d0:	e7ea      	b.n	80096a8 <_strtod_l+0xa28>
 80096d2:	4b2f      	ldr	r3, [pc, #188]	; (8009790 <_strtod_l+0xb10>)
 80096d4:	2200      	movs	r2, #0
 80096d6:	4630      	mov	r0, r6
 80096d8:	4639      	mov	r1, r7
 80096da:	f7f6 fefd 	bl	80004d8 <__aeabi_dmul>
 80096de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096e0:	4604      	mov	r4, r0
 80096e2:	460d      	mov	r5, r1
 80096e4:	b933      	cbnz	r3, 80096f4 <_strtod_l+0xa74>
 80096e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80096ea:	9010      	str	r0, [sp, #64]	; 0x40
 80096ec:	9311      	str	r3, [sp, #68]	; 0x44
 80096ee:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80096f2:	e783      	b.n	80095fc <_strtod_l+0x97c>
 80096f4:	4602      	mov	r2, r0
 80096f6:	460b      	mov	r3, r1
 80096f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80096fc:	e7f7      	b.n	80096ee <_strtod_l+0xa6e>
 80096fe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8009702:	9b05      	ldr	r3, [sp, #20]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1a8      	bne.n	800965a <_strtod_l+0x9da>
 8009708:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800970c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800970e:	0d1b      	lsrs	r3, r3, #20
 8009710:	051b      	lsls	r3, r3, #20
 8009712:	429a      	cmp	r2, r3
 8009714:	d1a1      	bne.n	800965a <_strtod_l+0x9da>
 8009716:	4620      	mov	r0, r4
 8009718:	4629      	mov	r1, r5
 800971a:	f7f7 fd3f 	bl	800119c <__aeabi_d2lz>
 800971e:	f7f6 fead 	bl	800047c <__aeabi_l2d>
 8009722:	4602      	mov	r2, r0
 8009724:	460b      	mov	r3, r1
 8009726:	4620      	mov	r0, r4
 8009728:	4629      	mov	r1, r5
 800972a:	f7f6 fd1d 	bl	8000168 <__aeabi_dsub>
 800972e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009730:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009734:	ea43 0308 	orr.w	r3, r3, r8
 8009738:	4313      	orrs	r3, r2
 800973a:	4604      	mov	r4, r0
 800973c:	460d      	mov	r5, r1
 800973e:	d066      	beq.n	800980e <_strtod_l+0xb8e>
 8009740:	a309      	add	r3, pc, #36	; (adr r3, 8009768 <_strtod_l+0xae8>)
 8009742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009746:	f7f7 f939 	bl	80009bc <__aeabi_dcmplt>
 800974a:	2800      	cmp	r0, #0
 800974c:	f47f ace2 	bne.w	8009114 <_strtod_l+0x494>
 8009750:	a307      	add	r3, pc, #28	; (adr r3, 8009770 <_strtod_l+0xaf0>)
 8009752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009756:	4620      	mov	r0, r4
 8009758:	4629      	mov	r1, r5
 800975a:	f7f7 f94d 	bl	80009f8 <__aeabi_dcmpgt>
 800975e:	2800      	cmp	r0, #0
 8009760:	f43f af7b 	beq.w	800965a <_strtod_l+0x9da>
 8009764:	e4d6      	b.n	8009114 <_strtod_l+0x494>
 8009766:	bf00      	nop
 8009768:	94a03595 	.word	0x94a03595
 800976c:	3fdfffff 	.word	0x3fdfffff
 8009770:	35afe535 	.word	0x35afe535
 8009774:	3fe00000 	.word	0x3fe00000
 8009778:	000fffff 	.word	0x000fffff
 800977c:	7ff00000 	.word	0x7ff00000
 8009780:	7fefffff 	.word	0x7fefffff
 8009784:	3ff00000 	.word	0x3ff00000
 8009788:	7fe00000 	.word	0x7fe00000
 800978c:	7c9fffff 	.word	0x7c9fffff
 8009790:	3fe00000 	.word	0x3fe00000
 8009794:	bff00000 	.word	0xbff00000
 8009798:	9b05      	ldr	r3, [sp, #20]
 800979a:	b313      	cbz	r3, 80097e2 <_strtod_l+0xb62>
 800979c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800979e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80097a2:	d81e      	bhi.n	80097e2 <_strtod_l+0xb62>
 80097a4:	a326      	add	r3, pc, #152	; (adr r3, 8009840 <_strtod_l+0xbc0>)
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	4620      	mov	r0, r4
 80097ac:	4629      	mov	r1, r5
 80097ae:	f7f7 f90f 	bl	80009d0 <__aeabi_dcmple>
 80097b2:	b190      	cbz	r0, 80097da <_strtod_l+0xb5a>
 80097b4:	4629      	mov	r1, r5
 80097b6:	4620      	mov	r0, r4
 80097b8:	f7f7 f966 	bl	8000a88 <__aeabi_d2uiz>
 80097bc:	2801      	cmp	r0, #1
 80097be:	bf38      	it	cc
 80097c0:	2001      	movcc	r0, #1
 80097c2:	f7f6 fe0f 	bl	80003e4 <__aeabi_ui2d>
 80097c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097c8:	4604      	mov	r4, r0
 80097ca:	460d      	mov	r5, r1
 80097cc:	b9d3      	cbnz	r3, 8009804 <_strtod_l+0xb84>
 80097ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097d2:	9012      	str	r0, [sp, #72]	; 0x48
 80097d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80097d6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80097da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80097dc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80097e0:	1a9f      	subs	r7, r3, r2
 80097e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80097e6:	f001 fe41 	bl	800b46c <__ulp>
 80097ea:	4602      	mov	r2, r0
 80097ec:	460b      	mov	r3, r1
 80097ee:	4630      	mov	r0, r6
 80097f0:	4639      	mov	r1, r7
 80097f2:	f7f6 fe71 	bl	80004d8 <__aeabi_dmul>
 80097f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80097fa:	f7f6 fcb7 	bl	800016c <__adddf3>
 80097fe:	4680      	mov	r8, r0
 8009800:	4689      	mov	r9, r1
 8009802:	e77e      	b.n	8009702 <_strtod_l+0xa82>
 8009804:	4602      	mov	r2, r0
 8009806:	460b      	mov	r3, r1
 8009808:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800980c:	e7e3      	b.n	80097d6 <_strtod_l+0xb56>
 800980e:	a30e      	add	r3, pc, #56	; (adr r3, 8009848 <_strtod_l+0xbc8>)
 8009810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009814:	f7f7 f8d2 	bl	80009bc <__aeabi_dcmplt>
 8009818:	e7a1      	b.n	800975e <_strtod_l+0xade>
 800981a:	2300      	movs	r3, #0
 800981c:	930a      	str	r3, [sp, #40]	; 0x28
 800981e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009820:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009822:	6013      	str	r3, [r2, #0]
 8009824:	f7ff ba71 	b.w	8008d0a <_strtod_l+0x8a>
 8009828:	2a65      	cmp	r2, #101	; 0x65
 800982a:	f43f ab63 	beq.w	8008ef4 <_strtod_l+0x274>
 800982e:	2a45      	cmp	r2, #69	; 0x45
 8009830:	f43f ab60 	beq.w	8008ef4 <_strtod_l+0x274>
 8009834:	2301      	movs	r3, #1
 8009836:	f7ff bb95 	b.w	8008f64 <_strtod_l+0x2e4>
 800983a:	bf00      	nop
 800983c:	f3af 8000 	nop.w
 8009840:	ffc00000 	.word	0xffc00000
 8009844:	41dfffff 	.word	0x41dfffff
 8009848:	94a03595 	.word	0x94a03595
 800984c:	3fcfffff 	.word	0x3fcfffff

08009850 <_strtod_r>:
 8009850:	4b01      	ldr	r3, [pc, #4]	; (8009858 <_strtod_r+0x8>)
 8009852:	f7ff ba15 	b.w	8008c80 <_strtod_l>
 8009856:	bf00      	nop
 8009858:	20000108 	.word	0x20000108

0800985c <_strtol_l.constprop.0>:
 800985c:	2b01      	cmp	r3, #1
 800985e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009862:	4680      	mov	r8, r0
 8009864:	d001      	beq.n	800986a <_strtol_l.constprop.0+0xe>
 8009866:	2b24      	cmp	r3, #36	; 0x24
 8009868:	d906      	bls.n	8009878 <_strtol_l.constprop.0+0x1c>
 800986a:	f7fe fb21 	bl	8007eb0 <__errno>
 800986e:	2316      	movs	r3, #22
 8009870:	6003      	str	r3, [r0, #0]
 8009872:	2000      	movs	r0, #0
 8009874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009878:	460d      	mov	r5, r1
 800987a:	4f35      	ldr	r7, [pc, #212]	; (8009950 <_strtol_l.constprop.0+0xf4>)
 800987c:	4628      	mov	r0, r5
 800987e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009882:	5de6      	ldrb	r6, [r4, r7]
 8009884:	f016 0608 	ands.w	r6, r6, #8
 8009888:	d1f8      	bne.n	800987c <_strtol_l.constprop.0+0x20>
 800988a:	2c2d      	cmp	r4, #45	; 0x2d
 800988c:	d12f      	bne.n	80098ee <_strtol_l.constprop.0+0x92>
 800988e:	2601      	movs	r6, #1
 8009890:	782c      	ldrb	r4, [r5, #0]
 8009892:	1c85      	adds	r5, r0, #2
 8009894:	2b00      	cmp	r3, #0
 8009896:	d057      	beq.n	8009948 <_strtol_l.constprop.0+0xec>
 8009898:	2b10      	cmp	r3, #16
 800989a:	d109      	bne.n	80098b0 <_strtol_l.constprop.0+0x54>
 800989c:	2c30      	cmp	r4, #48	; 0x30
 800989e:	d107      	bne.n	80098b0 <_strtol_l.constprop.0+0x54>
 80098a0:	7828      	ldrb	r0, [r5, #0]
 80098a2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80098a6:	2858      	cmp	r0, #88	; 0x58
 80098a8:	d149      	bne.n	800993e <_strtol_l.constprop.0+0xe2>
 80098aa:	2310      	movs	r3, #16
 80098ac:	786c      	ldrb	r4, [r5, #1]
 80098ae:	3502      	adds	r5, #2
 80098b0:	2700      	movs	r7, #0
 80098b2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80098b6:	f10e 3eff 	add.w	lr, lr, #4294967295
 80098ba:	fbbe f9f3 	udiv	r9, lr, r3
 80098be:	4638      	mov	r0, r7
 80098c0:	fb03 ea19 	mls	sl, r3, r9, lr
 80098c4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80098c8:	f1bc 0f09 	cmp.w	ip, #9
 80098cc:	d814      	bhi.n	80098f8 <_strtol_l.constprop.0+0x9c>
 80098ce:	4664      	mov	r4, ip
 80098d0:	42a3      	cmp	r3, r4
 80098d2:	dd22      	ble.n	800991a <_strtol_l.constprop.0+0xbe>
 80098d4:	2f00      	cmp	r7, #0
 80098d6:	db1d      	blt.n	8009914 <_strtol_l.constprop.0+0xb8>
 80098d8:	4581      	cmp	r9, r0
 80098da:	d31b      	bcc.n	8009914 <_strtol_l.constprop.0+0xb8>
 80098dc:	d101      	bne.n	80098e2 <_strtol_l.constprop.0+0x86>
 80098de:	45a2      	cmp	sl, r4
 80098e0:	db18      	blt.n	8009914 <_strtol_l.constprop.0+0xb8>
 80098e2:	2701      	movs	r7, #1
 80098e4:	fb00 4003 	mla	r0, r0, r3, r4
 80098e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098ec:	e7ea      	b.n	80098c4 <_strtol_l.constprop.0+0x68>
 80098ee:	2c2b      	cmp	r4, #43	; 0x2b
 80098f0:	bf04      	itt	eq
 80098f2:	782c      	ldrbeq	r4, [r5, #0]
 80098f4:	1c85      	addeq	r5, r0, #2
 80098f6:	e7cd      	b.n	8009894 <_strtol_l.constprop.0+0x38>
 80098f8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80098fc:	f1bc 0f19 	cmp.w	ip, #25
 8009900:	d801      	bhi.n	8009906 <_strtol_l.constprop.0+0xaa>
 8009902:	3c37      	subs	r4, #55	; 0x37
 8009904:	e7e4      	b.n	80098d0 <_strtol_l.constprop.0+0x74>
 8009906:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800990a:	f1bc 0f19 	cmp.w	ip, #25
 800990e:	d804      	bhi.n	800991a <_strtol_l.constprop.0+0xbe>
 8009910:	3c57      	subs	r4, #87	; 0x57
 8009912:	e7dd      	b.n	80098d0 <_strtol_l.constprop.0+0x74>
 8009914:	f04f 37ff 	mov.w	r7, #4294967295
 8009918:	e7e6      	b.n	80098e8 <_strtol_l.constprop.0+0x8c>
 800991a:	2f00      	cmp	r7, #0
 800991c:	da07      	bge.n	800992e <_strtol_l.constprop.0+0xd2>
 800991e:	2322      	movs	r3, #34	; 0x22
 8009920:	4670      	mov	r0, lr
 8009922:	f8c8 3000 	str.w	r3, [r8]
 8009926:	2a00      	cmp	r2, #0
 8009928:	d0a4      	beq.n	8009874 <_strtol_l.constprop.0+0x18>
 800992a:	1e69      	subs	r1, r5, #1
 800992c:	e005      	b.n	800993a <_strtol_l.constprop.0+0xde>
 800992e:	b106      	cbz	r6, 8009932 <_strtol_l.constprop.0+0xd6>
 8009930:	4240      	negs	r0, r0
 8009932:	2a00      	cmp	r2, #0
 8009934:	d09e      	beq.n	8009874 <_strtol_l.constprop.0+0x18>
 8009936:	2f00      	cmp	r7, #0
 8009938:	d1f7      	bne.n	800992a <_strtol_l.constprop.0+0xce>
 800993a:	6011      	str	r1, [r2, #0]
 800993c:	e79a      	b.n	8009874 <_strtol_l.constprop.0+0x18>
 800993e:	2430      	movs	r4, #48	; 0x30
 8009940:	2b00      	cmp	r3, #0
 8009942:	d1b5      	bne.n	80098b0 <_strtol_l.constprop.0+0x54>
 8009944:	2308      	movs	r3, #8
 8009946:	e7b3      	b.n	80098b0 <_strtol_l.constprop.0+0x54>
 8009948:	2c30      	cmp	r4, #48	; 0x30
 800994a:	d0a9      	beq.n	80098a0 <_strtol_l.constprop.0+0x44>
 800994c:	230a      	movs	r3, #10
 800994e:	e7af      	b.n	80098b0 <_strtol_l.constprop.0+0x54>
 8009950:	0800d199 	.word	0x0800d199

08009954 <_strtol_r>:
 8009954:	f7ff bf82 	b.w	800985c <_strtol_l.constprop.0>

08009958 <quorem>:
 8009958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995c:	6903      	ldr	r3, [r0, #16]
 800995e:	690c      	ldr	r4, [r1, #16]
 8009960:	4607      	mov	r7, r0
 8009962:	42a3      	cmp	r3, r4
 8009964:	f2c0 8082 	blt.w	8009a6c <quorem+0x114>
 8009968:	3c01      	subs	r4, #1
 800996a:	f100 0514 	add.w	r5, r0, #20
 800996e:	f101 0814 	add.w	r8, r1, #20
 8009972:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009976:	9301      	str	r3, [sp, #4]
 8009978:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800997c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009980:	3301      	adds	r3, #1
 8009982:	429a      	cmp	r2, r3
 8009984:	fbb2 f6f3 	udiv	r6, r2, r3
 8009988:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800998c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009990:	d331      	bcc.n	80099f6 <quorem+0x9e>
 8009992:	f04f 0e00 	mov.w	lr, #0
 8009996:	4640      	mov	r0, r8
 8009998:	46ac      	mov	ip, r5
 800999a:	46f2      	mov	sl, lr
 800999c:	f850 2b04 	ldr.w	r2, [r0], #4
 80099a0:	b293      	uxth	r3, r2
 80099a2:	fb06 e303 	mla	r3, r6, r3, lr
 80099a6:	0c12      	lsrs	r2, r2, #16
 80099a8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	fb06 e202 	mla	r2, r6, r2, lr
 80099b2:	ebaa 0303 	sub.w	r3, sl, r3
 80099b6:	f8dc a000 	ldr.w	sl, [ip]
 80099ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80099be:	fa1f fa8a 	uxth.w	sl, sl
 80099c2:	4453      	add	r3, sl
 80099c4:	f8dc a000 	ldr.w	sl, [ip]
 80099c8:	b292      	uxth	r2, r2
 80099ca:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80099ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099d8:	4581      	cmp	r9, r0
 80099da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80099de:	f84c 3b04 	str.w	r3, [ip], #4
 80099e2:	d2db      	bcs.n	800999c <quorem+0x44>
 80099e4:	f855 300b 	ldr.w	r3, [r5, fp]
 80099e8:	b92b      	cbnz	r3, 80099f6 <quorem+0x9e>
 80099ea:	9b01      	ldr	r3, [sp, #4]
 80099ec:	3b04      	subs	r3, #4
 80099ee:	429d      	cmp	r5, r3
 80099f0:	461a      	mov	r2, r3
 80099f2:	d32f      	bcc.n	8009a54 <quorem+0xfc>
 80099f4:	613c      	str	r4, [r7, #16]
 80099f6:	4638      	mov	r0, r7
 80099f8:	f001 fc90 	bl	800b31c <__mcmp>
 80099fc:	2800      	cmp	r0, #0
 80099fe:	db25      	blt.n	8009a4c <quorem+0xf4>
 8009a00:	4628      	mov	r0, r5
 8009a02:	f04f 0c00 	mov.w	ip, #0
 8009a06:	3601      	adds	r6, #1
 8009a08:	f858 1b04 	ldr.w	r1, [r8], #4
 8009a0c:	f8d0 e000 	ldr.w	lr, [r0]
 8009a10:	b28b      	uxth	r3, r1
 8009a12:	ebac 0303 	sub.w	r3, ip, r3
 8009a16:	fa1f f28e 	uxth.w	r2, lr
 8009a1a:	4413      	add	r3, r2
 8009a1c:	0c0a      	lsrs	r2, r1, #16
 8009a1e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009a22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a2c:	45c1      	cmp	r9, r8
 8009a2e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009a32:	f840 3b04 	str.w	r3, [r0], #4
 8009a36:	d2e7      	bcs.n	8009a08 <quorem+0xb0>
 8009a38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a40:	b922      	cbnz	r2, 8009a4c <quorem+0xf4>
 8009a42:	3b04      	subs	r3, #4
 8009a44:	429d      	cmp	r5, r3
 8009a46:	461a      	mov	r2, r3
 8009a48:	d30a      	bcc.n	8009a60 <quorem+0x108>
 8009a4a:	613c      	str	r4, [r7, #16]
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	b003      	add	sp, #12
 8009a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a54:	6812      	ldr	r2, [r2, #0]
 8009a56:	3b04      	subs	r3, #4
 8009a58:	2a00      	cmp	r2, #0
 8009a5a:	d1cb      	bne.n	80099f4 <quorem+0x9c>
 8009a5c:	3c01      	subs	r4, #1
 8009a5e:	e7c6      	b.n	80099ee <quorem+0x96>
 8009a60:	6812      	ldr	r2, [r2, #0]
 8009a62:	3b04      	subs	r3, #4
 8009a64:	2a00      	cmp	r2, #0
 8009a66:	d1f0      	bne.n	8009a4a <quorem+0xf2>
 8009a68:	3c01      	subs	r4, #1
 8009a6a:	e7eb      	b.n	8009a44 <quorem+0xec>
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	e7ee      	b.n	8009a4e <quorem+0xf6>

08009a70 <_dtoa_r>:
 8009a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a74:	4616      	mov	r6, r2
 8009a76:	461f      	mov	r7, r3
 8009a78:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009a7a:	b099      	sub	sp, #100	; 0x64
 8009a7c:	4605      	mov	r5, r0
 8009a7e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009a82:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009a86:	b974      	cbnz	r4, 8009aa6 <_dtoa_r+0x36>
 8009a88:	2010      	movs	r0, #16
 8009a8a:	f001 f949 	bl	800ad20 <malloc>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	6268      	str	r0, [r5, #36]	; 0x24
 8009a92:	b920      	cbnz	r0, 8009a9e <_dtoa_r+0x2e>
 8009a94:	21ea      	movs	r1, #234	; 0xea
 8009a96:	4ba8      	ldr	r3, [pc, #672]	; (8009d38 <_dtoa_r+0x2c8>)
 8009a98:	48a8      	ldr	r0, [pc, #672]	; (8009d3c <_dtoa_r+0x2cc>)
 8009a9a:	f002 f8b3 	bl	800bc04 <__assert_func>
 8009a9e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009aa2:	6004      	str	r4, [r0, #0]
 8009aa4:	60c4      	str	r4, [r0, #12]
 8009aa6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009aa8:	6819      	ldr	r1, [r3, #0]
 8009aaa:	b151      	cbz	r1, 8009ac2 <_dtoa_r+0x52>
 8009aac:	685a      	ldr	r2, [r3, #4]
 8009aae:	2301      	movs	r3, #1
 8009ab0:	4093      	lsls	r3, r2
 8009ab2:	604a      	str	r2, [r1, #4]
 8009ab4:	608b      	str	r3, [r1, #8]
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	f001 f9a8 	bl	800ae0c <_Bfree>
 8009abc:	2200      	movs	r2, #0
 8009abe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ac0:	601a      	str	r2, [r3, #0]
 8009ac2:	1e3b      	subs	r3, r7, #0
 8009ac4:	bfaf      	iteee	ge
 8009ac6:	2300      	movge	r3, #0
 8009ac8:	2201      	movlt	r2, #1
 8009aca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009ace:	9305      	strlt	r3, [sp, #20]
 8009ad0:	bfa8      	it	ge
 8009ad2:	f8c8 3000 	strge.w	r3, [r8]
 8009ad6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009ada:	4b99      	ldr	r3, [pc, #612]	; (8009d40 <_dtoa_r+0x2d0>)
 8009adc:	bfb8      	it	lt
 8009ade:	f8c8 2000 	strlt.w	r2, [r8]
 8009ae2:	ea33 0309 	bics.w	r3, r3, r9
 8009ae6:	d119      	bne.n	8009b1c <_dtoa_r+0xac>
 8009ae8:	f242 730f 	movw	r3, #9999	; 0x270f
 8009aec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009aee:	6013      	str	r3, [r2, #0]
 8009af0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009af4:	4333      	orrs	r3, r6
 8009af6:	f000 857f 	beq.w	800a5f8 <_dtoa_r+0xb88>
 8009afa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009afc:	b953      	cbnz	r3, 8009b14 <_dtoa_r+0xa4>
 8009afe:	4b91      	ldr	r3, [pc, #580]	; (8009d44 <_dtoa_r+0x2d4>)
 8009b00:	e022      	b.n	8009b48 <_dtoa_r+0xd8>
 8009b02:	4b91      	ldr	r3, [pc, #580]	; (8009d48 <_dtoa_r+0x2d8>)
 8009b04:	9303      	str	r3, [sp, #12]
 8009b06:	3308      	adds	r3, #8
 8009b08:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009b0a:	6013      	str	r3, [r2, #0]
 8009b0c:	9803      	ldr	r0, [sp, #12]
 8009b0e:	b019      	add	sp, #100	; 0x64
 8009b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b14:	4b8b      	ldr	r3, [pc, #556]	; (8009d44 <_dtoa_r+0x2d4>)
 8009b16:	9303      	str	r3, [sp, #12]
 8009b18:	3303      	adds	r3, #3
 8009b1a:	e7f5      	b.n	8009b08 <_dtoa_r+0x98>
 8009b1c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009b20:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8009b24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b28:	2200      	movs	r2, #0
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	f7f6 ff3c 	bl	80009a8 <__aeabi_dcmpeq>
 8009b30:	4680      	mov	r8, r0
 8009b32:	b158      	cbz	r0, 8009b4c <_dtoa_r+0xdc>
 8009b34:	2301      	movs	r3, #1
 8009b36:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009b38:	6013      	str	r3, [r2, #0]
 8009b3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f000 8558 	beq.w	800a5f2 <_dtoa_r+0xb82>
 8009b42:	4882      	ldr	r0, [pc, #520]	; (8009d4c <_dtoa_r+0x2dc>)
 8009b44:	6018      	str	r0, [r3, #0]
 8009b46:	1e43      	subs	r3, r0, #1
 8009b48:	9303      	str	r3, [sp, #12]
 8009b4a:	e7df      	b.n	8009b0c <_dtoa_r+0x9c>
 8009b4c:	ab16      	add	r3, sp, #88	; 0x58
 8009b4e:	9301      	str	r3, [sp, #4]
 8009b50:	ab17      	add	r3, sp, #92	; 0x5c
 8009b52:	9300      	str	r3, [sp, #0]
 8009b54:	4628      	mov	r0, r5
 8009b56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009b5a:	f001 fd01 	bl	800b560 <__d2b>
 8009b5e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009b62:	4683      	mov	fp, r0
 8009b64:	2c00      	cmp	r4, #0
 8009b66:	d07f      	beq.n	8009c68 <_dtoa_r+0x1f8>
 8009b68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b6e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009b72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b76:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8009b7a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009b7e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009b82:	2200      	movs	r2, #0
 8009b84:	4b72      	ldr	r3, [pc, #456]	; (8009d50 <_dtoa_r+0x2e0>)
 8009b86:	f7f6 faef 	bl	8000168 <__aeabi_dsub>
 8009b8a:	a365      	add	r3, pc, #404	; (adr r3, 8009d20 <_dtoa_r+0x2b0>)
 8009b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b90:	f7f6 fca2 	bl	80004d8 <__aeabi_dmul>
 8009b94:	a364      	add	r3, pc, #400	; (adr r3, 8009d28 <_dtoa_r+0x2b8>)
 8009b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9a:	f7f6 fae7 	bl	800016c <__adddf3>
 8009b9e:	4606      	mov	r6, r0
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	460f      	mov	r7, r1
 8009ba4:	f7f6 fc2e 	bl	8000404 <__aeabi_i2d>
 8009ba8:	a361      	add	r3, pc, #388	; (adr r3, 8009d30 <_dtoa_r+0x2c0>)
 8009baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bae:	f7f6 fc93 	bl	80004d8 <__aeabi_dmul>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	4630      	mov	r0, r6
 8009bb8:	4639      	mov	r1, r7
 8009bba:	f7f6 fad7 	bl	800016c <__adddf3>
 8009bbe:	4606      	mov	r6, r0
 8009bc0:	460f      	mov	r7, r1
 8009bc2:	f7f6 ff39 	bl	8000a38 <__aeabi_d2iz>
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	4682      	mov	sl, r0
 8009bca:	2300      	movs	r3, #0
 8009bcc:	4630      	mov	r0, r6
 8009bce:	4639      	mov	r1, r7
 8009bd0:	f7f6 fef4 	bl	80009bc <__aeabi_dcmplt>
 8009bd4:	b148      	cbz	r0, 8009bea <_dtoa_r+0x17a>
 8009bd6:	4650      	mov	r0, sl
 8009bd8:	f7f6 fc14 	bl	8000404 <__aeabi_i2d>
 8009bdc:	4632      	mov	r2, r6
 8009bde:	463b      	mov	r3, r7
 8009be0:	f7f6 fee2 	bl	80009a8 <__aeabi_dcmpeq>
 8009be4:	b908      	cbnz	r0, 8009bea <_dtoa_r+0x17a>
 8009be6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009bea:	f1ba 0f16 	cmp.w	sl, #22
 8009bee:	d858      	bhi.n	8009ca2 <_dtoa_r+0x232>
 8009bf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009bf4:	4b57      	ldr	r3, [pc, #348]	; (8009d54 <_dtoa_r+0x2e4>)
 8009bf6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfe:	f7f6 fedd 	bl	80009bc <__aeabi_dcmplt>
 8009c02:	2800      	cmp	r0, #0
 8009c04:	d04f      	beq.n	8009ca6 <_dtoa_r+0x236>
 8009c06:	2300      	movs	r3, #0
 8009c08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c0e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009c10:	1b1c      	subs	r4, r3, r4
 8009c12:	1e63      	subs	r3, r4, #1
 8009c14:	9309      	str	r3, [sp, #36]	; 0x24
 8009c16:	bf49      	itett	mi
 8009c18:	f1c4 0301 	rsbmi	r3, r4, #1
 8009c1c:	2300      	movpl	r3, #0
 8009c1e:	9306      	strmi	r3, [sp, #24]
 8009c20:	2300      	movmi	r3, #0
 8009c22:	bf54      	ite	pl
 8009c24:	9306      	strpl	r3, [sp, #24]
 8009c26:	9309      	strmi	r3, [sp, #36]	; 0x24
 8009c28:	f1ba 0f00 	cmp.w	sl, #0
 8009c2c:	db3d      	blt.n	8009caa <_dtoa_r+0x23a>
 8009c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c30:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009c34:	4453      	add	r3, sl
 8009c36:	9309      	str	r3, [sp, #36]	; 0x24
 8009c38:	2300      	movs	r3, #0
 8009c3a:	930a      	str	r3, [sp, #40]	; 0x28
 8009c3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c3e:	2b09      	cmp	r3, #9
 8009c40:	f200 808c 	bhi.w	8009d5c <_dtoa_r+0x2ec>
 8009c44:	2b05      	cmp	r3, #5
 8009c46:	bfc4      	itt	gt
 8009c48:	3b04      	subgt	r3, #4
 8009c4a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009c4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c4e:	bfc8      	it	gt
 8009c50:	2400      	movgt	r4, #0
 8009c52:	f1a3 0302 	sub.w	r3, r3, #2
 8009c56:	bfd8      	it	le
 8009c58:	2401      	movle	r4, #1
 8009c5a:	2b03      	cmp	r3, #3
 8009c5c:	f200 808a 	bhi.w	8009d74 <_dtoa_r+0x304>
 8009c60:	e8df f003 	tbb	[pc, r3]
 8009c64:	5b4d4f2d 	.word	0x5b4d4f2d
 8009c68:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009c6c:	441c      	add	r4, r3
 8009c6e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009c72:	2b20      	cmp	r3, #32
 8009c74:	bfc3      	ittte	gt
 8009c76:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009c7a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8009c7e:	fa09 f303 	lslgt.w	r3, r9, r3
 8009c82:	f1c3 0320 	rsble	r3, r3, #32
 8009c86:	bfc6      	itte	gt
 8009c88:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009c8c:	4318      	orrgt	r0, r3
 8009c8e:	fa06 f003 	lslle.w	r0, r6, r3
 8009c92:	f7f6 fba7 	bl	80003e4 <__aeabi_ui2d>
 8009c96:	2301      	movs	r3, #1
 8009c98:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009c9c:	3c01      	subs	r4, #1
 8009c9e:	9313      	str	r3, [sp, #76]	; 0x4c
 8009ca0:	e76f      	b.n	8009b82 <_dtoa_r+0x112>
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e7b2      	b.n	8009c0c <_dtoa_r+0x19c>
 8009ca6:	900f      	str	r0, [sp, #60]	; 0x3c
 8009ca8:	e7b1      	b.n	8009c0e <_dtoa_r+0x19e>
 8009caa:	9b06      	ldr	r3, [sp, #24]
 8009cac:	eba3 030a 	sub.w	r3, r3, sl
 8009cb0:	9306      	str	r3, [sp, #24]
 8009cb2:	f1ca 0300 	rsb	r3, sl, #0
 8009cb6:	930a      	str	r3, [sp, #40]	; 0x28
 8009cb8:	2300      	movs	r3, #0
 8009cba:	930e      	str	r3, [sp, #56]	; 0x38
 8009cbc:	e7be      	b.n	8009c3c <_dtoa_r+0x1cc>
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009cc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	dc58      	bgt.n	8009d7a <_dtoa_r+0x30a>
 8009cc8:	f04f 0901 	mov.w	r9, #1
 8009ccc:	464b      	mov	r3, r9
 8009cce:	f8cd 9020 	str.w	r9, [sp, #32]
 8009cd2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009cda:	6042      	str	r2, [r0, #4]
 8009cdc:	2204      	movs	r2, #4
 8009cde:	f102 0614 	add.w	r6, r2, #20
 8009ce2:	429e      	cmp	r6, r3
 8009ce4:	6841      	ldr	r1, [r0, #4]
 8009ce6:	d94e      	bls.n	8009d86 <_dtoa_r+0x316>
 8009ce8:	4628      	mov	r0, r5
 8009cea:	f001 f84f 	bl	800ad8c <_Balloc>
 8009cee:	9003      	str	r0, [sp, #12]
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	d14c      	bne.n	8009d8e <_dtoa_r+0x31e>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009cfa:	4b17      	ldr	r3, [pc, #92]	; (8009d58 <_dtoa_r+0x2e8>)
 8009cfc:	e6cc      	b.n	8009a98 <_dtoa_r+0x28>
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e7de      	b.n	8009cc0 <_dtoa_r+0x250>
 8009d02:	2300      	movs	r3, #0
 8009d04:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009d08:	eb0a 0903 	add.w	r9, sl, r3
 8009d0c:	f109 0301 	add.w	r3, r9, #1
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	9308      	str	r3, [sp, #32]
 8009d14:	bfb8      	it	lt
 8009d16:	2301      	movlt	r3, #1
 8009d18:	e7dd      	b.n	8009cd6 <_dtoa_r+0x266>
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	e7f2      	b.n	8009d04 <_dtoa_r+0x294>
 8009d1e:	bf00      	nop
 8009d20:	636f4361 	.word	0x636f4361
 8009d24:	3fd287a7 	.word	0x3fd287a7
 8009d28:	8b60c8b3 	.word	0x8b60c8b3
 8009d2c:	3fc68a28 	.word	0x3fc68a28
 8009d30:	509f79fb 	.word	0x509f79fb
 8009d34:	3fd34413 	.word	0x3fd34413
 8009d38:	0800d2a6 	.word	0x0800d2a6
 8009d3c:	0800d2bd 	.word	0x0800d2bd
 8009d40:	7ff00000 	.word	0x7ff00000
 8009d44:	0800d2a2 	.word	0x0800d2a2
 8009d48:	0800d299 	.word	0x0800d299
 8009d4c:	0800d119 	.word	0x0800d119
 8009d50:	3ff80000 	.word	0x3ff80000
 8009d54:	0800d428 	.word	0x0800d428
 8009d58:	0800d318 	.word	0x0800d318
 8009d5c:	2401      	movs	r4, #1
 8009d5e:	2300      	movs	r3, #0
 8009d60:	940b      	str	r4, [sp, #44]	; 0x2c
 8009d62:	9322      	str	r3, [sp, #136]	; 0x88
 8009d64:	f04f 39ff 	mov.w	r9, #4294967295
 8009d68:	2200      	movs	r2, #0
 8009d6a:	2312      	movs	r3, #18
 8009d6c:	f8cd 9020 	str.w	r9, [sp, #32]
 8009d70:	9223      	str	r2, [sp, #140]	; 0x8c
 8009d72:	e7b0      	b.n	8009cd6 <_dtoa_r+0x266>
 8009d74:	2301      	movs	r3, #1
 8009d76:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d78:	e7f4      	b.n	8009d64 <_dtoa_r+0x2f4>
 8009d7a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8009d7e:	464b      	mov	r3, r9
 8009d80:	f8cd 9020 	str.w	r9, [sp, #32]
 8009d84:	e7a7      	b.n	8009cd6 <_dtoa_r+0x266>
 8009d86:	3101      	adds	r1, #1
 8009d88:	6041      	str	r1, [r0, #4]
 8009d8a:	0052      	lsls	r2, r2, #1
 8009d8c:	e7a7      	b.n	8009cde <_dtoa_r+0x26e>
 8009d8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009d90:	9a03      	ldr	r2, [sp, #12]
 8009d92:	601a      	str	r2, [r3, #0]
 8009d94:	9b08      	ldr	r3, [sp, #32]
 8009d96:	2b0e      	cmp	r3, #14
 8009d98:	f200 80a8 	bhi.w	8009eec <_dtoa_r+0x47c>
 8009d9c:	2c00      	cmp	r4, #0
 8009d9e:	f000 80a5 	beq.w	8009eec <_dtoa_r+0x47c>
 8009da2:	f1ba 0f00 	cmp.w	sl, #0
 8009da6:	dd34      	ble.n	8009e12 <_dtoa_r+0x3a2>
 8009da8:	4a9a      	ldr	r2, [pc, #616]	; (800a014 <_dtoa_r+0x5a4>)
 8009daa:	f00a 030f 	and.w	r3, sl, #15
 8009dae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009db2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009db6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009dba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009dbe:	ea4f 142a 	mov.w	r4, sl, asr #4
 8009dc2:	d016      	beq.n	8009df2 <_dtoa_r+0x382>
 8009dc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009dc8:	4b93      	ldr	r3, [pc, #588]	; (800a018 <_dtoa_r+0x5a8>)
 8009dca:	2703      	movs	r7, #3
 8009dcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009dd0:	f7f6 fcac 	bl	800072c <__aeabi_ddiv>
 8009dd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009dd8:	f004 040f 	and.w	r4, r4, #15
 8009ddc:	4e8e      	ldr	r6, [pc, #568]	; (800a018 <_dtoa_r+0x5a8>)
 8009dde:	b954      	cbnz	r4, 8009df6 <_dtoa_r+0x386>
 8009de0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009de4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009de8:	f7f6 fca0 	bl	800072c <__aeabi_ddiv>
 8009dec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009df0:	e029      	b.n	8009e46 <_dtoa_r+0x3d6>
 8009df2:	2702      	movs	r7, #2
 8009df4:	e7f2      	b.n	8009ddc <_dtoa_r+0x36c>
 8009df6:	07e1      	lsls	r1, r4, #31
 8009df8:	d508      	bpl.n	8009e0c <_dtoa_r+0x39c>
 8009dfa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009dfe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009e02:	f7f6 fb69 	bl	80004d8 <__aeabi_dmul>
 8009e06:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009e0a:	3701      	adds	r7, #1
 8009e0c:	1064      	asrs	r4, r4, #1
 8009e0e:	3608      	adds	r6, #8
 8009e10:	e7e5      	b.n	8009dde <_dtoa_r+0x36e>
 8009e12:	f000 80a5 	beq.w	8009f60 <_dtoa_r+0x4f0>
 8009e16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e1a:	f1ca 0400 	rsb	r4, sl, #0
 8009e1e:	4b7d      	ldr	r3, [pc, #500]	; (800a014 <_dtoa_r+0x5a4>)
 8009e20:	f004 020f 	and.w	r2, r4, #15
 8009e24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2c:	f7f6 fb54 	bl	80004d8 <__aeabi_dmul>
 8009e30:	2702      	movs	r7, #2
 8009e32:	2300      	movs	r3, #0
 8009e34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e38:	4e77      	ldr	r6, [pc, #476]	; (800a018 <_dtoa_r+0x5a8>)
 8009e3a:	1124      	asrs	r4, r4, #4
 8009e3c:	2c00      	cmp	r4, #0
 8009e3e:	f040 8084 	bne.w	8009f4a <_dtoa_r+0x4da>
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d1d2      	bne.n	8009dec <_dtoa_r+0x37c>
 8009e46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f000 808b 	beq.w	8009f64 <_dtoa_r+0x4f4>
 8009e4e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009e52:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009e56:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	4b6f      	ldr	r3, [pc, #444]	; (800a01c <_dtoa_r+0x5ac>)
 8009e5e:	f7f6 fdad 	bl	80009bc <__aeabi_dcmplt>
 8009e62:	2800      	cmp	r0, #0
 8009e64:	d07e      	beq.n	8009f64 <_dtoa_r+0x4f4>
 8009e66:	9b08      	ldr	r3, [sp, #32]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d07b      	beq.n	8009f64 <_dtoa_r+0x4f4>
 8009e6c:	f1b9 0f00 	cmp.w	r9, #0
 8009e70:	dd38      	ble.n	8009ee4 <_dtoa_r+0x474>
 8009e72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009e76:	2200      	movs	r2, #0
 8009e78:	4b69      	ldr	r3, [pc, #420]	; (800a020 <_dtoa_r+0x5b0>)
 8009e7a:	f7f6 fb2d 	bl	80004d8 <__aeabi_dmul>
 8009e7e:	464c      	mov	r4, r9
 8009e80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e84:	f10a 38ff 	add.w	r8, sl, #4294967295
 8009e88:	3701      	adds	r7, #1
 8009e8a:	4638      	mov	r0, r7
 8009e8c:	f7f6 faba 	bl	8000404 <__aeabi_i2d>
 8009e90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e94:	f7f6 fb20 	bl	80004d8 <__aeabi_dmul>
 8009e98:	2200      	movs	r2, #0
 8009e9a:	4b62      	ldr	r3, [pc, #392]	; (800a024 <_dtoa_r+0x5b4>)
 8009e9c:	f7f6 f966 	bl	800016c <__adddf3>
 8009ea0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009ea4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009ea8:	9611      	str	r6, [sp, #68]	; 0x44
 8009eaa:	2c00      	cmp	r4, #0
 8009eac:	d15d      	bne.n	8009f6a <_dtoa_r+0x4fa>
 8009eae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	4b5c      	ldr	r3, [pc, #368]	; (800a028 <_dtoa_r+0x5b8>)
 8009eb6:	f7f6 f957 	bl	8000168 <__aeabi_dsub>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ec2:	4633      	mov	r3, r6
 8009ec4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ec6:	f7f6 fd97 	bl	80009f8 <__aeabi_dcmpgt>
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	f040 829c 	bne.w	800a408 <_dtoa_r+0x998>
 8009ed0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ed4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009ed6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009eda:	f7f6 fd6f 	bl	80009bc <__aeabi_dcmplt>
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	f040 8290 	bne.w	800a404 <_dtoa_r+0x994>
 8009ee4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009ee8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009eec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	f2c0 8152 	blt.w	800a198 <_dtoa_r+0x728>
 8009ef4:	f1ba 0f0e 	cmp.w	sl, #14
 8009ef8:	f300 814e 	bgt.w	800a198 <_dtoa_r+0x728>
 8009efc:	4b45      	ldr	r3, [pc, #276]	; (800a014 <_dtoa_r+0x5a4>)
 8009efe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009f02:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009f06:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009f0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	f280 80db 	bge.w	800a0c8 <_dtoa_r+0x658>
 8009f12:	9b08      	ldr	r3, [sp, #32]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	f300 80d7 	bgt.w	800a0c8 <_dtoa_r+0x658>
 8009f1a:	f040 8272 	bne.w	800a402 <_dtoa_r+0x992>
 8009f1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f22:	2200      	movs	r2, #0
 8009f24:	4b40      	ldr	r3, [pc, #256]	; (800a028 <_dtoa_r+0x5b8>)
 8009f26:	f7f6 fad7 	bl	80004d8 <__aeabi_dmul>
 8009f2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f2e:	f7f6 fd59 	bl	80009e4 <__aeabi_dcmpge>
 8009f32:	9c08      	ldr	r4, [sp, #32]
 8009f34:	4626      	mov	r6, r4
 8009f36:	2800      	cmp	r0, #0
 8009f38:	f040 8248 	bne.w	800a3cc <_dtoa_r+0x95c>
 8009f3c:	2331      	movs	r3, #49	; 0x31
 8009f3e:	9f03      	ldr	r7, [sp, #12]
 8009f40:	f10a 0a01 	add.w	sl, sl, #1
 8009f44:	f807 3b01 	strb.w	r3, [r7], #1
 8009f48:	e244      	b.n	800a3d4 <_dtoa_r+0x964>
 8009f4a:	07e2      	lsls	r2, r4, #31
 8009f4c:	d505      	bpl.n	8009f5a <_dtoa_r+0x4ea>
 8009f4e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009f52:	f7f6 fac1 	bl	80004d8 <__aeabi_dmul>
 8009f56:	2301      	movs	r3, #1
 8009f58:	3701      	adds	r7, #1
 8009f5a:	1064      	asrs	r4, r4, #1
 8009f5c:	3608      	adds	r6, #8
 8009f5e:	e76d      	b.n	8009e3c <_dtoa_r+0x3cc>
 8009f60:	2702      	movs	r7, #2
 8009f62:	e770      	b.n	8009e46 <_dtoa_r+0x3d6>
 8009f64:	46d0      	mov	r8, sl
 8009f66:	9c08      	ldr	r4, [sp, #32]
 8009f68:	e78f      	b.n	8009e8a <_dtoa_r+0x41a>
 8009f6a:	9903      	ldr	r1, [sp, #12]
 8009f6c:	4b29      	ldr	r3, [pc, #164]	; (800a014 <_dtoa_r+0x5a4>)
 8009f6e:	4421      	add	r1, r4
 8009f70:	9112      	str	r1, [sp, #72]	; 0x48
 8009f72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009f78:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009f7c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f80:	2900      	cmp	r1, #0
 8009f82:	d055      	beq.n	800a030 <_dtoa_r+0x5c0>
 8009f84:	2000      	movs	r0, #0
 8009f86:	4929      	ldr	r1, [pc, #164]	; (800a02c <_dtoa_r+0x5bc>)
 8009f88:	f7f6 fbd0 	bl	800072c <__aeabi_ddiv>
 8009f8c:	463b      	mov	r3, r7
 8009f8e:	4632      	mov	r2, r6
 8009f90:	f7f6 f8ea 	bl	8000168 <__aeabi_dsub>
 8009f94:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009f98:	9f03      	ldr	r7, [sp, #12]
 8009f9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f9e:	f7f6 fd4b 	bl	8000a38 <__aeabi_d2iz>
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	f7f6 fa2e 	bl	8000404 <__aeabi_i2d>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	460b      	mov	r3, r1
 8009fac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009fb0:	f7f6 f8da 	bl	8000168 <__aeabi_dsub>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	3430      	adds	r4, #48	; 0x30
 8009fba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009fbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009fc2:	f807 4b01 	strb.w	r4, [r7], #1
 8009fc6:	f7f6 fcf9 	bl	80009bc <__aeabi_dcmplt>
 8009fca:	2800      	cmp	r0, #0
 8009fcc:	d174      	bne.n	800a0b8 <_dtoa_r+0x648>
 8009fce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fd2:	2000      	movs	r0, #0
 8009fd4:	4911      	ldr	r1, [pc, #68]	; (800a01c <_dtoa_r+0x5ac>)
 8009fd6:	f7f6 f8c7 	bl	8000168 <__aeabi_dsub>
 8009fda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009fde:	f7f6 fced 	bl	80009bc <__aeabi_dcmplt>
 8009fe2:	2800      	cmp	r0, #0
 8009fe4:	f040 80b7 	bne.w	800a156 <_dtoa_r+0x6e6>
 8009fe8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009fea:	429f      	cmp	r7, r3
 8009fec:	f43f af7a 	beq.w	8009ee4 <_dtoa_r+0x474>
 8009ff0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	4b0a      	ldr	r3, [pc, #40]	; (800a020 <_dtoa_r+0x5b0>)
 8009ff8:	f7f6 fa6e 	bl	80004d8 <__aeabi_dmul>
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a002:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a006:	4b06      	ldr	r3, [pc, #24]	; (800a020 <_dtoa_r+0x5b0>)
 800a008:	f7f6 fa66 	bl	80004d8 <__aeabi_dmul>
 800a00c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a010:	e7c3      	b.n	8009f9a <_dtoa_r+0x52a>
 800a012:	bf00      	nop
 800a014:	0800d428 	.word	0x0800d428
 800a018:	0800d400 	.word	0x0800d400
 800a01c:	3ff00000 	.word	0x3ff00000
 800a020:	40240000 	.word	0x40240000
 800a024:	401c0000 	.word	0x401c0000
 800a028:	40140000 	.word	0x40140000
 800a02c:	3fe00000 	.word	0x3fe00000
 800a030:	4630      	mov	r0, r6
 800a032:	4639      	mov	r1, r7
 800a034:	f7f6 fa50 	bl	80004d8 <__aeabi_dmul>
 800a038:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a03a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a03e:	9c03      	ldr	r4, [sp, #12]
 800a040:	9314      	str	r3, [sp, #80]	; 0x50
 800a042:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a046:	f7f6 fcf7 	bl	8000a38 <__aeabi_d2iz>
 800a04a:	9015      	str	r0, [sp, #84]	; 0x54
 800a04c:	f7f6 f9da 	bl	8000404 <__aeabi_i2d>
 800a050:	4602      	mov	r2, r0
 800a052:	460b      	mov	r3, r1
 800a054:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a058:	f7f6 f886 	bl	8000168 <__aeabi_dsub>
 800a05c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a05e:	4606      	mov	r6, r0
 800a060:	3330      	adds	r3, #48	; 0x30
 800a062:	f804 3b01 	strb.w	r3, [r4], #1
 800a066:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a068:	460f      	mov	r7, r1
 800a06a:	429c      	cmp	r4, r3
 800a06c:	f04f 0200 	mov.w	r2, #0
 800a070:	d124      	bne.n	800a0bc <_dtoa_r+0x64c>
 800a072:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a076:	4bb0      	ldr	r3, [pc, #704]	; (800a338 <_dtoa_r+0x8c8>)
 800a078:	f7f6 f878 	bl	800016c <__adddf3>
 800a07c:	4602      	mov	r2, r0
 800a07e:	460b      	mov	r3, r1
 800a080:	4630      	mov	r0, r6
 800a082:	4639      	mov	r1, r7
 800a084:	f7f6 fcb8 	bl	80009f8 <__aeabi_dcmpgt>
 800a088:	2800      	cmp	r0, #0
 800a08a:	d163      	bne.n	800a154 <_dtoa_r+0x6e4>
 800a08c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a090:	2000      	movs	r0, #0
 800a092:	49a9      	ldr	r1, [pc, #676]	; (800a338 <_dtoa_r+0x8c8>)
 800a094:	f7f6 f868 	bl	8000168 <__aeabi_dsub>
 800a098:	4602      	mov	r2, r0
 800a09a:	460b      	mov	r3, r1
 800a09c:	4630      	mov	r0, r6
 800a09e:	4639      	mov	r1, r7
 800a0a0:	f7f6 fc8c 	bl	80009bc <__aeabi_dcmplt>
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	f43f af1d 	beq.w	8009ee4 <_dtoa_r+0x474>
 800a0aa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a0ac:	1e7b      	subs	r3, r7, #1
 800a0ae:	9314      	str	r3, [sp, #80]	; 0x50
 800a0b0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a0b4:	2b30      	cmp	r3, #48	; 0x30
 800a0b6:	d0f8      	beq.n	800a0aa <_dtoa_r+0x63a>
 800a0b8:	46c2      	mov	sl, r8
 800a0ba:	e03b      	b.n	800a134 <_dtoa_r+0x6c4>
 800a0bc:	4b9f      	ldr	r3, [pc, #636]	; (800a33c <_dtoa_r+0x8cc>)
 800a0be:	f7f6 fa0b 	bl	80004d8 <__aeabi_dmul>
 800a0c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0c6:	e7bc      	b.n	800a042 <_dtoa_r+0x5d2>
 800a0c8:	9f03      	ldr	r7, [sp, #12]
 800a0ca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a0ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0d2:	4640      	mov	r0, r8
 800a0d4:	4649      	mov	r1, r9
 800a0d6:	f7f6 fb29 	bl	800072c <__aeabi_ddiv>
 800a0da:	f7f6 fcad 	bl	8000a38 <__aeabi_d2iz>
 800a0de:	4604      	mov	r4, r0
 800a0e0:	f7f6 f990 	bl	8000404 <__aeabi_i2d>
 800a0e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0e8:	f7f6 f9f6 	bl	80004d8 <__aeabi_dmul>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	460b      	mov	r3, r1
 800a0f0:	4640      	mov	r0, r8
 800a0f2:	4649      	mov	r1, r9
 800a0f4:	f7f6 f838 	bl	8000168 <__aeabi_dsub>
 800a0f8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a0fc:	f807 6b01 	strb.w	r6, [r7], #1
 800a100:	9e03      	ldr	r6, [sp, #12]
 800a102:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a106:	1bbe      	subs	r6, r7, r6
 800a108:	45b4      	cmp	ip, r6
 800a10a:	4602      	mov	r2, r0
 800a10c:	460b      	mov	r3, r1
 800a10e:	d136      	bne.n	800a17e <_dtoa_r+0x70e>
 800a110:	f7f6 f82c 	bl	800016c <__adddf3>
 800a114:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a118:	4680      	mov	r8, r0
 800a11a:	4689      	mov	r9, r1
 800a11c:	f7f6 fc6c 	bl	80009f8 <__aeabi_dcmpgt>
 800a120:	bb58      	cbnz	r0, 800a17a <_dtoa_r+0x70a>
 800a122:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a126:	4640      	mov	r0, r8
 800a128:	4649      	mov	r1, r9
 800a12a:	f7f6 fc3d 	bl	80009a8 <__aeabi_dcmpeq>
 800a12e:	b108      	cbz	r0, 800a134 <_dtoa_r+0x6c4>
 800a130:	07e1      	lsls	r1, r4, #31
 800a132:	d422      	bmi.n	800a17a <_dtoa_r+0x70a>
 800a134:	4628      	mov	r0, r5
 800a136:	4659      	mov	r1, fp
 800a138:	f000 fe68 	bl	800ae0c <_Bfree>
 800a13c:	2300      	movs	r3, #0
 800a13e:	703b      	strb	r3, [r7, #0]
 800a140:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a142:	f10a 0001 	add.w	r0, sl, #1
 800a146:	6018      	str	r0, [r3, #0]
 800a148:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	f43f acde 	beq.w	8009b0c <_dtoa_r+0x9c>
 800a150:	601f      	str	r7, [r3, #0]
 800a152:	e4db      	b.n	8009b0c <_dtoa_r+0x9c>
 800a154:	4627      	mov	r7, r4
 800a156:	463b      	mov	r3, r7
 800a158:	461f      	mov	r7, r3
 800a15a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a15e:	2a39      	cmp	r2, #57	; 0x39
 800a160:	d107      	bne.n	800a172 <_dtoa_r+0x702>
 800a162:	9a03      	ldr	r2, [sp, #12]
 800a164:	429a      	cmp	r2, r3
 800a166:	d1f7      	bne.n	800a158 <_dtoa_r+0x6e8>
 800a168:	2230      	movs	r2, #48	; 0x30
 800a16a:	9903      	ldr	r1, [sp, #12]
 800a16c:	f108 0801 	add.w	r8, r8, #1
 800a170:	700a      	strb	r2, [r1, #0]
 800a172:	781a      	ldrb	r2, [r3, #0]
 800a174:	3201      	adds	r2, #1
 800a176:	701a      	strb	r2, [r3, #0]
 800a178:	e79e      	b.n	800a0b8 <_dtoa_r+0x648>
 800a17a:	46d0      	mov	r8, sl
 800a17c:	e7eb      	b.n	800a156 <_dtoa_r+0x6e6>
 800a17e:	2200      	movs	r2, #0
 800a180:	4b6e      	ldr	r3, [pc, #440]	; (800a33c <_dtoa_r+0x8cc>)
 800a182:	f7f6 f9a9 	bl	80004d8 <__aeabi_dmul>
 800a186:	2200      	movs	r2, #0
 800a188:	2300      	movs	r3, #0
 800a18a:	4680      	mov	r8, r0
 800a18c:	4689      	mov	r9, r1
 800a18e:	f7f6 fc0b 	bl	80009a8 <__aeabi_dcmpeq>
 800a192:	2800      	cmp	r0, #0
 800a194:	d09b      	beq.n	800a0ce <_dtoa_r+0x65e>
 800a196:	e7cd      	b.n	800a134 <_dtoa_r+0x6c4>
 800a198:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a19a:	2a00      	cmp	r2, #0
 800a19c:	f000 80d0 	beq.w	800a340 <_dtoa_r+0x8d0>
 800a1a0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a1a2:	2a01      	cmp	r2, #1
 800a1a4:	f300 80ae 	bgt.w	800a304 <_dtoa_r+0x894>
 800a1a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a1aa:	2a00      	cmp	r2, #0
 800a1ac:	f000 80a6 	beq.w	800a2fc <_dtoa_r+0x88c>
 800a1b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a1b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a1b6:	9f06      	ldr	r7, [sp, #24]
 800a1b8:	9a06      	ldr	r2, [sp, #24]
 800a1ba:	2101      	movs	r1, #1
 800a1bc:	441a      	add	r2, r3
 800a1be:	9206      	str	r2, [sp, #24]
 800a1c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	441a      	add	r2, r3
 800a1c6:	9209      	str	r2, [sp, #36]	; 0x24
 800a1c8:	f000 ff20 	bl	800b00c <__i2b>
 800a1cc:	4606      	mov	r6, r0
 800a1ce:	2f00      	cmp	r7, #0
 800a1d0:	dd0c      	ble.n	800a1ec <_dtoa_r+0x77c>
 800a1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	dd09      	ble.n	800a1ec <_dtoa_r+0x77c>
 800a1d8:	42bb      	cmp	r3, r7
 800a1da:	bfa8      	it	ge
 800a1dc:	463b      	movge	r3, r7
 800a1de:	9a06      	ldr	r2, [sp, #24]
 800a1e0:	1aff      	subs	r7, r7, r3
 800a1e2:	1ad2      	subs	r2, r2, r3
 800a1e4:	9206      	str	r2, [sp, #24]
 800a1e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1e8:	1ad3      	subs	r3, r2, r3
 800a1ea:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1ee:	b1f3      	cbz	r3, 800a22e <_dtoa_r+0x7be>
 800a1f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	f000 80a8 	beq.w	800a348 <_dtoa_r+0x8d8>
 800a1f8:	2c00      	cmp	r4, #0
 800a1fa:	dd10      	ble.n	800a21e <_dtoa_r+0x7ae>
 800a1fc:	4631      	mov	r1, r6
 800a1fe:	4622      	mov	r2, r4
 800a200:	4628      	mov	r0, r5
 800a202:	f000 ffc1 	bl	800b188 <__pow5mult>
 800a206:	465a      	mov	r2, fp
 800a208:	4601      	mov	r1, r0
 800a20a:	4606      	mov	r6, r0
 800a20c:	4628      	mov	r0, r5
 800a20e:	f000 ff13 	bl	800b038 <__multiply>
 800a212:	4680      	mov	r8, r0
 800a214:	4659      	mov	r1, fp
 800a216:	4628      	mov	r0, r5
 800a218:	f000 fdf8 	bl	800ae0c <_Bfree>
 800a21c:	46c3      	mov	fp, r8
 800a21e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a220:	1b1a      	subs	r2, r3, r4
 800a222:	d004      	beq.n	800a22e <_dtoa_r+0x7be>
 800a224:	4659      	mov	r1, fp
 800a226:	4628      	mov	r0, r5
 800a228:	f000 ffae 	bl	800b188 <__pow5mult>
 800a22c:	4683      	mov	fp, r0
 800a22e:	2101      	movs	r1, #1
 800a230:	4628      	mov	r0, r5
 800a232:	f000 feeb 	bl	800b00c <__i2b>
 800a236:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a238:	4604      	mov	r4, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	f340 8086 	ble.w	800a34c <_dtoa_r+0x8dc>
 800a240:	461a      	mov	r2, r3
 800a242:	4601      	mov	r1, r0
 800a244:	4628      	mov	r0, r5
 800a246:	f000 ff9f 	bl	800b188 <__pow5mult>
 800a24a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a24c:	4604      	mov	r4, r0
 800a24e:	2b01      	cmp	r3, #1
 800a250:	dd7f      	ble.n	800a352 <_dtoa_r+0x8e2>
 800a252:	f04f 0800 	mov.w	r8, #0
 800a256:	6923      	ldr	r3, [r4, #16]
 800a258:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a25c:	6918      	ldr	r0, [r3, #16]
 800a25e:	f000 fe87 	bl	800af70 <__hi0bits>
 800a262:	f1c0 0020 	rsb	r0, r0, #32
 800a266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a268:	4418      	add	r0, r3
 800a26a:	f010 001f 	ands.w	r0, r0, #31
 800a26e:	f000 8092 	beq.w	800a396 <_dtoa_r+0x926>
 800a272:	f1c0 0320 	rsb	r3, r0, #32
 800a276:	2b04      	cmp	r3, #4
 800a278:	f340 808a 	ble.w	800a390 <_dtoa_r+0x920>
 800a27c:	f1c0 001c 	rsb	r0, r0, #28
 800a280:	9b06      	ldr	r3, [sp, #24]
 800a282:	4407      	add	r7, r0
 800a284:	4403      	add	r3, r0
 800a286:	9306      	str	r3, [sp, #24]
 800a288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a28a:	4403      	add	r3, r0
 800a28c:	9309      	str	r3, [sp, #36]	; 0x24
 800a28e:	9b06      	ldr	r3, [sp, #24]
 800a290:	2b00      	cmp	r3, #0
 800a292:	dd05      	ble.n	800a2a0 <_dtoa_r+0x830>
 800a294:	4659      	mov	r1, fp
 800a296:	461a      	mov	r2, r3
 800a298:	4628      	mov	r0, r5
 800a29a:	f000 ffcf 	bl	800b23c <__lshift>
 800a29e:	4683      	mov	fp, r0
 800a2a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	dd05      	ble.n	800a2b2 <_dtoa_r+0x842>
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	f000 ffc6 	bl	800b23c <__lshift>
 800a2b0:	4604      	mov	r4, r0
 800a2b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d070      	beq.n	800a39a <_dtoa_r+0x92a>
 800a2b8:	4621      	mov	r1, r4
 800a2ba:	4658      	mov	r0, fp
 800a2bc:	f001 f82e 	bl	800b31c <__mcmp>
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	da6a      	bge.n	800a39a <_dtoa_r+0x92a>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	4659      	mov	r1, fp
 800a2c8:	220a      	movs	r2, #10
 800a2ca:	4628      	mov	r0, r5
 800a2cc:	f000 fdc0 	bl	800ae50 <__multadd>
 800a2d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2d2:	4683      	mov	fp, r0
 800a2d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	f000 8194 	beq.w	800a606 <_dtoa_r+0xb96>
 800a2de:	4631      	mov	r1, r6
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	220a      	movs	r2, #10
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	f000 fdb3 	bl	800ae50 <__multadd>
 800a2ea:	f1b9 0f00 	cmp.w	r9, #0
 800a2ee:	4606      	mov	r6, r0
 800a2f0:	f300 8093 	bgt.w	800a41a <_dtoa_r+0x9aa>
 800a2f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a2f6:	2b02      	cmp	r3, #2
 800a2f8:	dc57      	bgt.n	800a3aa <_dtoa_r+0x93a>
 800a2fa:	e08e      	b.n	800a41a <_dtoa_r+0x9aa>
 800a2fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a2fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a302:	e757      	b.n	800a1b4 <_dtoa_r+0x744>
 800a304:	9b08      	ldr	r3, [sp, #32]
 800a306:	1e5c      	subs	r4, r3, #1
 800a308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a30a:	42a3      	cmp	r3, r4
 800a30c:	bfb7      	itett	lt
 800a30e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a310:	1b1c      	subge	r4, r3, r4
 800a312:	1ae2      	sublt	r2, r4, r3
 800a314:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a316:	bfbe      	ittt	lt
 800a318:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a31a:	189b      	addlt	r3, r3, r2
 800a31c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a31e:	9b08      	ldr	r3, [sp, #32]
 800a320:	bfb8      	it	lt
 800a322:	2400      	movlt	r4, #0
 800a324:	2b00      	cmp	r3, #0
 800a326:	bfbb      	ittet	lt
 800a328:	9b06      	ldrlt	r3, [sp, #24]
 800a32a:	9a08      	ldrlt	r2, [sp, #32]
 800a32c:	9f06      	ldrge	r7, [sp, #24]
 800a32e:	1a9f      	sublt	r7, r3, r2
 800a330:	bfac      	ite	ge
 800a332:	9b08      	ldrge	r3, [sp, #32]
 800a334:	2300      	movlt	r3, #0
 800a336:	e73f      	b.n	800a1b8 <_dtoa_r+0x748>
 800a338:	3fe00000 	.word	0x3fe00000
 800a33c:	40240000 	.word	0x40240000
 800a340:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a342:	9f06      	ldr	r7, [sp, #24]
 800a344:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a346:	e742      	b.n	800a1ce <_dtoa_r+0x75e>
 800a348:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a34a:	e76b      	b.n	800a224 <_dtoa_r+0x7b4>
 800a34c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a34e:	2b01      	cmp	r3, #1
 800a350:	dc19      	bgt.n	800a386 <_dtoa_r+0x916>
 800a352:	9b04      	ldr	r3, [sp, #16]
 800a354:	b9bb      	cbnz	r3, 800a386 <_dtoa_r+0x916>
 800a356:	9b05      	ldr	r3, [sp, #20]
 800a358:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a35c:	b99b      	cbnz	r3, 800a386 <_dtoa_r+0x916>
 800a35e:	9b05      	ldr	r3, [sp, #20]
 800a360:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a364:	0d1b      	lsrs	r3, r3, #20
 800a366:	051b      	lsls	r3, r3, #20
 800a368:	b183      	cbz	r3, 800a38c <_dtoa_r+0x91c>
 800a36a:	f04f 0801 	mov.w	r8, #1
 800a36e:	9b06      	ldr	r3, [sp, #24]
 800a370:	3301      	adds	r3, #1
 800a372:	9306      	str	r3, [sp, #24]
 800a374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a376:	3301      	adds	r3, #1
 800a378:	9309      	str	r3, [sp, #36]	; 0x24
 800a37a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	f47f af6a 	bne.w	800a256 <_dtoa_r+0x7e6>
 800a382:	2001      	movs	r0, #1
 800a384:	e76f      	b.n	800a266 <_dtoa_r+0x7f6>
 800a386:	f04f 0800 	mov.w	r8, #0
 800a38a:	e7f6      	b.n	800a37a <_dtoa_r+0x90a>
 800a38c:	4698      	mov	r8, r3
 800a38e:	e7f4      	b.n	800a37a <_dtoa_r+0x90a>
 800a390:	f43f af7d 	beq.w	800a28e <_dtoa_r+0x81e>
 800a394:	4618      	mov	r0, r3
 800a396:	301c      	adds	r0, #28
 800a398:	e772      	b.n	800a280 <_dtoa_r+0x810>
 800a39a:	9b08      	ldr	r3, [sp, #32]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	dc36      	bgt.n	800a40e <_dtoa_r+0x99e>
 800a3a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3a2:	2b02      	cmp	r3, #2
 800a3a4:	dd33      	ble.n	800a40e <_dtoa_r+0x99e>
 800a3a6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a3aa:	f1b9 0f00 	cmp.w	r9, #0
 800a3ae:	d10d      	bne.n	800a3cc <_dtoa_r+0x95c>
 800a3b0:	4621      	mov	r1, r4
 800a3b2:	464b      	mov	r3, r9
 800a3b4:	2205      	movs	r2, #5
 800a3b6:	4628      	mov	r0, r5
 800a3b8:	f000 fd4a 	bl	800ae50 <__multadd>
 800a3bc:	4601      	mov	r1, r0
 800a3be:	4604      	mov	r4, r0
 800a3c0:	4658      	mov	r0, fp
 800a3c2:	f000 ffab 	bl	800b31c <__mcmp>
 800a3c6:	2800      	cmp	r0, #0
 800a3c8:	f73f adb8 	bgt.w	8009f3c <_dtoa_r+0x4cc>
 800a3cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a3ce:	9f03      	ldr	r7, [sp, #12]
 800a3d0:	ea6f 0a03 	mvn.w	sl, r3
 800a3d4:	f04f 0800 	mov.w	r8, #0
 800a3d8:	4621      	mov	r1, r4
 800a3da:	4628      	mov	r0, r5
 800a3dc:	f000 fd16 	bl	800ae0c <_Bfree>
 800a3e0:	2e00      	cmp	r6, #0
 800a3e2:	f43f aea7 	beq.w	800a134 <_dtoa_r+0x6c4>
 800a3e6:	f1b8 0f00 	cmp.w	r8, #0
 800a3ea:	d005      	beq.n	800a3f8 <_dtoa_r+0x988>
 800a3ec:	45b0      	cmp	r8, r6
 800a3ee:	d003      	beq.n	800a3f8 <_dtoa_r+0x988>
 800a3f0:	4641      	mov	r1, r8
 800a3f2:	4628      	mov	r0, r5
 800a3f4:	f000 fd0a 	bl	800ae0c <_Bfree>
 800a3f8:	4631      	mov	r1, r6
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	f000 fd06 	bl	800ae0c <_Bfree>
 800a400:	e698      	b.n	800a134 <_dtoa_r+0x6c4>
 800a402:	2400      	movs	r4, #0
 800a404:	4626      	mov	r6, r4
 800a406:	e7e1      	b.n	800a3cc <_dtoa_r+0x95c>
 800a408:	46c2      	mov	sl, r8
 800a40a:	4626      	mov	r6, r4
 800a40c:	e596      	b.n	8009f3c <_dtoa_r+0x4cc>
 800a40e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a410:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a414:	2b00      	cmp	r3, #0
 800a416:	f000 80fd 	beq.w	800a614 <_dtoa_r+0xba4>
 800a41a:	2f00      	cmp	r7, #0
 800a41c:	dd05      	ble.n	800a42a <_dtoa_r+0x9ba>
 800a41e:	4631      	mov	r1, r6
 800a420:	463a      	mov	r2, r7
 800a422:	4628      	mov	r0, r5
 800a424:	f000 ff0a 	bl	800b23c <__lshift>
 800a428:	4606      	mov	r6, r0
 800a42a:	f1b8 0f00 	cmp.w	r8, #0
 800a42e:	d05c      	beq.n	800a4ea <_dtoa_r+0xa7a>
 800a430:	4628      	mov	r0, r5
 800a432:	6871      	ldr	r1, [r6, #4]
 800a434:	f000 fcaa 	bl	800ad8c <_Balloc>
 800a438:	4607      	mov	r7, r0
 800a43a:	b928      	cbnz	r0, 800a448 <_dtoa_r+0x9d8>
 800a43c:	4602      	mov	r2, r0
 800a43e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a442:	4b7f      	ldr	r3, [pc, #508]	; (800a640 <_dtoa_r+0xbd0>)
 800a444:	f7ff bb28 	b.w	8009a98 <_dtoa_r+0x28>
 800a448:	6932      	ldr	r2, [r6, #16]
 800a44a:	f106 010c 	add.w	r1, r6, #12
 800a44e:	3202      	adds	r2, #2
 800a450:	0092      	lsls	r2, r2, #2
 800a452:	300c      	adds	r0, #12
 800a454:	f000 fc8c 	bl	800ad70 <memcpy>
 800a458:	2201      	movs	r2, #1
 800a45a:	4639      	mov	r1, r7
 800a45c:	4628      	mov	r0, r5
 800a45e:	f000 feed 	bl	800b23c <__lshift>
 800a462:	46b0      	mov	r8, r6
 800a464:	4606      	mov	r6, r0
 800a466:	9b03      	ldr	r3, [sp, #12]
 800a468:	3301      	adds	r3, #1
 800a46a:	9308      	str	r3, [sp, #32]
 800a46c:	9b03      	ldr	r3, [sp, #12]
 800a46e:	444b      	add	r3, r9
 800a470:	930a      	str	r3, [sp, #40]	; 0x28
 800a472:	9b04      	ldr	r3, [sp, #16]
 800a474:	f003 0301 	and.w	r3, r3, #1
 800a478:	9309      	str	r3, [sp, #36]	; 0x24
 800a47a:	9b08      	ldr	r3, [sp, #32]
 800a47c:	4621      	mov	r1, r4
 800a47e:	3b01      	subs	r3, #1
 800a480:	4658      	mov	r0, fp
 800a482:	9304      	str	r3, [sp, #16]
 800a484:	f7ff fa68 	bl	8009958 <quorem>
 800a488:	4603      	mov	r3, r0
 800a48a:	4641      	mov	r1, r8
 800a48c:	3330      	adds	r3, #48	; 0x30
 800a48e:	9006      	str	r0, [sp, #24]
 800a490:	4658      	mov	r0, fp
 800a492:	930b      	str	r3, [sp, #44]	; 0x2c
 800a494:	f000 ff42 	bl	800b31c <__mcmp>
 800a498:	4632      	mov	r2, r6
 800a49a:	4681      	mov	r9, r0
 800a49c:	4621      	mov	r1, r4
 800a49e:	4628      	mov	r0, r5
 800a4a0:	f000 ff58 	bl	800b354 <__mdiff>
 800a4a4:	68c2      	ldr	r2, [r0, #12]
 800a4a6:	4607      	mov	r7, r0
 800a4a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4aa:	bb02      	cbnz	r2, 800a4ee <_dtoa_r+0xa7e>
 800a4ac:	4601      	mov	r1, r0
 800a4ae:	4658      	mov	r0, fp
 800a4b0:	f000 ff34 	bl	800b31c <__mcmp>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4b8:	4639      	mov	r1, r7
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800a4c0:	f000 fca4 	bl	800ae0c <_Bfree>
 800a4c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a4c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4c8:	9f08      	ldr	r7, [sp, #32]
 800a4ca:	ea43 0102 	orr.w	r1, r3, r2
 800a4ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4d0:	430b      	orrs	r3, r1
 800a4d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4d4:	d10d      	bne.n	800a4f2 <_dtoa_r+0xa82>
 800a4d6:	2b39      	cmp	r3, #57	; 0x39
 800a4d8:	d029      	beq.n	800a52e <_dtoa_r+0xabe>
 800a4da:	f1b9 0f00 	cmp.w	r9, #0
 800a4de:	dd01      	ble.n	800a4e4 <_dtoa_r+0xa74>
 800a4e0:	9b06      	ldr	r3, [sp, #24]
 800a4e2:	3331      	adds	r3, #49	; 0x31
 800a4e4:	9a04      	ldr	r2, [sp, #16]
 800a4e6:	7013      	strb	r3, [r2, #0]
 800a4e8:	e776      	b.n	800a3d8 <_dtoa_r+0x968>
 800a4ea:	4630      	mov	r0, r6
 800a4ec:	e7b9      	b.n	800a462 <_dtoa_r+0x9f2>
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	e7e2      	b.n	800a4b8 <_dtoa_r+0xa48>
 800a4f2:	f1b9 0f00 	cmp.w	r9, #0
 800a4f6:	db06      	blt.n	800a506 <_dtoa_r+0xa96>
 800a4f8:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a4fa:	ea41 0909 	orr.w	r9, r1, r9
 800a4fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a500:	ea59 0101 	orrs.w	r1, r9, r1
 800a504:	d120      	bne.n	800a548 <_dtoa_r+0xad8>
 800a506:	2a00      	cmp	r2, #0
 800a508:	ddec      	ble.n	800a4e4 <_dtoa_r+0xa74>
 800a50a:	4659      	mov	r1, fp
 800a50c:	2201      	movs	r2, #1
 800a50e:	4628      	mov	r0, r5
 800a510:	9308      	str	r3, [sp, #32]
 800a512:	f000 fe93 	bl	800b23c <__lshift>
 800a516:	4621      	mov	r1, r4
 800a518:	4683      	mov	fp, r0
 800a51a:	f000 feff 	bl	800b31c <__mcmp>
 800a51e:	2800      	cmp	r0, #0
 800a520:	9b08      	ldr	r3, [sp, #32]
 800a522:	dc02      	bgt.n	800a52a <_dtoa_r+0xaba>
 800a524:	d1de      	bne.n	800a4e4 <_dtoa_r+0xa74>
 800a526:	07da      	lsls	r2, r3, #31
 800a528:	d5dc      	bpl.n	800a4e4 <_dtoa_r+0xa74>
 800a52a:	2b39      	cmp	r3, #57	; 0x39
 800a52c:	d1d8      	bne.n	800a4e0 <_dtoa_r+0xa70>
 800a52e:	2339      	movs	r3, #57	; 0x39
 800a530:	9a04      	ldr	r2, [sp, #16]
 800a532:	7013      	strb	r3, [r2, #0]
 800a534:	463b      	mov	r3, r7
 800a536:	461f      	mov	r7, r3
 800a538:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a53c:	3b01      	subs	r3, #1
 800a53e:	2a39      	cmp	r2, #57	; 0x39
 800a540:	d050      	beq.n	800a5e4 <_dtoa_r+0xb74>
 800a542:	3201      	adds	r2, #1
 800a544:	701a      	strb	r2, [r3, #0]
 800a546:	e747      	b.n	800a3d8 <_dtoa_r+0x968>
 800a548:	2a00      	cmp	r2, #0
 800a54a:	dd03      	ble.n	800a554 <_dtoa_r+0xae4>
 800a54c:	2b39      	cmp	r3, #57	; 0x39
 800a54e:	d0ee      	beq.n	800a52e <_dtoa_r+0xabe>
 800a550:	3301      	adds	r3, #1
 800a552:	e7c7      	b.n	800a4e4 <_dtoa_r+0xa74>
 800a554:	9a08      	ldr	r2, [sp, #32]
 800a556:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a558:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a55c:	428a      	cmp	r2, r1
 800a55e:	d02a      	beq.n	800a5b6 <_dtoa_r+0xb46>
 800a560:	4659      	mov	r1, fp
 800a562:	2300      	movs	r3, #0
 800a564:	220a      	movs	r2, #10
 800a566:	4628      	mov	r0, r5
 800a568:	f000 fc72 	bl	800ae50 <__multadd>
 800a56c:	45b0      	cmp	r8, r6
 800a56e:	4683      	mov	fp, r0
 800a570:	f04f 0300 	mov.w	r3, #0
 800a574:	f04f 020a 	mov.w	r2, #10
 800a578:	4641      	mov	r1, r8
 800a57a:	4628      	mov	r0, r5
 800a57c:	d107      	bne.n	800a58e <_dtoa_r+0xb1e>
 800a57e:	f000 fc67 	bl	800ae50 <__multadd>
 800a582:	4680      	mov	r8, r0
 800a584:	4606      	mov	r6, r0
 800a586:	9b08      	ldr	r3, [sp, #32]
 800a588:	3301      	adds	r3, #1
 800a58a:	9308      	str	r3, [sp, #32]
 800a58c:	e775      	b.n	800a47a <_dtoa_r+0xa0a>
 800a58e:	f000 fc5f 	bl	800ae50 <__multadd>
 800a592:	4631      	mov	r1, r6
 800a594:	4680      	mov	r8, r0
 800a596:	2300      	movs	r3, #0
 800a598:	220a      	movs	r2, #10
 800a59a:	4628      	mov	r0, r5
 800a59c:	f000 fc58 	bl	800ae50 <__multadd>
 800a5a0:	4606      	mov	r6, r0
 800a5a2:	e7f0      	b.n	800a586 <_dtoa_r+0xb16>
 800a5a4:	f1b9 0f00 	cmp.w	r9, #0
 800a5a8:	bfcc      	ite	gt
 800a5aa:	464f      	movgt	r7, r9
 800a5ac:	2701      	movle	r7, #1
 800a5ae:	f04f 0800 	mov.w	r8, #0
 800a5b2:	9a03      	ldr	r2, [sp, #12]
 800a5b4:	4417      	add	r7, r2
 800a5b6:	4659      	mov	r1, fp
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	4628      	mov	r0, r5
 800a5bc:	9308      	str	r3, [sp, #32]
 800a5be:	f000 fe3d 	bl	800b23c <__lshift>
 800a5c2:	4621      	mov	r1, r4
 800a5c4:	4683      	mov	fp, r0
 800a5c6:	f000 fea9 	bl	800b31c <__mcmp>
 800a5ca:	2800      	cmp	r0, #0
 800a5cc:	dcb2      	bgt.n	800a534 <_dtoa_r+0xac4>
 800a5ce:	d102      	bne.n	800a5d6 <_dtoa_r+0xb66>
 800a5d0:	9b08      	ldr	r3, [sp, #32]
 800a5d2:	07db      	lsls	r3, r3, #31
 800a5d4:	d4ae      	bmi.n	800a534 <_dtoa_r+0xac4>
 800a5d6:	463b      	mov	r3, r7
 800a5d8:	461f      	mov	r7, r3
 800a5da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5de:	2a30      	cmp	r2, #48	; 0x30
 800a5e0:	d0fa      	beq.n	800a5d8 <_dtoa_r+0xb68>
 800a5e2:	e6f9      	b.n	800a3d8 <_dtoa_r+0x968>
 800a5e4:	9a03      	ldr	r2, [sp, #12]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d1a5      	bne.n	800a536 <_dtoa_r+0xac6>
 800a5ea:	2331      	movs	r3, #49	; 0x31
 800a5ec:	f10a 0a01 	add.w	sl, sl, #1
 800a5f0:	e779      	b.n	800a4e6 <_dtoa_r+0xa76>
 800a5f2:	4b14      	ldr	r3, [pc, #80]	; (800a644 <_dtoa_r+0xbd4>)
 800a5f4:	f7ff baa8 	b.w	8009b48 <_dtoa_r+0xd8>
 800a5f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	f47f aa81 	bne.w	8009b02 <_dtoa_r+0x92>
 800a600:	4b11      	ldr	r3, [pc, #68]	; (800a648 <_dtoa_r+0xbd8>)
 800a602:	f7ff baa1 	b.w	8009b48 <_dtoa_r+0xd8>
 800a606:	f1b9 0f00 	cmp.w	r9, #0
 800a60a:	dc03      	bgt.n	800a614 <_dtoa_r+0xba4>
 800a60c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a60e:	2b02      	cmp	r3, #2
 800a610:	f73f aecb 	bgt.w	800a3aa <_dtoa_r+0x93a>
 800a614:	9f03      	ldr	r7, [sp, #12]
 800a616:	4621      	mov	r1, r4
 800a618:	4658      	mov	r0, fp
 800a61a:	f7ff f99d 	bl	8009958 <quorem>
 800a61e:	9a03      	ldr	r2, [sp, #12]
 800a620:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a624:	f807 3b01 	strb.w	r3, [r7], #1
 800a628:	1aba      	subs	r2, r7, r2
 800a62a:	4591      	cmp	r9, r2
 800a62c:	ddba      	ble.n	800a5a4 <_dtoa_r+0xb34>
 800a62e:	4659      	mov	r1, fp
 800a630:	2300      	movs	r3, #0
 800a632:	220a      	movs	r2, #10
 800a634:	4628      	mov	r0, r5
 800a636:	f000 fc0b 	bl	800ae50 <__multadd>
 800a63a:	4683      	mov	fp, r0
 800a63c:	e7eb      	b.n	800a616 <_dtoa_r+0xba6>
 800a63e:	bf00      	nop
 800a640:	0800d318 	.word	0x0800d318
 800a644:	0800d118 	.word	0x0800d118
 800a648:	0800d299 	.word	0x0800d299

0800a64c <rshift>:
 800a64c:	6903      	ldr	r3, [r0, #16]
 800a64e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a652:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a656:	f100 0414 	add.w	r4, r0, #20
 800a65a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a65e:	dd46      	ble.n	800a6ee <rshift+0xa2>
 800a660:	f011 011f 	ands.w	r1, r1, #31
 800a664:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a668:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a66c:	d10c      	bne.n	800a688 <rshift+0x3c>
 800a66e:	4629      	mov	r1, r5
 800a670:	f100 0710 	add.w	r7, r0, #16
 800a674:	42b1      	cmp	r1, r6
 800a676:	d335      	bcc.n	800a6e4 <rshift+0x98>
 800a678:	1a9b      	subs	r3, r3, r2
 800a67a:	009b      	lsls	r3, r3, #2
 800a67c:	1eea      	subs	r2, r5, #3
 800a67e:	4296      	cmp	r6, r2
 800a680:	bf38      	it	cc
 800a682:	2300      	movcc	r3, #0
 800a684:	4423      	add	r3, r4
 800a686:	e015      	b.n	800a6b4 <rshift+0x68>
 800a688:	46a1      	mov	r9, r4
 800a68a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a68e:	f1c1 0820 	rsb	r8, r1, #32
 800a692:	40cf      	lsrs	r7, r1
 800a694:	f105 0e04 	add.w	lr, r5, #4
 800a698:	4576      	cmp	r6, lr
 800a69a:	46f4      	mov	ip, lr
 800a69c:	d816      	bhi.n	800a6cc <rshift+0x80>
 800a69e:	1a9a      	subs	r2, r3, r2
 800a6a0:	0092      	lsls	r2, r2, #2
 800a6a2:	3a04      	subs	r2, #4
 800a6a4:	3501      	adds	r5, #1
 800a6a6:	42ae      	cmp	r6, r5
 800a6a8:	bf38      	it	cc
 800a6aa:	2200      	movcc	r2, #0
 800a6ac:	18a3      	adds	r3, r4, r2
 800a6ae:	50a7      	str	r7, [r4, r2]
 800a6b0:	b107      	cbz	r7, 800a6b4 <rshift+0x68>
 800a6b2:	3304      	adds	r3, #4
 800a6b4:	42a3      	cmp	r3, r4
 800a6b6:	eba3 0204 	sub.w	r2, r3, r4
 800a6ba:	bf08      	it	eq
 800a6bc:	2300      	moveq	r3, #0
 800a6be:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a6c2:	6102      	str	r2, [r0, #16]
 800a6c4:	bf08      	it	eq
 800a6c6:	6143      	streq	r3, [r0, #20]
 800a6c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a6cc:	f8dc c000 	ldr.w	ip, [ip]
 800a6d0:	fa0c fc08 	lsl.w	ip, ip, r8
 800a6d4:	ea4c 0707 	orr.w	r7, ip, r7
 800a6d8:	f849 7b04 	str.w	r7, [r9], #4
 800a6dc:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a6e0:	40cf      	lsrs	r7, r1
 800a6e2:	e7d9      	b.n	800a698 <rshift+0x4c>
 800a6e4:	f851 cb04 	ldr.w	ip, [r1], #4
 800a6e8:	f847 cf04 	str.w	ip, [r7, #4]!
 800a6ec:	e7c2      	b.n	800a674 <rshift+0x28>
 800a6ee:	4623      	mov	r3, r4
 800a6f0:	e7e0      	b.n	800a6b4 <rshift+0x68>

0800a6f2 <__hexdig_fun>:
 800a6f2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a6f6:	2b09      	cmp	r3, #9
 800a6f8:	d802      	bhi.n	800a700 <__hexdig_fun+0xe>
 800a6fa:	3820      	subs	r0, #32
 800a6fc:	b2c0      	uxtb	r0, r0
 800a6fe:	4770      	bx	lr
 800a700:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a704:	2b05      	cmp	r3, #5
 800a706:	d801      	bhi.n	800a70c <__hexdig_fun+0x1a>
 800a708:	3847      	subs	r0, #71	; 0x47
 800a70a:	e7f7      	b.n	800a6fc <__hexdig_fun+0xa>
 800a70c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a710:	2b05      	cmp	r3, #5
 800a712:	d801      	bhi.n	800a718 <__hexdig_fun+0x26>
 800a714:	3827      	subs	r0, #39	; 0x27
 800a716:	e7f1      	b.n	800a6fc <__hexdig_fun+0xa>
 800a718:	2000      	movs	r0, #0
 800a71a:	4770      	bx	lr

0800a71c <__gethex>:
 800a71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a720:	b08b      	sub	sp, #44	; 0x2c
 800a722:	9305      	str	r3, [sp, #20]
 800a724:	4bb2      	ldr	r3, [pc, #712]	; (800a9f0 <__gethex+0x2d4>)
 800a726:	9002      	str	r0, [sp, #8]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	468b      	mov	fp, r1
 800a72c:	4618      	mov	r0, r3
 800a72e:	4690      	mov	r8, r2
 800a730:	9303      	str	r3, [sp, #12]
 800a732:	f7f5 fd0d 	bl	8000150 <strlen>
 800a736:	4682      	mov	sl, r0
 800a738:	9b03      	ldr	r3, [sp, #12]
 800a73a:	f8db 2000 	ldr.w	r2, [fp]
 800a73e:	4403      	add	r3, r0
 800a740:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a744:	9306      	str	r3, [sp, #24]
 800a746:	1c93      	adds	r3, r2, #2
 800a748:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a74c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a750:	32fe      	adds	r2, #254	; 0xfe
 800a752:	18d1      	adds	r1, r2, r3
 800a754:	461f      	mov	r7, r3
 800a756:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a75a:	9101      	str	r1, [sp, #4]
 800a75c:	2830      	cmp	r0, #48	; 0x30
 800a75e:	d0f8      	beq.n	800a752 <__gethex+0x36>
 800a760:	f7ff ffc7 	bl	800a6f2 <__hexdig_fun>
 800a764:	4604      	mov	r4, r0
 800a766:	2800      	cmp	r0, #0
 800a768:	d13a      	bne.n	800a7e0 <__gethex+0xc4>
 800a76a:	4652      	mov	r2, sl
 800a76c:	4638      	mov	r0, r7
 800a76e:	9903      	ldr	r1, [sp, #12]
 800a770:	f001 fa26 	bl	800bbc0 <strncmp>
 800a774:	4605      	mov	r5, r0
 800a776:	2800      	cmp	r0, #0
 800a778:	d166      	bne.n	800a848 <__gethex+0x12c>
 800a77a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a77e:	eb07 060a 	add.w	r6, r7, sl
 800a782:	f7ff ffb6 	bl	800a6f2 <__hexdig_fun>
 800a786:	2800      	cmp	r0, #0
 800a788:	d060      	beq.n	800a84c <__gethex+0x130>
 800a78a:	4633      	mov	r3, r6
 800a78c:	7818      	ldrb	r0, [r3, #0]
 800a78e:	461f      	mov	r7, r3
 800a790:	2830      	cmp	r0, #48	; 0x30
 800a792:	f103 0301 	add.w	r3, r3, #1
 800a796:	d0f9      	beq.n	800a78c <__gethex+0x70>
 800a798:	f7ff ffab 	bl	800a6f2 <__hexdig_fun>
 800a79c:	2301      	movs	r3, #1
 800a79e:	fab0 f480 	clz	r4, r0
 800a7a2:	4635      	mov	r5, r6
 800a7a4:	0964      	lsrs	r4, r4, #5
 800a7a6:	9301      	str	r3, [sp, #4]
 800a7a8:	463a      	mov	r2, r7
 800a7aa:	4616      	mov	r6, r2
 800a7ac:	7830      	ldrb	r0, [r6, #0]
 800a7ae:	3201      	adds	r2, #1
 800a7b0:	f7ff ff9f 	bl	800a6f2 <__hexdig_fun>
 800a7b4:	2800      	cmp	r0, #0
 800a7b6:	d1f8      	bne.n	800a7aa <__gethex+0x8e>
 800a7b8:	4652      	mov	r2, sl
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	9903      	ldr	r1, [sp, #12]
 800a7be:	f001 f9ff 	bl	800bbc0 <strncmp>
 800a7c2:	b980      	cbnz	r0, 800a7e6 <__gethex+0xca>
 800a7c4:	b94d      	cbnz	r5, 800a7da <__gethex+0xbe>
 800a7c6:	eb06 050a 	add.w	r5, r6, sl
 800a7ca:	462a      	mov	r2, r5
 800a7cc:	4616      	mov	r6, r2
 800a7ce:	7830      	ldrb	r0, [r6, #0]
 800a7d0:	3201      	adds	r2, #1
 800a7d2:	f7ff ff8e 	bl	800a6f2 <__hexdig_fun>
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	d1f8      	bne.n	800a7cc <__gethex+0xb0>
 800a7da:	1bad      	subs	r5, r5, r6
 800a7dc:	00ad      	lsls	r5, r5, #2
 800a7de:	e004      	b.n	800a7ea <__gethex+0xce>
 800a7e0:	2400      	movs	r4, #0
 800a7e2:	4625      	mov	r5, r4
 800a7e4:	e7e0      	b.n	800a7a8 <__gethex+0x8c>
 800a7e6:	2d00      	cmp	r5, #0
 800a7e8:	d1f7      	bne.n	800a7da <__gethex+0xbe>
 800a7ea:	7833      	ldrb	r3, [r6, #0]
 800a7ec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a7f0:	2b50      	cmp	r3, #80	; 0x50
 800a7f2:	d139      	bne.n	800a868 <__gethex+0x14c>
 800a7f4:	7873      	ldrb	r3, [r6, #1]
 800a7f6:	2b2b      	cmp	r3, #43	; 0x2b
 800a7f8:	d02a      	beq.n	800a850 <__gethex+0x134>
 800a7fa:	2b2d      	cmp	r3, #45	; 0x2d
 800a7fc:	d02c      	beq.n	800a858 <__gethex+0x13c>
 800a7fe:	f04f 0900 	mov.w	r9, #0
 800a802:	1c71      	adds	r1, r6, #1
 800a804:	7808      	ldrb	r0, [r1, #0]
 800a806:	f7ff ff74 	bl	800a6f2 <__hexdig_fun>
 800a80a:	1e43      	subs	r3, r0, #1
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	2b18      	cmp	r3, #24
 800a810:	d82a      	bhi.n	800a868 <__gethex+0x14c>
 800a812:	f1a0 0210 	sub.w	r2, r0, #16
 800a816:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a81a:	f7ff ff6a 	bl	800a6f2 <__hexdig_fun>
 800a81e:	1e43      	subs	r3, r0, #1
 800a820:	b2db      	uxtb	r3, r3
 800a822:	2b18      	cmp	r3, #24
 800a824:	d91b      	bls.n	800a85e <__gethex+0x142>
 800a826:	f1b9 0f00 	cmp.w	r9, #0
 800a82a:	d000      	beq.n	800a82e <__gethex+0x112>
 800a82c:	4252      	negs	r2, r2
 800a82e:	4415      	add	r5, r2
 800a830:	f8cb 1000 	str.w	r1, [fp]
 800a834:	b1d4      	cbz	r4, 800a86c <__gethex+0x150>
 800a836:	9b01      	ldr	r3, [sp, #4]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	bf14      	ite	ne
 800a83c:	2700      	movne	r7, #0
 800a83e:	2706      	moveq	r7, #6
 800a840:	4638      	mov	r0, r7
 800a842:	b00b      	add	sp, #44	; 0x2c
 800a844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a848:	463e      	mov	r6, r7
 800a84a:	4625      	mov	r5, r4
 800a84c:	2401      	movs	r4, #1
 800a84e:	e7cc      	b.n	800a7ea <__gethex+0xce>
 800a850:	f04f 0900 	mov.w	r9, #0
 800a854:	1cb1      	adds	r1, r6, #2
 800a856:	e7d5      	b.n	800a804 <__gethex+0xe8>
 800a858:	f04f 0901 	mov.w	r9, #1
 800a85c:	e7fa      	b.n	800a854 <__gethex+0x138>
 800a85e:	230a      	movs	r3, #10
 800a860:	fb03 0202 	mla	r2, r3, r2, r0
 800a864:	3a10      	subs	r2, #16
 800a866:	e7d6      	b.n	800a816 <__gethex+0xfa>
 800a868:	4631      	mov	r1, r6
 800a86a:	e7e1      	b.n	800a830 <__gethex+0x114>
 800a86c:	4621      	mov	r1, r4
 800a86e:	1bf3      	subs	r3, r6, r7
 800a870:	3b01      	subs	r3, #1
 800a872:	2b07      	cmp	r3, #7
 800a874:	dc0a      	bgt.n	800a88c <__gethex+0x170>
 800a876:	9802      	ldr	r0, [sp, #8]
 800a878:	f000 fa88 	bl	800ad8c <_Balloc>
 800a87c:	4604      	mov	r4, r0
 800a87e:	b940      	cbnz	r0, 800a892 <__gethex+0x176>
 800a880:	4602      	mov	r2, r0
 800a882:	21de      	movs	r1, #222	; 0xde
 800a884:	4b5b      	ldr	r3, [pc, #364]	; (800a9f4 <__gethex+0x2d8>)
 800a886:	485c      	ldr	r0, [pc, #368]	; (800a9f8 <__gethex+0x2dc>)
 800a888:	f001 f9bc 	bl	800bc04 <__assert_func>
 800a88c:	3101      	adds	r1, #1
 800a88e:	105b      	asrs	r3, r3, #1
 800a890:	e7ef      	b.n	800a872 <__gethex+0x156>
 800a892:	f04f 0b00 	mov.w	fp, #0
 800a896:	f100 0914 	add.w	r9, r0, #20
 800a89a:	f1ca 0301 	rsb	r3, sl, #1
 800a89e:	f8cd 9010 	str.w	r9, [sp, #16]
 800a8a2:	f8cd b004 	str.w	fp, [sp, #4]
 800a8a6:	9308      	str	r3, [sp, #32]
 800a8a8:	42b7      	cmp	r7, r6
 800a8aa:	d33f      	bcc.n	800a92c <__gethex+0x210>
 800a8ac:	9f04      	ldr	r7, [sp, #16]
 800a8ae:	9b01      	ldr	r3, [sp, #4]
 800a8b0:	f847 3b04 	str.w	r3, [r7], #4
 800a8b4:	eba7 0709 	sub.w	r7, r7, r9
 800a8b8:	10bf      	asrs	r7, r7, #2
 800a8ba:	6127      	str	r7, [r4, #16]
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f000 fb57 	bl	800af70 <__hi0bits>
 800a8c2:	017f      	lsls	r7, r7, #5
 800a8c4:	f8d8 6000 	ldr.w	r6, [r8]
 800a8c8:	1a3f      	subs	r7, r7, r0
 800a8ca:	42b7      	cmp	r7, r6
 800a8cc:	dd62      	ble.n	800a994 <__gethex+0x278>
 800a8ce:	1bbf      	subs	r7, r7, r6
 800a8d0:	4639      	mov	r1, r7
 800a8d2:	4620      	mov	r0, r4
 800a8d4:	f000 fef1 	bl	800b6ba <__any_on>
 800a8d8:	4682      	mov	sl, r0
 800a8da:	b1a8      	cbz	r0, 800a908 <__gethex+0x1ec>
 800a8dc:	f04f 0a01 	mov.w	sl, #1
 800a8e0:	1e7b      	subs	r3, r7, #1
 800a8e2:	1159      	asrs	r1, r3, #5
 800a8e4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a8e8:	f003 021f 	and.w	r2, r3, #31
 800a8ec:	fa0a f202 	lsl.w	r2, sl, r2
 800a8f0:	420a      	tst	r2, r1
 800a8f2:	d009      	beq.n	800a908 <__gethex+0x1ec>
 800a8f4:	4553      	cmp	r3, sl
 800a8f6:	dd05      	ble.n	800a904 <__gethex+0x1e8>
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	1eb9      	subs	r1, r7, #2
 800a8fc:	f000 fedd 	bl	800b6ba <__any_on>
 800a900:	2800      	cmp	r0, #0
 800a902:	d144      	bne.n	800a98e <__gethex+0x272>
 800a904:	f04f 0a02 	mov.w	sl, #2
 800a908:	4639      	mov	r1, r7
 800a90a:	4620      	mov	r0, r4
 800a90c:	f7ff fe9e 	bl	800a64c <rshift>
 800a910:	443d      	add	r5, r7
 800a912:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a916:	42ab      	cmp	r3, r5
 800a918:	da4a      	bge.n	800a9b0 <__gethex+0x294>
 800a91a:	4621      	mov	r1, r4
 800a91c:	9802      	ldr	r0, [sp, #8]
 800a91e:	f000 fa75 	bl	800ae0c <_Bfree>
 800a922:	2300      	movs	r3, #0
 800a924:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a926:	27a3      	movs	r7, #163	; 0xa3
 800a928:	6013      	str	r3, [r2, #0]
 800a92a:	e789      	b.n	800a840 <__gethex+0x124>
 800a92c:	1e73      	subs	r3, r6, #1
 800a92e:	9a06      	ldr	r2, [sp, #24]
 800a930:	9307      	str	r3, [sp, #28]
 800a932:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a936:	4293      	cmp	r3, r2
 800a938:	d019      	beq.n	800a96e <__gethex+0x252>
 800a93a:	f1bb 0f20 	cmp.w	fp, #32
 800a93e:	d107      	bne.n	800a950 <__gethex+0x234>
 800a940:	9b04      	ldr	r3, [sp, #16]
 800a942:	9a01      	ldr	r2, [sp, #4]
 800a944:	f843 2b04 	str.w	r2, [r3], #4
 800a948:	9304      	str	r3, [sp, #16]
 800a94a:	2300      	movs	r3, #0
 800a94c:	469b      	mov	fp, r3
 800a94e:	9301      	str	r3, [sp, #4]
 800a950:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a954:	f7ff fecd 	bl	800a6f2 <__hexdig_fun>
 800a958:	9b01      	ldr	r3, [sp, #4]
 800a95a:	f000 000f 	and.w	r0, r0, #15
 800a95e:	fa00 f00b 	lsl.w	r0, r0, fp
 800a962:	4303      	orrs	r3, r0
 800a964:	9301      	str	r3, [sp, #4]
 800a966:	f10b 0b04 	add.w	fp, fp, #4
 800a96a:	9b07      	ldr	r3, [sp, #28]
 800a96c:	e00d      	b.n	800a98a <__gethex+0x26e>
 800a96e:	9a08      	ldr	r2, [sp, #32]
 800a970:	1e73      	subs	r3, r6, #1
 800a972:	4413      	add	r3, r2
 800a974:	42bb      	cmp	r3, r7
 800a976:	d3e0      	bcc.n	800a93a <__gethex+0x21e>
 800a978:	4618      	mov	r0, r3
 800a97a:	4652      	mov	r2, sl
 800a97c:	9903      	ldr	r1, [sp, #12]
 800a97e:	9309      	str	r3, [sp, #36]	; 0x24
 800a980:	f001 f91e 	bl	800bbc0 <strncmp>
 800a984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a986:	2800      	cmp	r0, #0
 800a988:	d1d7      	bne.n	800a93a <__gethex+0x21e>
 800a98a:	461e      	mov	r6, r3
 800a98c:	e78c      	b.n	800a8a8 <__gethex+0x18c>
 800a98e:	f04f 0a03 	mov.w	sl, #3
 800a992:	e7b9      	b.n	800a908 <__gethex+0x1ec>
 800a994:	da09      	bge.n	800a9aa <__gethex+0x28e>
 800a996:	1bf7      	subs	r7, r6, r7
 800a998:	4621      	mov	r1, r4
 800a99a:	463a      	mov	r2, r7
 800a99c:	9802      	ldr	r0, [sp, #8]
 800a99e:	f000 fc4d 	bl	800b23c <__lshift>
 800a9a2:	4604      	mov	r4, r0
 800a9a4:	1bed      	subs	r5, r5, r7
 800a9a6:	f100 0914 	add.w	r9, r0, #20
 800a9aa:	f04f 0a00 	mov.w	sl, #0
 800a9ae:	e7b0      	b.n	800a912 <__gethex+0x1f6>
 800a9b0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a9b4:	42a8      	cmp	r0, r5
 800a9b6:	dd72      	ble.n	800aa9e <__gethex+0x382>
 800a9b8:	1b45      	subs	r5, r0, r5
 800a9ba:	42ae      	cmp	r6, r5
 800a9bc:	dc35      	bgt.n	800aa2a <__gethex+0x30e>
 800a9be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a9c2:	2b02      	cmp	r3, #2
 800a9c4:	d029      	beq.n	800aa1a <__gethex+0x2fe>
 800a9c6:	2b03      	cmp	r3, #3
 800a9c8:	d02b      	beq.n	800aa22 <__gethex+0x306>
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d11c      	bne.n	800aa08 <__gethex+0x2ec>
 800a9ce:	42ae      	cmp	r6, r5
 800a9d0:	d11a      	bne.n	800aa08 <__gethex+0x2ec>
 800a9d2:	2e01      	cmp	r6, #1
 800a9d4:	d112      	bne.n	800a9fc <__gethex+0x2e0>
 800a9d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a9da:	9a05      	ldr	r2, [sp, #20]
 800a9dc:	2762      	movs	r7, #98	; 0x62
 800a9de:	6013      	str	r3, [r2, #0]
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	6123      	str	r3, [r4, #16]
 800a9e4:	f8c9 3000 	str.w	r3, [r9]
 800a9e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9ea:	601c      	str	r4, [r3, #0]
 800a9ec:	e728      	b.n	800a840 <__gethex+0x124>
 800a9ee:	bf00      	nop
 800a9f0:	0800d390 	.word	0x0800d390
 800a9f4:	0800d318 	.word	0x0800d318
 800a9f8:	0800d329 	.word	0x0800d329
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	1e71      	subs	r1, r6, #1
 800aa00:	f000 fe5b 	bl	800b6ba <__any_on>
 800aa04:	2800      	cmp	r0, #0
 800aa06:	d1e6      	bne.n	800a9d6 <__gethex+0x2ba>
 800aa08:	4621      	mov	r1, r4
 800aa0a:	9802      	ldr	r0, [sp, #8]
 800aa0c:	f000 f9fe 	bl	800ae0c <_Bfree>
 800aa10:	2300      	movs	r3, #0
 800aa12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa14:	2750      	movs	r7, #80	; 0x50
 800aa16:	6013      	str	r3, [r2, #0]
 800aa18:	e712      	b.n	800a840 <__gethex+0x124>
 800aa1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d1f3      	bne.n	800aa08 <__gethex+0x2ec>
 800aa20:	e7d9      	b.n	800a9d6 <__gethex+0x2ba>
 800aa22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d1d6      	bne.n	800a9d6 <__gethex+0x2ba>
 800aa28:	e7ee      	b.n	800aa08 <__gethex+0x2ec>
 800aa2a:	1e6f      	subs	r7, r5, #1
 800aa2c:	f1ba 0f00 	cmp.w	sl, #0
 800aa30:	d132      	bne.n	800aa98 <__gethex+0x37c>
 800aa32:	b127      	cbz	r7, 800aa3e <__gethex+0x322>
 800aa34:	4639      	mov	r1, r7
 800aa36:	4620      	mov	r0, r4
 800aa38:	f000 fe3f 	bl	800b6ba <__any_on>
 800aa3c:	4682      	mov	sl, r0
 800aa3e:	2101      	movs	r1, #1
 800aa40:	117b      	asrs	r3, r7, #5
 800aa42:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800aa46:	f007 071f 	and.w	r7, r7, #31
 800aa4a:	fa01 f707 	lsl.w	r7, r1, r7
 800aa4e:	421f      	tst	r7, r3
 800aa50:	f04f 0702 	mov.w	r7, #2
 800aa54:	4629      	mov	r1, r5
 800aa56:	4620      	mov	r0, r4
 800aa58:	bf18      	it	ne
 800aa5a:	f04a 0a02 	orrne.w	sl, sl, #2
 800aa5e:	1b76      	subs	r6, r6, r5
 800aa60:	f7ff fdf4 	bl	800a64c <rshift>
 800aa64:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aa68:	f1ba 0f00 	cmp.w	sl, #0
 800aa6c:	d048      	beq.n	800ab00 <__gethex+0x3e4>
 800aa6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa72:	2b02      	cmp	r3, #2
 800aa74:	d015      	beq.n	800aaa2 <__gethex+0x386>
 800aa76:	2b03      	cmp	r3, #3
 800aa78:	d017      	beq.n	800aaaa <__gethex+0x38e>
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d109      	bne.n	800aa92 <__gethex+0x376>
 800aa7e:	f01a 0f02 	tst.w	sl, #2
 800aa82:	d006      	beq.n	800aa92 <__gethex+0x376>
 800aa84:	f8d9 0000 	ldr.w	r0, [r9]
 800aa88:	ea4a 0a00 	orr.w	sl, sl, r0
 800aa8c:	f01a 0f01 	tst.w	sl, #1
 800aa90:	d10e      	bne.n	800aab0 <__gethex+0x394>
 800aa92:	f047 0710 	orr.w	r7, r7, #16
 800aa96:	e033      	b.n	800ab00 <__gethex+0x3e4>
 800aa98:	f04f 0a01 	mov.w	sl, #1
 800aa9c:	e7cf      	b.n	800aa3e <__gethex+0x322>
 800aa9e:	2701      	movs	r7, #1
 800aaa0:	e7e2      	b.n	800aa68 <__gethex+0x34c>
 800aaa2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aaa4:	f1c3 0301 	rsb	r3, r3, #1
 800aaa8:	9315      	str	r3, [sp, #84]	; 0x54
 800aaaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d0f0      	beq.n	800aa92 <__gethex+0x376>
 800aab0:	f04f 0c00 	mov.w	ip, #0
 800aab4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aab8:	f104 0314 	add.w	r3, r4, #20
 800aabc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800aac0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800aac4:	4618      	mov	r0, r3
 800aac6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaca:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aace:	d01c      	beq.n	800ab0a <__gethex+0x3ee>
 800aad0:	3201      	adds	r2, #1
 800aad2:	6002      	str	r2, [r0, #0]
 800aad4:	2f02      	cmp	r7, #2
 800aad6:	f104 0314 	add.w	r3, r4, #20
 800aada:	d13d      	bne.n	800ab58 <__gethex+0x43c>
 800aadc:	f8d8 2000 	ldr.w	r2, [r8]
 800aae0:	3a01      	subs	r2, #1
 800aae2:	42b2      	cmp	r2, r6
 800aae4:	d10a      	bne.n	800aafc <__gethex+0x3e0>
 800aae6:	2201      	movs	r2, #1
 800aae8:	1171      	asrs	r1, r6, #5
 800aaea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aaee:	f006 061f 	and.w	r6, r6, #31
 800aaf2:	fa02 f606 	lsl.w	r6, r2, r6
 800aaf6:	421e      	tst	r6, r3
 800aaf8:	bf18      	it	ne
 800aafa:	4617      	movne	r7, r2
 800aafc:	f047 0720 	orr.w	r7, r7, #32
 800ab00:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab02:	601c      	str	r4, [r3, #0]
 800ab04:	9b05      	ldr	r3, [sp, #20]
 800ab06:	601d      	str	r5, [r3, #0]
 800ab08:	e69a      	b.n	800a840 <__gethex+0x124>
 800ab0a:	4299      	cmp	r1, r3
 800ab0c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ab10:	d8d8      	bhi.n	800aac4 <__gethex+0x3a8>
 800ab12:	68a3      	ldr	r3, [r4, #8]
 800ab14:	459b      	cmp	fp, r3
 800ab16:	db17      	blt.n	800ab48 <__gethex+0x42c>
 800ab18:	6861      	ldr	r1, [r4, #4]
 800ab1a:	9802      	ldr	r0, [sp, #8]
 800ab1c:	3101      	adds	r1, #1
 800ab1e:	f000 f935 	bl	800ad8c <_Balloc>
 800ab22:	4681      	mov	r9, r0
 800ab24:	b918      	cbnz	r0, 800ab2e <__gethex+0x412>
 800ab26:	4602      	mov	r2, r0
 800ab28:	2184      	movs	r1, #132	; 0x84
 800ab2a:	4b19      	ldr	r3, [pc, #100]	; (800ab90 <__gethex+0x474>)
 800ab2c:	e6ab      	b.n	800a886 <__gethex+0x16a>
 800ab2e:	6922      	ldr	r2, [r4, #16]
 800ab30:	f104 010c 	add.w	r1, r4, #12
 800ab34:	3202      	adds	r2, #2
 800ab36:	0092      	lsls	r2, r2, #2
 800ab38:	300c      	adds	r0, #12
 800ab3a:	f000 f919 	bl	800ad70 <memcpy>
 800ab3e:	4621      	mov	r1, r4
 800ab40:	9802      	ldr	r0, [sp, #8]
 800ab42:	f000 f963 	bl	800ae0c <_Bfree>
 800ab46:	464c      	mov	r4, r9
 800ab48:	6923      	ldr	r3, [r4, #16]
 800ab4a:	1c5a      	adds	r2, r3, #1
 800ab4c:	6122      	str	r2, [r4, #16]
 800ab4e:	2201      	movs	r2, #1
 800ab50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ab54:	615a      	str	r2, [r3, #20]
 800ab56:	e7bd      	b.n	800aad4 <__gethex+0x3b8>
 800ab58:	6922      	ldr	r2, [r4, #16]
 800ab5a:	455a      	cmp	r2, fp
 800ab5c:	dd0b      	ble.n	800ab76 <__gethex+0x45a>
 800ab5e:	2101      	movs	r1, #1
 800ab60:	4620      	mov	r0, r4
 800ab62:	f7ff fd73 	bl	800a64c <rshift>
 800ab66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab6a:	3501      	adds	r5, #1
 800ab6c:	42ab      	cmp	r3, r5
 800ab6e:	f6ff aed4 	blt.w	800a91a <__gethex+0x1fe>
 800ab72:	2701      	movs	r7, #1
 800ab74:	e7c2      	b.n	800aafc <__gethex+0x3e0>
 800ab76:	f016 061f 	ands.w	r6, r6, #31
 800ab7a:	d0fa      	beq.n	800ab72 <__gethex+0x456>
 800ab7c:	4453      	add	r3, sl
 800ab7e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ab82:	f000 f9f5 	bl	800af70 <__hi0bits>
 800ab86:	f1c6 0620 	rsb	r6, r6, #32
 800ab8a:	42b0      	cmp	r0, r6
 800ab8c:	dbe7      	blt.n	800ab5e <__gethex+0x442>
 800ab8e:	e7f0      	b.n	800ab72 <__gethex+0x456>
 800ab90:	0800d318 	.word	0x0800d318

0800ab94 <L_shift>:
 800ab94:	f1c2 0208 	rsb	r2, r2, #8
 800ab98:	0092      	lsls	r2, r2, #2
 800ab9a:	b570      	push	{r4, r5, r6, lr}
 800ab9c:	f1c2 0620 	rsb	r6, r2, #32
 800aba0:	6843      	ldr	r3, [r0, #4]
 800aba2:	6804      	ldr	r4, [r0, #0]
 800aba4:	fa03 f506 	lsl.w	r5, r3, r6
 800aba8:	432c      	orrs	r4, r5
 800abaa:	40d3      	lsrs	r3, r2
 800abac:	6004      	str	r4, [r0, #0]
 800abae:	f840 3f04 	str.w	r3, [r0, #4]!
 800abb2:	4288      	cmp	r0, r1
 800abb4:	d3f4      	bcc.n	800aba0 <L_shift+0xc>
 800abb6:	bd70      	pop	{r4, r5, r6, pc}

0800abb8 <__match>:
 800abb8:	b530      	push	{r4, r5, lr}
 800abba:	6803      	ldr	r3, [r0, #0]
 800abbc:	3301      	adds	r3, #1
 800abbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abc2:	b914      	cbnz	r4, 800abca <__match+0x12>
 800abc4:	6003      	str	r3, [r0, #0]
 800abc6:	2001      	movs	r0, #1
 800abc8:	bd30      	pop	{r4, r5, pc}
 800abca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800abd2:	2d19      	cmp	r5, #25
 800abd4:	bf98      	it	ls
 800abd6:	3220      	addls	r2, #32
 800abd8:	42a2      	cmp	r2, r4
 800abda:	d0f0      	beq.n	800abbe <__match+0x6>
 800abdc:	2000      	movs	r0, #0
 800abde:	e7f3      	b.n	800abc8 <__match+0x10>

0800abe0 <__hexnan>:
 800abe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe4:	2500      	movs	r5, #0
 800abe6:	680b      	ldr	r3, [r1, #0]
 800abe8:	4682      	mov	sl, r0
 800abea:	115e      	asrs	r6, r3, #5
 800abec:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800abf0:	f013 031f 	ands.w	r3, r3, #31
 800abf4:	bf18      	it	ne
 800abf6:	3604      	addne	r6, #4
 800abf8:	1f37      	subs	r7, r6, #4
 800abfa:	46b9      	mov	r9, r7
 800abfc:	463c      	mov	r4, r7
 800abfe:	46ab      	mov	fp, r5
 800ac00:	b087      	sub	sp, #28
 800ac02:	4690      	mov	r8, r2
 800ac04:	6802      	ldr	r2, [r0, #0]
 800ac06:	9301      	str	r3, [sp, #4]
 800ac08:	f846 5c04 	str.w	r5, [r6, #-4]
 800ac0c:	9502      	str	r5, [sp, #8]
 800ac0e:	7851      	ldrb	r1, [r2, #1]
 800ac10:	1c53      	adds	r3, r2, #1
 800ac12:	9303      	str	r3, [sp, #12]
 800ac14:	b341      	cbz	r1, 800ac68 <__hexnan+0x88>
 800ac16:	4608      	mov	r0, r1
 800ac18:	9205      	str	r2, [sp, #20]
 800ac1a:	9104      	str	r1, [sp, #16]
 800ac1c:	f7ff fd69 	bl	800a6f2 <__hexdig_fun>
 800ac20:	2800      	cmp	r0, #0
 800ac22:	d14f      	bne.n	800acc4 <__hexnan+0xe4>
 800ac24:	9904      	ldr	r1, [sp, #16]
 800ac26:	9a05      	ldr	r2, [sp, #20]
 800ac28:	2920      	cmp	r1, #32
 800ac2a:	d818      	bhi.n	800ac5e <__hexnan+0x7e>
 800ac2c:	9b02      	ldr	r3, [sp, #8]
 800ac2e:	459b      	cmp	fp, r3
 800ac30:	dd13      	ble.n	800ac5a <__hexnan+0x7a>
 800ac32:	454c      	cmp	r4, r9
 800ac34:	d206      	bcs.n	800ac44 <__hexnan+0x64>
 800ac36:	2d07      	cmp	r5, #7
 800ac38:	dc04      	bgt.n	800ac44 <__hexnan+0x64>
 800ac3a:	462a      	mov	r2, r5
 800ac3c:	4649      	mov	r1, r9
 800ac3e:	4620      	mov	r0, r4
 800ac40:	f7ff ffa8 	bl	800ab94 <L_shift>
 800ac44:	4544      	cmp	r4, r8
 800ac46:	d950      	bls.n	800acea <__hexnan+0x10a>
 800ac48:	2300      	movs	r3, #0
 800ac4a:	f1a4 0904 	sub.w	r9, r4, #4
 800ac4e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac52:	461d      	mov	r5, r3
 800ac54:	464c      	mov	r4, r9
 800ac56:	f8cd b008 	str.w	fp, [sp, #8]
 800ac5a:	9a03      	ldr	r2, [sp, #12]
 800ac5c:	e7d7      	b.n	800ac0e <__hexnan+0x2e>
 800ac5e:	2929      	cmp	r1, #41	; 0x29
 800ac60:	d156      	bne.n	800ad10 <__hexnan+0x130>
 800ac62:	3202      	adds	r2, #2
 800ac64:	f8ca 2000 	str.w	r2, [sl]
 800ac68:	f1bb 0f00 	cmp.w	fp, #0
 800ac6c:	d050      	beq.n	800ad10 <__hexnan+0x130>
 800ac6e:	454c      	cmp	r4, r9
 800ac70:	d206      	bcs.n	800ac80 <__hexnan+0xa0>
 800ac72:	2d07      	cmp	r5, #7
 800ac74:	dc04      	bgt.n	800ac80 <__hexnan+0xa0>
 800ac76:	462a      	mov	r2, r5
 800ac78:	4649      	mov	r1, r9
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f7ff ff8a 	bl	800ab94 <L_shift>
 800ac80:	4544      	cmp	r4, r8
 800ac82:	d934      	bls.n	800acee <__hexnan+0x10e>
 800ac84:	4623      	mov	r3, r4
 800ac86:	f1a8 0204 	sub.w	r2, r8, #4
 800ac8a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ac8e:	429f      	cmp	r7, r3
 800ac90:	f842 1f04 	str.w	r1, [r2, #4]!
 800ac94:	d2f9      	bcs.n	800ac8a <__hexnan+0xaa>
 800ac96:	1b3b      	subs	r3, r7, r4
 800ac98:	f023 0303 	bic.w	r3, r3, #3
 800ac9c:	3304      	adds	r3, #4
 800ac9e:	3401      	adds	r4, #1
 800aca0:	3e03      	subs	r6, #3
 800aca2:	42b4      	cmp	r4, r6
 800aca4:	bf88      	it	hi
 800aca6:	2304      	movhi	r3, #4
 800aca8:	2200      	movs	r2, #0
 800acaa:	4443      	add	r3, r8
 800acac:	f843 2b04 	str.w	r2, [r3], #4
 800acb0:	429f      	cmp	r7, r3
 800acb2:	d2fb      	bcs.n	800acac <__hexnan+0xcc>
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	b91b      	cbnz	r3, 800acc0 <__hexnan+0xe0>
 800acb8:	4547      	cmp	r7, r8
 800acba:	d127      	bne.n	800ad0c <__hexnan+0x12c>
 800acbc:	2301      	movs	r3, #1
 800acbe:	603b      	str	r3, [r7, #0]
 800acc0:	2005      	movs	r0, #5
 800acc2:	e026      	b.n	800ad12 <__hexnan+0x132>
 800acc4:	3501      	adds	r5, #1
 800acc6:	2d08      	cmp	r5, #8
 800acc8:	f10b 0b01 	add.w	fp, fp, #1
 800accc:	dd06      	ble.n	800acdc <__hexnan+0xfc>
 800acce:	4544      	cmp	r4, r8
 800acd0:	d9c3      	bls.n	800ac5a <__hexnan+0x7a>
 800acd2:	2300      	movs	r3, #0
 800acd4:	2501      	movs	r5, #1
 800acd6:	f844 3c04 	str.w	r3, [r4, #-4]
 800acda:	3c04      	subs	r4, #4
 800acdc:	6822      	ldr	r2, [r4, #0]
 800acde:	f000 000f 	and.w	r0, r0, #15
 800ace2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ace6:	6022      	str	r2, [r4, #0]
 800ace8:	e7b7      	b.n	800ac5a <__hexnan+0x7a>
 800acea:	2508      	movs	r5, #8
 800acec:	e7b5      	b.n	800ac5a <__hexnan+0x7a>
 800acee:	9b01      	ldr	r3, [sp, #4]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d0df      	beq.n	800acb4 <__hexnan+0xd4>
 800acf4:	f04f 32ff 	mov.w	r2, #4294967295
 800acf8:	f1c3 0320 	rsb	r3, r3, #32
 800acfc:	fa22 f303 	lsr.w	r3, r2, r3
 800ad00:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ad04:	401a      	ands	r2, r3
 800ad06:	f846 2c04 	str.w	r2, [r6, #-4]
 800ad0a:	e7d3      	b.n	800acb4 <__hexnan+0xd4>
 800ad0c:	3f04      	subs	r7, #4
 800ad0e:	e7d1      	b.n	800acb4 <__hexnan+0xd4>
 800ad10:	2004      	movs	r0, #4
 800ad12:	b007      	add	sp, #28
 800ad14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ad18 <_localeconv_r>:
 800ad18:	4800      	ldr	r0, [pc, #0]	; (800ad1c <_localeconv_r+0x4>)
 800ad1a:	4770      	bx	lr
 800ad1c:	200001f8 	.word	0x200001f8

0800ad20 <malloc>:
 800ad20:	4b02      	ldr	r3, [pc, #8]	; (800ad2c <malloc+0xc>)
 800ad22:	4601      	mov	r1, r0
 800ad24:	6818      	ldr	r0, [r3, #0]
 800ad26:	f000 bd65 	b.w	800b7f4 <_malloc_r>
 800ad2a:	bf00      	nop
 800ad2c:	200000a0 	.word	0x200000a0

0800ad30 <__ascii_mbtowc>:
 800ad30:	b082      	sub	sp, #8
 800ad32:	b901      	cbnz	r1, 800ad36 <__ascii_mbtowc+0x6>
 800ad34:	a901      	add	r1, sp, #4
 800ad36:	b142      	cbz	r2, 800ad4a <__ascii_mbtowc+0x1a>
 800ad38:	b14b      	cbz	r3, 800ad4e <__ascii_mbtowc+0x1e>
 800ad3a:	7813      	ldrb	r3, [r2, #0]
 800ad3c:	600b      	str	r3, [r1, #0]
 800ad3e:	7812      	ldrb	r2, [r2, #0]
 800ad40:	1e10      	subs	r0, r2, #0
 800ad42:	bf18      	it	ne
 800ad44:	2001      	movne	r0, #1
 800ad46:	b002      	add	sp, #8
 800ad48:	4770      	bx	lr
 800ad4a:	4610      	mov	r0, r2
 800ad4c:	e7fb      	b.n	800ad46 <__ascii_mbtowc+0x16>
 800ad4e:	f06f 0001 	mvn.w	r0, #1
 800ad52:	e7f8      	b.n	800ad46 <__ascii_mbtowc+0x16>

0800ad54 <memchr>:
 800ad54:	4603      	mov	r3, r0
 800ad56:	b510      	push	{r4, lr}
 800ad58:	b2c9      	uxtb	r1, r1
 800ad5a:	4402      	add	r2, r0
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	4618      	mov	r0, r3
 800ad60:	d101      	bne.n	800ad66 <memchr+0x12>
 800ad62:	2000      	movs	r0, #0
 800ad64:	e003      	b.n	800ad6e <memchr+0x1a>
 800ad66:	7804      	ldrb	r4, [r0, #0]
 800ad68:	3301      	adds	r3, #1
 800ad6a:	428c      	cmp	r4, r1
 800ad6c:	d1f6      	bne.n	800ad5c <memchr+0x8>
 800ad6e:	bd10      	pop	{r4, pc}

0800ad70 <memcpy>:
 800ad70:	440a      	add	r2, r1
 800ad72:	4291      	cmp	r1, r2
 800ad74:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad78:	d100      	bne.n	800ad7c <memcpy+0xc>
 800ad7a:	4770      	bx	lr
 800ad7c:	b510      	push	{r4, lr}
 800ad7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad82:	4291      	cmp	r1, r2
 800ad84:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad88:	d1f9      	bne.n	800ad7e <memcpy+0xe>
 800ad8a:	bd10      	pop	{r4, pc}

0800ad8c <_Balloc>:
 800ad8c:	b570      	push	{r4, r5, r6, lr}
 800ad8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ad90:	4604      	mov	r4, r0
 800ad92:	460d      	mov	r5, r1
 800ad94:	b976      	cbnz	r6, 800adb4 <_Balloc+0x28>
 800ad96:	2010      	movs	r0, #16
 800ad98:	f7ff ffc2 	bl	800ad20 <malloc>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	6260      	str	r0, [r4, #36]	; 0x24
 800ada0:	b920      	cbnz	r0, 800adac <_Balloc+0x20>
 800ada2:	2166      	movs	r1, #102	; 0x66
 800ada4:	4b17      	ldr	r3, [pc, #92]	; (800ae04 <_Balloc+0x78>)
 800ada6:	4818      	ldr	r0, [pc, #96]	; (800ae08 <_Balloc+0x7c>)
 800ada8:	f000 ff2c 	bl	800bc04 <__assert_func>
 800adac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800adb0:	6006      	str	r6, [r0, #0]
 800adb2:	60c6      	str	r6, [r0, #12]
 800adb4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800adb6:	68f3      	ldr	r3, [r6, #12]
 800adb8:	b183      	cbz	r3, 800addc <_Balloc+0x50>
 800adba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800adc2:	b9b8      	cbnz	r0, 800adf4 <_Balloc+0x68>
 800adc4:	2101      	movs	r1, #1
 800adc6:	fa01 f605 	lsl.w	r6, r1, r5
 800adca:	1d72      	adds	r2, r6, #5
 800adcc:	4620      	mov	r0, r4
 800adce:	0092      	lsls	r2, r2, #2
 800add0:	f000 fc94 	bl	800b6fc <_calloc_r>
 800add4:	b160      	cbz	r0, 800adf0 <_Balloc+0x64>
 800add6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800adda:	e00e      	b.n	800adfa <_Balloc+0x6e>
 800addc:	2221      	movs	r2, #33	; 0x21
 800adde:	2104      	movs	r1, #4
 800ade0:	4620      	mov	r0, r4
 800ade2:	f000 fc8b 	bl	800b6fc <_calloc_r>
 800ade6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ade8:	60f0      	str	r0, [r6, #12]
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d1e4      	bne.n	800adba <_Balloc+0x2e>
 800adf0:	2000      	movs	r0, #0
 800adf2:	bd70      	pop	{r4, r5, r6, pc}
 800adf4:	6802      	ldr	r2, [r0, #0]
 800adf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800adfa:	2300      	movs	r3, #0
 800adfc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae00:	e7f7      	b.n	800adf2 <_Balloc+0x66>
 800ae02:	bf00      	nop
 800ae04:	0800d2a6 	.word	0x0800d2a6
 800ae08:	0800d3a4 	.word	0x0800d3a4

0800ae0c <_Bfree>:
 800ae0c:	b570      	push	{r4, r5, r6, lr}
 800ae0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae10:	4605      	mov	r5, r0
 800ae12:	460c      	mov	r4, r1
 800ae14:	b976      	cbnz	r6, 800ae34 <_Bfree+0x28>
 800ae16:	2010      	movs	r0, #16
 800ae18:	f7ff ff82 	bl	800ad20 <malloc>
 800ae1c:	4602      	mov	r2, r0
 800ae1e:	6268      	str	r0, [r5, #36]	; 0x24
 800ae20:	b920      	cbnz	r0, 800ae2c <_Bfree+0x20>
 800ae22:	218a      	movs	r1, #138	; 0x8a
 800ae24:	4b08      	ldr	r3, [pc, #32]	; (800ae48 <_Bfree+0x3c>)
 800ae26:	4809      	ldr	r0, [pc, #36]	; (800ae4c <_Bfree+0x40>)
 800ae28:	f000 feec 	bl	800bc04 <__assert_func>
 800ae2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae30:	6006      	str	r6, [r0, #0]
 800ae32:	60c6      	str	r6, [r0, #12]
 800ae34:	b13c      	cbz	r4, 800ae46 <_Bfree+0x3a>
 800ae36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ae38:	6862      	ldr	r2, [r4, #4]
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae40:	6021      	str	r1, [r4, #0]
 800ae42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae46:	bd70      	pop	{r4, r5, r6, pc}
 800ae48:	0800d2a6 	.word	0x0800d2a6
 800ae4c:	0800d3a4 	.word	0x0800d3a4

0800ae50 <__multadd>:
 800ae50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae54:	4607      	mov	r7, r0
 800ae56:	460c      	mov	r4, r1
 800ae58:	461e      	mov	r6, r3
 800ae5a:	2000      	movs	r0, #0
 800ae5c:	690d      	ldr	r5, [r1, #16]
 800ae5e:	f101 0c14 	add.w	ip, r1, #20
 800ae62:	f8dc 3000 	ldr.w	r3, [ip]
 800ae66:	3001      	adds	r0, #1
 800ae68:	b299      	uxth	r1, r3
 800ae6a:	fb02 6101 	mla	r1, r2, r1, r6
 800ae6e:	0c1e      	lsrs	r6, r3, #16
 800ae70:	0c0b      	lsrs	r3, r1, #16
 800ae72:	fb02 3306 	mla	r3, r2, r6, r3
 800ae76:	b289      	uxth	r1, r1
 800ae78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae7c:	4285      	cmp	r5, r0
 800ae7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae82:	f84c 1b04 	str.w	r1, [ip], #4
 800ae86:	dcec      	bgt.n	800ae62 <__multadd+0x12>
 800ae88:	b30e      	cbz	r6, 800aece <__multadd+0x7e>
 800ae8a:	68a3      	ldr	r3, [r4, #8]
 800ae8c:	42ab      	cmp	r3, r5
 800ae8e:	dc19      	bgt.n	800aec4 <__multadd+0x74>
 800ae90:	6861      	ldr	r1, [r4, #4]
 800ae92:	4638      	mov	r0, r7
 800ae94:	3101      	adds	r1, #1
 800ae96:	f7ff ff79 	bl	800ad8c <_Balloc>
 800ae9a:	4680      	mov	r8, r0
 800ae9c:	b928      	cbnz	r0, 800aeaa <__multadd+0x5a>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	21b5      	movs	r1, #181	; 0xb5
 800aea2:	4b0c      	ldr	r3, [pc, #48]	; (800aed4 <__multadd+0x84>)
 800aea4:	480c      	ldr	r0, [pc, #48]	; (800aed8 <__multadd+0x88>)
 800aea6:	f000 fead 	bl	800bc04 <__assert_func>
 800aeaa:	6922      	ldr	r2, [r4, #16]
 800aeac:	f104 010c 	add.w	r1, r4, #12
 800aeb0:	3202      	adds	r2, #2
 800aeb2:	0092      	lsls	r2, r2, #2
 800aeb4:	300c      	adds	r0, #12
 800aeb6:	f7ff ff5b 	bl	800ad70 <memcpy>
 800aeba:	4621      	mov	r1, r4
 800aebc:	4638      	mov	r0, r7
 800aebe:	f7ff ffa5 	bl	800ae0c <_Bfree>
 800aec2:	4644      	mov	r4, r8
 800aec4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aec8:	3501      	adds	r5, #1
 800aeca:	615e      	str	r6, [r3, #20]
 800aecc:	6125      	str	r5, [r4, #16]
 800aece:	4620      	mov	r0, r4
 800aed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aed4:	0800d318 	.word	0x0800d318
 800aed8:	0800d3a4 	.word	0x0800d3a4

0800aedc <__s2b>:
 800aedc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aee0:	4615      	mov	r5, r2
 800aee2:	2209      	movs	r2, #9
 800aee4:	461f      	mov	r7, r3
 800aee6:	3308      	adds	r3, #8
 800aee8:	460c      	mov	r4, r1
 800aeea:	fb93 f3f2 	sdiv	r3, r3, r2
 800aeee:	4606      	mov	r6, r0
 800aef0:	2201      	movs	r2, #1
 800aef2:	2100      	movs	r1, #0
 800aef4:	429a      	cmp	r2, r3
 800aef6:	db09      	blt.n	800af0c <__s2b+0x30>
 800aef8:	4630      	mov	r0, r6
 800aefa:	f7ff ff47 	bl	800ad8c <_Balloc>
 800aefe:	b940      	cbnz	r0, 800af12 <__s2b+0x36>
 800af00:	4602      	mov	r2, r0
 800af02:	21ce      	movs	r1, #206	; 0xce
 800af04:	4b18      	ldr	r3, [pc, #96]	; (800af68 <__s2b+0x8c>)
 800af06:	4819      	ldr	r0, [pc, #100]	; (800af6c <__s2b+0x90>)
 800af08:	f000 fe7c 	bl	800bc04 <__assert_func>
 800af0c:	0052      	lsls	r2, r2, #1
 800af0e:	3101      	adds	r1, #1
 800af10:	e7f0      	b.n	800aef4 <__s2b+0x18>
 800af12:	9b08      	ldr	r3, [sp, #32]
 800af14:	2d09      	cmp	r5, #9
 800af16:	6143      	str	r3, [r0, #20]
 800af18:	f04f 0301 	mov.w	r3, #1
 800af1c:	6103      	str	r3, [r0, #16]
 800af1e:	dd16      	ble.n	800af4e <__s2b+0x72>
 800af20:	f104 0909 	add.w	r9, r4, #9
 800af24:	46c8      	mov	r8, r9
 800af26:	442c      	add	r4, r5
 800af28:	f818 3b01 	ldrb.w	r3, [r8], #1
 800af2c:	4601      	mov	r1, r0
 800af2e:	220a      	movs	r2, #10
 800af30:	4630      	mov	r0, r6
 800af32:	3b30      	subs	r3, #48	; 0x30
 800af34:	f7ff ff8c 	bl	800ae50 <__multadd>
 800af38:	45a0      	cmp	r8, r4
 800af3a:	d1f5      	bne.n	800af28 <__s2b+0x4c>
 800af3c:	f1a5 0408 	sub.w	r4, r5, #8
 800af40:	444c      	add	r4, r9
 800af42:	1b2d      	subs	r5, r5, r4
 800af44:	1963      	adds	r3, r4, r5
 800af46:	42bb      	cmp	r3, r7
 800af48:	db04      	blt.n	800af54 <__s2b+0x78>
 800af4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af4e:	2509      	movs	r5, #9
 800af50:	340a      	adds	r4, #10
 800af52:	e7f6      	b.n	800af42 <__s2b+0x66>
 800af54:	f814 3b01 	ldrb.w	r3, [r4], #1
 800af58:	4601      	mov	r1, r0
 800af5a:	220a      	movs	r2, #10
 800af5c:	4630      	mov	r0, r6
 800af5e:	3b30      	subs	r3, #48	; 0x30
 800af60:	f7ff ff76 	bl	800ae50 <__multadd>
 800af64:	e7ee      	b.n	800af44 <__s2b+0x68>
 800af66:	bf00      	nop
 800af68:	0800d318 	.word	0x0800d318
 800af6c:	0800d3a4 	.word	0x0800d3a4

0800af70 <__hi0bits>:
 800af70:	0c02      	lsrs	r2, r0, #16
 800af72:	0412      	lsls	r2, r2, #16
 800af74:	4603      	mov	r3, r0
 800af76:	b9ca      	cbnz	r2, 800afac <__hi0bits+0x3c>
 800af78:	0403      	lsls	r3, r0, #16
 800af7a:	2010      	movs	r0, #16
 800af7c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800af80:	bf04      	itt	eq
 800af82:	021b      	lsleq	r3, r3, #8
 800af84:	3008      	addeq	r0, #8
 800af86:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800af8a:	bf04      	itt	eq
 800af8c:	011b      	lsleq	r3, r3, #4
 800af8e:	3004      	addeq	r0, #4
 800af90:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800af94:	bf04      	itt	eq
 800af96:	009b      	lsleq	r3, r3, #2
 800af98:	3002      	addeq	r0, #2
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	db05      	blt.n	800afaa <__hi0bits+0x3a>
 800af9e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800afa2:	f100 0001 	add.w	r0, r0, #1
 800afa6:	bf08      	it	eq
 800afa8:	2020      	moveq	r0, #32
 800afaa:	4770      	bx	lr
 800afac:	2000      	movs	r0, #0
 800afae:	e7e5      	b.n	800af7c <__hi0bits+0xc>

0800afb0 <__lo0bits>:
 800afb0:	6803      	ldr	r3, [r0, #0]
 800afb2:	4602      	mov	r2, r0
 800afb4:	f013 0007 	ands.w	r0, r3, #7
 800afb8:	d00b      	beq.n	800afd2 <__lo0bits+0x22>
 800afba:	07d9      	lsls	r1, r3, #31
 800afbc:	d421      	bmi.n	800b002 <__lo0bits+0x52>
 800afbe:	0798      	lsls	r0, r3, #30
 800afc0:	bf49      	itett	mi
 800afc2:	085b      	lsrmi	r3, r3, #1
 800afc4:	089b      	lsrpl	r3, r3, #2
 800afc6:	2001      	movmi	r0, #1
 800afc8:	6013      	strmi	r3, [r2, #0]
 800afca:	bf5c      	itt	pl
 800afcc:	2002      	movpl	r0, #2
 800afce:	6013      	strpl	r3, [r2, #0]
 800afd0:	4770      	bx	lr
 800afd2:	b299      	uxth	r1, r3
 800afd4:	b909      	cbnz	r1, 800afda <__lo0bits+0x2a>
 800afd6:	2010      	movs	r0, #16
 800afd8:	0c1b      	lsrs	r3, r3, #16
 800afda:	b2d9      	uxtb	r1, r3
 800afdc:	b909      	cbnz	r1, 800afe2 <__lo0bits+0x32>
 800afde:	3008      	adds	r0, #8
 800afe0:	0a1b      	lsrs	r3, r3, #8
 800afe2:	0719      	lsls	r1, r3, #28
 800afe4:	bf04      	itt	eq
 800afe6:	091b      	lsreq	r3, r3, #4
 800afe8:	3004      	addeq	r0, #4
 800afea:	0799      	lsls	r1, r3, #30
 800afec:	bf04      	itt	eq
 800afee:	089b      	lsreq	r3, r3, #2
 800aff0:	3002      	addeq	r0, #2
 800aff2:	07d9      	lsls	r1, r3, #31
 800aff4:	d403      	bmi.n	800affe <__lo0bits+0x4e>
 800aff6:	085b      	lsrs	r3, r3, #1
 800aff8:	f100 0001 	add.w	r0, r0, #1
 800affc:	d003      	beq.n	800b006 <__lo0bits+0x56>
 800affe:	6013      	str	r3, [r2, #0]
 800b000:	4770      	bx	lr
 800b002:	2000      	movs	r0, #0
 800b004:	4770      	bx	lr
 800b006:	2020      	movs	r0, #32
 800b008:	4770      	bx	lr
	...

0800b00c <__i2b>:
 800b00c:	b510      	push	{r4, lr}
 800b00e:	460c      	mov	r4, r1
 800b010:	2101      	movs	r1, #1
 800b012:	f7ff febb 	bl	800ad8c <_Balloc>
 800b016:	4602      	mov	r2, r0
 800b018:	b928      	cbnz	r0, 800b026 <__i2b+0x1a>
 800b01a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b01e:	4b04      	ldr	r3, [pc, #16]	; (800b030 <__i2b+0x24>)
 800b020:	4804      	ldr	r0, [pc, #16]	; (800b034 <__i2b+0x28>)
 800b022:	f000 fdef 	bl	800bc04 <__assert_func>
 800b026:	2301      	movs	r3, #1
 800b028:	6144      	str	r4, [r0, #20]
 800b02a:	6103      	str	r3, [r0, #16]
 800b02c:	bd10      	pop	{r4, pc}
 800b02e:	bf00      	nop
 800b030:	0800d318 	.word	0x0800d318
 800b034:	0800d3a4 	.word	0x0800d3a4

0800b038 <__multiply>:
 800b038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b03c:	4691      	mov	r9, r2
 800b03e:	690a      	ldr	r2, [r1, #16]
 800b040:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b044:	460c      	mov	r4, r1
 800b046:	429a      	cmp	r2, r3
 800b048:	bfbe      	ittt	lt
 800b04a:	460b      	movlt	r3, r1
 800b04c:	464c      	movlt	r4, r9
 800b04e:	4699      	movlt	r9, r3
 800b050:	6927      	ldr	r7, [r4, #16]
 800b052:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b056:	68a3      	ldr	r3, [r4, #8]
 800b058:	6861      	ldr	r1, [r4, #4]
 800b05a:	eb07 060a 	add.w	r6, r7, sl
 800b05e:	42b3      	cmp	r3, r6
 800b060:	b085      	sub	sp, #20
 800b062:	bfb8      	it	lt
 800b064:	3101      	addlt	r1, #1
 800b066:	f7ff fe91 	bl	800ad8c <_Balloc>
 800b06a:	b930      	cbnz	r0, 800b07a <__multiply+0x42>
 800b06c:	4602      	mov	r2, r0
 800b06e:	f240 115d 	movw	r1, #349	; 0x15d
 800b072:	4b43      	ldr	r3, [pc, #268]	; (800b180 <__multiply+0x148>)
 800b074:	4843      	ldr	r0, [pc, #268]	; (800b184 <__multiply+0x14c>)
 800b076:	f000 fdc5 	bl	800bc04 <__assert_func>
 800b07a:	f100 0514 	add.w	r5, r0, #20
 800b07e:	462b      	mov	r3, r5
 800b080:	2200      	movs	r2, #0
 800b082:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b086:	4543      	cmp	r3, r8
 800b088:	d321      	bcc.n	800b0ce <__multiply+0x96>
 800b08a:	f104 0314 	add.w	r3, r4, #20
 800b08e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b092:	f109 0314 	add.w	r3, r9, #20
 800b096:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b09a:	9202      	str	r2, [sp, #8]
 800b09c:	1b3a      	subs	r2, r7, r4
 800b09e:	3a15      	subs	r2, #21
 800b0a0:	f022 0203 	bic.w	r2, r2, #3
 800b0a4:	3204      	adds	r2, #4
 800b0a6:	f104 0115 	add.w	r1, r4, #21
 800b0aa:	428f      	cmp	r7, r1
 800b0ac:	bf38      	it	cc
 800b0ae:	2204      	movcc	r2, #4
 800b0b0:	9201      	str	r2, [sp, #4]
 800b0b2:	9a02      	ldr	r2, [sp, #8]
 800b0b4:	9303      	str	r3, [sp, #12]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d80c      	bhi.n	800b0d4 <__multiply+0x9c>
 800b0ba:	2e00      	cmp	r6, #0
 800b0bc:	dd03      	ble.n	800b0c6 <__multiply+0x8e>
 800b0be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d059      	beq.n	800b17a <__multiply+0x142>
 800b0c6:	6106      	str	r6, [r0, #16]
 800b0c8:	b005      	add	sp, #20
 800b0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ce:	f843 2b04 	str.w	r2, [r3], #4
 800b0d2:	e7d8      	b.n	800b086 <__multiply+0x4e>
 800b0d4:	f8b3 a000 	ldrh.w	sl, [r3]
 800b0d8:	f1ba 0f00 	cmp.w	sl, #0
 800b0dc:	d023      	beq.n	800b126 <__multiply+0xee>
 800b0de:	46a9      	mov	r9, r5
 800b0e0:	f04f 0c00 	mov.w	ip, #0
 800b0e4:	f104 0e14 	add.w	lr, r4, #20
 800b0e8:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b0ec:	f8d9 1000 	ldr.w	r1, [r9]
 800b0f0:	fa1f fb82 	uxth.w	fp, r2
 800b0f4:	b289      	uxth	r1, r1
 800b0f6:	fb0a 110b 	mla	r1, sl, fp, r1
 800b0fa:	4461      	add	r1, ip
 800b0fc:	f8d9 c000 	ldr.w	ip, [r9]
 800b100:	0c12      	lsrs	r2, r2, #16
 800b102:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b106:	fb0a c202 	mla	r2, sl, r2, ip
 800b10a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b10e:	b289      	uxth	r1, r1
 800b110:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b114:	4577      	cmp	r7, lr
 800b116:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b11a:	f849 1b04 	str.w	r1, [r9], #4
 800b11e:	d8e3      	bhi.n	800b0e8 <__multiply+0xb0>
 800b120:	9a01      	ldr	r2, [sp, #4]
 800b122:	f845 c002 	str.w	ip, [r5, r2]
 800b126:	9a03      	ldr	r2, [sp, #12]
 800b128:	3304      	adds	r3, #4
 800b12a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b12e:	f1b9 0f00 	cmp.w	r9, #0
 800b132:	d020      	beq.n	800b176 <__multiply+0x13e>
 800b134:	46ae      	mov	lr, r5
 800b136:	f04f 0a00 	mov.w	sl, #0
 800b13a:	6829      	ldr	r1, [r5, #0]
 800b13c:	f104 0c14 	add.w	ip, r4, #20
 800b140:	f8bc b000 	ldrh.w	fp, [ip]
 800b144:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b148:	b289      	uxth	r1, r1
 800b14a:	fb09 220b 	mla	r2, r9, fp, r2
 800b14e:	4492      	add	sl, r2
 800b150:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b154:	f84e 1b04 	str.w	r1, [lr], #4
 800b158:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b15c:	f8be 1000 	ldrh.w	r1, [lr]
 800b160:	0c12      	lsrs	r2, r2, #16
 800b162:	fb09 1102 	mla	r1, r9, r2, r1
 800b166:	4567      	cmp	r7, ip
 800b168:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b16c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b170:	d8e6      	bhi.n	800b140 <__multiply+0x108>
 800b172:	9a01      	ldr	r2, [sp, #4]
 800b174:	50a9      	str	r1, [r5, r2]
 800b176:	3504      	adds	r5, #4
 800b178:	e79b      	b.n	800b0b2 <__multiply+0x7a>
 800b17a:	3e01      	subs	r6, #1
 800b17c:	e79d      	b.n	800b0ba <__multiply+0x82>
 800b17e:	bf00      	nop
 800b180:	0800d318 	.word	0x0800d318
 800b184:	0800d3a4 	.word	0x0800d3a4

0800b188 <__pow5mult>:
 800b188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b18c:	4615      	mov	r5, r2
 800b18e:	f012 0203 	ands.w	r2, r2, #3
 800b192:	4606      	mov	r6, r0
 800b194:	460f      	mov	r7, r1
 800b196:	d007      	beq.n	800b1a8 <__pow5mult+0x20>
 800b198:	4c25      	ldr	r4, [pc, #148]	; (800b230 <__pow5mult+0xa8>)
 800b19a:	3a01      	subs	r2, #1
 800b19c:	2300      	movs	r3, #0
 800b19e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1a2:	f7ff fe55 	bl	800ae50 <__multadd>
 800b1a6:	4607      	mov	r7, r0
 800b1a8:	10ad      	asrs	r5, r5, #2
 800b1aa:	d03d      	beq.n	800b228 <__pow5mult+0xa0>
 800b1ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b1ae:	b97c      	cbnz	r4, 800b1d0 <__pow5mult+0x48>
 800b1b0:	2010      	movs	r0, #16
 800b1b2:	f7ff fdb5 	bl	800ad20 <malloc>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	6270      	str	r0, [r6, #36]	; 0x24
 800b1ba:	b928      	cbnz	r0, 800b1c8 <__pow5mult+0x40>
 800b1bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b1c0:	4b1c      	ldr	r3, [pc, #112]	; (800b234 <__pow5mult+0xac>)
 800b1c2:	481d      	ldr	r0, [pc, #116]	; (800b238 <__pow5mult+0xb0>)
 800b1c4:	f000 fd1e 	bl	800bc04 <__assert_func>
 800b1c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1cc:	6004      	str	r4, [r0, #0]
 800b1ce:	60c4      	str	r4, [r0, #12]
 800b1d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b1d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b1d8:	b94c      	cbnz	r4, 800b1ee <__pow5mult+0x66>
 800b1da:	f240 2171 	movw	r1, #625	; 0x271
 800b1de:	4630      	mov	r0, r6
 800b1e0:	f7ff ff14 	bl	800b00c <__i2b>
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	f8c8 0008 	str.w	r0, [r8, #8]
 800b1ec:	6003      	str	r3, [r0, #0]
 800b1ee:	f04f 0900 	mov.w	r9, #0
 800b1f2:	07eb      	lsls	r3, r5, #31
 800b1f4:	d50a      	bpl.n	800b20c <__pow5mult+0x84>
 800b1f6:	4639      	mov	r1, r7
 800b1f8:	4622      	mov	r2, r4
 800b1fa:	4630      	mov	r0, r6
 800b1fc:	f7ff ff1c 	bl	800b038 <__multiply>
 800b200:	4680      	mov	r8, r0
 800b202:	4639      	mov	r1, r7
 800b204:	4630      	mov	r0, r6
 800b206:	f7ff fe01 	bl	800ae0c <_Bfree>
 800b20a:	4647      	mov	r7, r8
 800b20c:	106d      	asrs	r5, r5, #1
 800b20e:	d00b      	beq.n	800b228 <__pow5mult+0xa0>
 800b210:	6820      	ldr	r0, [r4, #0]
 800b212:	b938      	cbnz	r0, 800b224 <__pow5mult+0x9c>
 800b214:	4622      	mov	r2, r4
 800b216:	4621      	mov	r1, r4
 800b218:	4630      	mov	r0, r6
 800b21a:	f7ff ff0d 	bl	800b038 <__multiply>
 800b21e:	6020      	str	r0, [r4, #0]
 800b220:	f8c0 9000 	str.w	r9, [r0]
 800b224:	4604      	mov	r4, r0
 800b226:	e7e4      	b.n	800b1f2 <__pow5mult+0x6a>
 800b228:	4638      	mov	r0, r7
 800b22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b22e:	bf00      	nop
 800b230:	0800d4f0 	.word	0x0800d4f0
 800b234:	0800d2a6 	.word	0x0800d2a6
 800b238:	0800d3a4 	.word	0x0800d3a4

0800b23c <__lshift>:
 800b23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b240:	460c      	mov	r4, r1
 800b242:	4607      	mov	r7, r0
 800b244:	4691      	mov	r9, r2
 800b246:	6923      	ldr	r3, [r4, #16]
 800b248:	6849      	ldr	r1, [r1, #4]
 800b24a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b24e:	68a3      	ldr	r3, [r4, #8]
 800b250:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b254:	f108 0601 	add.w	r6, r8, #1
 800b258:	42b3      	cmp	r3, r6
 800b25a:	db0b      	blt.n	800b274 <__lshift+0x38>
 800b25c:	4638      	mov	r0, r7
 800b25e:	f7ff fd95 	bl	800ad8c <_Balloc>
 800b262:	4605      	mov	r5, r0
 800b264:	b948      	cbnz	r0, 800b27a <__lshift+0x3e>
 800b266:	4602      	mov	r2, r0
 800b268:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b26c:	4b29      	ldr	r3, [pc, #164]	; (800b314 <__lshift+0xd8>)
 800b26e:	482a      	ldr	r0, [pc, #168]	; (800b318 <__lshift+0xdc>)
 800b270:	f000 fcc8 	bl	800bc04 <__assert_func>
 800b274:	3101      	adds	r1, #1
 800b276:	005b      	lsls	r3, r3, #1
 800b278:	e7ee      	b.n	800b258 <__lshift+0x1c>
 800b27a:	2300      	movs	r3, #0
 800b27c:	f100 0114 	add.w	r1, r0, #20
 800b280:	f100 0210 	add.w	r2, r0, #16
 800b284:	4618      	mov	r0, r3
 800b286:	4553      	cmp	r3, sl
 800b288:	db37      	blt.n	800b2fa <__lshift+0xbe>
 800b28a:	6920      	ldr	r0, [r4, #16]
 800b28c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b290:	f104 0314 	add.w	r3, r4, #20
 800b294:	f019 091f 	ands.w	r9, r9, #31
 800b298:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b29c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b2a0:	d02f      	beq.n	800b302 <__lshift+0xc6>
 800b2a2:	468a      	mov	sl, r1
 800b2a4:	f04f 0c00 	mov.w	ip, #0
 800b2a8:	f1c9 0e20 	rsb	lr, r9, #32
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	fa02 f209 	lsl.w	r2, r2, r9
 800b2b2:	ea42 020c 	orr.w	r2, r2, ip
 800b2b6:	f84a 2b04 	str.w	r2, [sl], #4
 800b2ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2be:	4298      	cmp	r0, r3
 800b2c0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b2c4:	d8f2      	bhi.n	800b2ac <__lshift+0x70>
 800b2c6:	1b03      	subs	r3, r0, r4
 800b2c8:	3b15      	subs	r3, #21
 800b2ca:	f023 0303 	bic.w	r3, r3, #3
 800b2ce:	3304      	adds	r3, #4
 800b2d0:	f104 0215 	add.w	r2, r4, #21
 800b2d4:	4290      	cmp	r0, r2
 800b2d6:	bf38      	it	cc
 800b2d8:	2304      	movcc	r3, #4
 800b2da:	f841 c003 	str.w	ip, [r1, r3]
 800b2de:	f1bc 0f00 	cmp.w	ip, #0
 800b2e2:	d001      	beq.n	800b2e8 <__lshift+0xac>
 800b2e4:	f108 0602 	add.w	r6, r8, #2
 800b2e8:	3e01      	subs	r6, #1
 800b2ea:	4638      	mov	r0, r7
 800b2ec:	4621      	mov	r1, r4
 800b2ee:	612e      	str	r6, [r5, #16]
 800b2f0:	f7ff fd8c 	bl	800ae0c <_Bfree>
 800b2f4:	4628      	mov	r0, r5
 800b2f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800b2fe:	3301      	adds	r3, #1
 800b300:	e7c1      	b.n	800b286 <__lshift+0x4a>
 800b302:	3904      	subs	r1, #4
 800b304:	f853 2b04 	ldr.w	r2, [r3], #4
 800b308:	4298      	cmp	r0, r3
 800b30a:	f841 2f04 	str.w	r2, [r1, #4]!
 800b30e:	d8f9      	bhi.n	800b304 <__lshift+0xc8>
 800b310:	e7ea      	b.n	800b2e8 <__lshift+0xac>
 800b312:	bf00      	nop
 800b314:	0800d318 	.word	0x0800d318
 800b318:	0800d3a4 	.word	0x0800d3a4

0800b31c <__mcmp>:
 800b31c:	4603      	mov	r3, r0
 800b31e:	690a      	ldr	r2, [r1, #16]
 800b320:	6900      	ldr	r0, [r0, #16]
 800b322:	b530      	push	{r4, r5, lr}
 800b324:	1a80      	subs	r0, r0, r2
 800b326:	d10d      	bne.n	800b344 <__mcmp+0x28>
 800b328:	3314      	adds	r3, #20
 800b32a:	3114      	adds	r1, #20
 800b32c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b330:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b334:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b338:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b33c:	4295      	cmp	r5, r2
 800b33e:	d002      	beq.n	800b346 <__mcmp+0x2a>
 800b340:	d304      	bcc.n	800b34c <__mcmp+0x30>
 800b342:	2001      	movs	r0, #1
 800b344:	bd30      	pop	{r4, r5, pc}
 800b346:	42a3      	cmp	r3, r4
 800b348:	d3f4      	bcc.n	800b334 <__mcmp+0x18>
 800b34a:	e7fb      	b.n	800b344 <__mcmp+0x28>
 800b34c:	f04f 30ff 	mov.w	r0, #4294967295
 800b350:	e7f8      	b.n	800b344 <__mcmp+0x28>
	...

0800b354 <__mdiff>:
 800b354:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b358:	460d      	mov	r5, r1
 800b35a:	4607      	mov	r7, r0
 800b35c:	4611      	mov	r1, r2
 800b35e:	4628      	mov	r0, r5
 800b360:	4614      	mov	r4, r2
 800b362:	f7ff ffdb 	bl	800b31c <__mcmp>
 800b366:	1e06      	subs	r6, r0, #0
 800b368:	d111      	bne.n	800b38e <__mdiff+0x3a>
 800b36a:	4631      	mov	r1, r6
 800b36c:	4638      	mov	r0, r7
 800b36e:	f7ff fd0d 	bl	800ad8c <_Balloc>
 800b372:	4602      	mov	r2, r0
 800b374:	b928      	cbnz	r0, 800b382 <__mdiff+0x2e>
 800b376:	f240 2132 	movw	r1, #562	; 0x232
 800b37a:	4b3a      	ldr	r3, [pc, #232]	; (800b464 <__mdiff+0x110>)
 800b37c:	483a      	ldr	r0, [pc, #232]	; (800b468 <__mdiff+0x114>)
 800b37e:	f000 fc41 	bl	800bc04 <__assert_func>
 800b382:	2301      	movs	r3, #1
 800b384:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b388:	4610      	mov	r0, r2
 800b38a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b38e:	bfa4      	itt	ge
 800b390:	4623      	movge	r3, r4
 800b392:	462c      	movge	r4, r5
 800b394:	4638      	mov	r0, r7
 800b396:	6861      	ldr	r1, [r4, #4]
 800b398:	bfa6      	itte	ge
 800b39a:	461d      	movge	r5, r3
 800b39c:	2600      	movge	r6, #0
 800b39e:	2601      	movlt	r6, #1
 800b3a0:	f7ff fcf4 	bl	800ad8c <_Balloc>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	b918      	cbnz	r0, 800b3b0 <__mdiff+0x5c>
 800b3a8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b3ac:	4b2d      	ldr	r3, [pc, #180]	; (800b464 <__mdiff+0x110>)
 800b3ae:	e7e5      	b.n	800b37c <__mdiff+0x28>
 800b3b0:	f102 0814 	add.w	r8, r2, #20
 800b3b4:	46c2      	mov	sl, r8
 800b3b6:	f04f 0c00 	mov.w	ip, #0
 800b3ba:	6927      	ldr	r7, [r4, #16]
 800b3bc:	60c6      	str	r6, [r0, #12]
 800b3be:	692e      	ldr	r6, [r5, #16]
 800b3c0:	f104 0014 	add.w	r0, r4, #20
 800b3c4:	f105 0914 	add.w	r9, r5, #20
 800b3c8:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800b3cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b3d0:	3410      	adds	r4, #16
 800b3d2:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b3d6:	f859 3b04 	ldr.w	r3, [r9], #4
 800b3da:	fa1f f18b 	uxth.w	r1, fp
 800b3de:	448c      	add	ip, r1
 800b3e0:	b299      	uxth	r1, r3
 800b3e2:	0c1b      	lsrs	r3, r3, #16
 800b3e4:	ebac 0101 	sub.w	r1, ip, r1
 800b3e8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b3ec:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b3f0:	b289      	uxth	r1, r1
 800b3f2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800b3f6:	454e      	cmp	r6, r9
 800b3f8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b3fc:	f84a 3b04 	str.w	r3, [sl], #4
 800b400:	d8e7      	bhi.n	800b3d2 <__mdiff+0x7e>
 800b402:	1b73      	subs	r3, r6, r5
 800b404:	3b15      	subs	r3, #21
 800b406:	f023 0303 	bic.w	r3, r3, #3
 800b40a:	3515      	adds	r5, #21
 800b40c:	3304      	adds	r3, #4
 800b40e:	42ae      	cmp	r6, r5
 800b410:	bf38      	it	cc
 800b412:	2304      	movcc	r3, #4
 800b414:	4418      	add	r0, r3
 800b416:	4443      	add	r3, r8
 800b418:	461e      	mov	r6, r3
 800b41a:	4605      	mov	r5, r0
 800b41c:	4575      	cmp	r5, lr
 800b41e:	d30e      	bcc.n	800b43e <__mdiff+0xea>
 800b420:	f10e 0103 	add.w	r1, lr, #3
 800b424:	1a09      	subs	r1, r1, r0
 800b426:	f021 0103 	bic.w	r1, r1, #3
 800b42a:	3803      	subs	r0, #3
 800b42c:	4586      	cmp	lr, r0
 800b42e:	bf38      	it	cc
 800b430:	2100      	movcc	r1, #0
 800b432:	4419      	add	r1, r3
 800b434:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b438:	b18b      	cbz	r3, 800b45e <__mdiff+0x10a>
 800b43a:	6117      	str	r7, [r2, #16]
 800b43c:	e7a4      	b.n	800b388 <__mdiff+0x34>
 800b43e:	f855 8b04 	ldr.w	r8, [r5], #4
 800b442:	fa1f f188 	uxth.w	r1, r8
 800b446:	4461      	add	r1, ip
 800b448:	140c      	asrs	r4, r1, #16
 800b44a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b44e:	b289      	uxth	r1, r1
 800b450:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b454:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800b458:	f846 1b04 	str.w	r1, [r6], #4
 800b45c:	e7de      	b.n	800b41c <__mdiff+0xc8>
 800b45e:	3f01      	subs	r7, #1
 800b460:	e7e8      	b.n	800b434 <__mdiff+0xe0>
 800b462:	bf00      	nop
 800b464:	0800d318 	.word	0x0800d318
 800b468:	0800d3a4 	.word	0x0800d3a4

0800b46c <__ulp>:
 800b46c:	4b11      	ldr	r3, [pc, #68]	; (800b4b4 <__ulp+0x48>)
 800b46e:	400b      	ands	r3, r1
 800b470:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b474:	2b00      	cmp	r3, #0
 800b476:	dd02      	ble.n	800b47e <__ulp+0x12>
 800b478:	2000      	movs	r0, #0
 800b47a:	4619      	mov	r1, r3
 800b47c:	4770      	bx	lr
 800b47e:	425b      	negs	r3, r3
 800b480:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b484:	f04f 0000 	mov.w	r0, #0
 800b488:	f04f 0100 	mov.w	r1, #0
 800b48c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b490:	da04      	bge.n	800b49c <__ulp+0x30>
 800b492:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b496:	fa43 f102 	asr.w	r1, r3, r2
 800b49a:	4770      	bx	lr
 800b49c:	f1a2 0314 	sub.w	r3, r2, #20
 800b4a0:	2b1e      	cmp	r3, #30
 800b4a2:	bfd6      	itet	le
 800b4a4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b4a8:	2301      	movgt	r3, #1
 800b4aa:	fa22 f303 	lsrle.w	r3, r2, r3
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	4770      	bx	lr
 800b4b2:	bf00      	nop
 800b4b4:	7ff00000 	.word	0x7ff00000

0800b4b8 <__b2d>:
 800b4b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4bc:	6907      	ldr	r7, [r0, #16]
 800b4be:	f100 0914 	add.w	r9, r0, #20
 800b4c2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800b4c6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800b4ca:	f1a7 0804 	sub.w	r8, r7, #4
 800b4ce:	4630      	mov	r0, r6
 800b4d0:	f7ff fd4e 	bl	800af70 <__hi0bits>
 800b4d4:	f1c0 0320 	rsb	r3, r0, #32
 800b4d8:	280a      	cmp	r0, #10
 800b4da:	600b      	str	r3, [r1, #0]
 800b4dc:	491f      	ldr	r1, [pc, #124]	; (800b55c <__b2d+0xa4>)
 800b4de:	dc17      	bgt.n	800b510 <__b2d+0x58>
 800b4e0:	45c1      	cmp	r9, r8
 800b4e2:	bf28      	it	cs
 800b4e4:	2200      	movcs	r2, #0
 800b4e6:	f1c0 0c0b 	rsb	ip, r0, #11
 800b4ea:	fa26 f30c 	lsr.w	r3, r6, ip
 800b4ee:	bf38      	it	cc
 800b4f0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b4f4:	ea43 0501 	orr.w	r5, r3, r1
 800b4f8:	f100 0315 	add.w	r3, r0, #21
 800b4fc:	fa06 f303 	lsl.w	r3, r6, r3
 800b500:	fa22 f20c 	lsr.w	r2, r2, ip
 800b504:	ea43 0402 	orr.w	r4, r3, r2
 800b508:	4620      	mov	r0, r4
 800b50a:	4629      	mov	r1, r5
 800b50c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b510:	45c1      	cmp	r9, r8
 800b512:	bf2e      	itee	cs
 800b514:	2200      	movcs	r2, #0
 800b516:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800b51a:	f1a7 0808 	subcc.w	r8, r7, #8
 800b51e:	f1b0 030b 	subs.w	r3, r0, #11
 800b522:	d016      	beq.n	800b552 <__b2d+0x9a>
 800b524:	f1c3 0720 	rsb	r7, r3, #32
 800b528:	fa22 f107 	lsr.w	r1, r2, r7
 800b52c:	45c8      	cmp	r8, r9
 800b52e:	fa06 f603 	lsl.w	r6, r6, r3
 800b532:	ea46 0601 	orr.w	r6, r6, r1
 800b536:	bf94      	ite	ls
 800b538:	2100      	movls	r1, #0
 800b53a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800b53e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800b542:	fa02 f003 	lsl.w	r0, r2, r3
 800b546:	40f9      	lsrs	r1, r7
 800b548:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b54c:	ea40 0401 	orr.w	r4, r0, r1
 800b550:	e7da      	b.n	800b508 <__b2d+0x50>
 800b552:	4614      	mov	r4, r2
 800b554:	ea46 0501 	orr.w	r5, r6, r1
 800b558:	e7d6      	b.n	800b508 <__b2d+0x50>
 800b55a:	bf00      	nop
 800b55c:	3ff00000 	.word	0x3ff00000

0800b560 <__d2b>:
 800b560:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b564:	2101      	movs	r1, #1
 800b566:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800b56a:	4690      	mov	r8, r2
 800b56c:	461d      	mov	r5, r3
 800b56e:	f7ff fc0d 	bl	800ad8c <_Balloc>
 800b572:	4604      	mov	r4, r0
 800b574:	b930      	cbnz	r0, 800b584 <__d2b+0x24>
 800b576:	4602      	mov	r2, r0
 800b578:	f240 310a 	movw	r1, #778	; 0x30a
 800b57c:	4b24      	ldr	r3, [pc, #144]	; (800b610 <__d2b+0xb0>)
 800b57e:	4825      	ldr	r0, [pc, #148]	; (800b614 <__d2b+0xb4>)
 800b580:	f000 fb40 	bl	800bc04 <__assert_func>
 800b584:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b588:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800b58c:	bb2d      	cbnz	r5, 800b5da <__d2b+0x7a>
 800b58e:	9301      	str	r3, [sp, #4]
 800b590:	f1b8 0300 	subs.w	r3, r8, #0
 800b594:	d026      	beq.n	800b5e4 <__d2b+0x84>
 800b596:	4668      	mov	r0, sp
 800b598:	9300      	str	r3, [sp, #0]
 800b59a:	f7ff fd09 	bl	800afb0 <__lo0bits>
 800b59e:	9900      	ldr	r1, [sp, #0]
 800b5a0:	b1f0      	cbz	r0, 800b5e0 <__d2b+0x80>
 800b5a2:	9a01      	ldr	r2, [sp, #4]
 800b5a4:	f1c0 0320 	rsb	r3, r0, #32
 800b5a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b5ac:	430b      	orrs	r3, r1
 800b5ae:	40c2      	lsrs	r2, r0
 800b5b0:	6163      	str	r3, [r4, #20]
 800b5b2:	9201      	str	r2, [sp, #4]
 800b5b4:	9b01      	ldr	r3, [sp, #4]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	bf14      	ite	ne
 800b5ba:	2102      	movne	r1, #2
 800b5bc:	2101      	moveq	r1, #1
 800b5be:	61a3      	str	r3, [r4, #24]
 800b5c0:	6121      	str	r1, [r4, #16]
 800b5c2:	b1c5      	cbz	r5, 800b5f6 <__d2b+0x96>
 800b5c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b5c8:	4405      	add	r5, r0
 800b5ca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b5ce:	603d      	str	r5, [r7, #0]
 800b5d0:	6030      	str	r0, [r6, #0]
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	b002      	add	sp, #8
 800b5d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5de:	e7d6      	b.n	800b58e <__d2b+0x2e>
 800b5e0:	6161      	str	r1, [r4, #20]
 800b5e2:	e7e7      	b.n	800b5b4 <__d2b+0x54>
 800b5e4:	a801      	add	r0, sp, #4
 800b5e6:	f7ff fce3 	bl	800afb0 <__lo0bits>
 800b5ea:	2101      	movs	r1, #1
 800b5ec:	9b01      	ldr	r3, [sp, #4]
 800b5ee:	6121      	str	r1, [r4, #16]
 800b5f0:	6163      	str	r3, [r4, #20]
 800b5f2:	3020      	adds	r0, #32
 800b5f4:	e7e5      	b.n	800b5c2 <__d2b+0x62>
 800b5f6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800b5fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b5fe:	6038      	str	r0, [r7, #0]
 800b600:	6918      	ldr	r0, [r3, #16]
 800b602:	f7ff fcb5 	bl	800af70 <__hi0bits>
 800b606:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800b60a:	6031      	str	r1, [r6, #0]
 800b60c:	e7e1      	b.n	800b5d2 <__d2b+0x72>
 800b60e:	bf00      	nop
 800b610:	0800d318 	.word	0x0800d318
 800b614:	0800d3a4 	.word	0x0800d3a4

0800b618 <__ratio>:
 800b618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b61c:	4688      	mov	r8, r1
 800b61e:	4669      	mov	r1, sp
 800b620:	4681      	mov	r9, r0
 800b622:	f7ff ff49 	bl	800b4b8 <__b2d>
 800b626:	460f      	mov	r7, r1
 800b628:	4604      	mov	r4, r0
 800b62a:	460d      	mov	r5, r1
 800b62c:	4640      	mov	r0, r8
 800b62e:	a901      	add	r1, sp, #4
 800b630:	f7ff ff42 	bl	800b4b8 <__b2d>
 800b634:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b638:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b63c:	468b      	mov	fp, r1
 800b63e:	eba3 0c02 	sub.w	ip, r3, r2
 800b642:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b646:	1a9b      	subs	r3, r3, r2
 800b648:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	bfd5      	itete	le
 800b650:	460a      	movle	r2, r1
 800b652:	462a      	movgt	r2, r5
 800b654:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b658:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b65c:	bfd8      	it	le
 800b65e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b662:	465b      	mov	r3, fp
 800b664:	4602      	mov	r2, r0
 800b666:	4639      	mov	r1, r7
 800b668:	4620      	mov	r0, r4
 800b66a:	f7f5 f85f 	bl	800072c <__aeabi_ddiv>
 800b66e:	b003      	add	sp, #12
 800b670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b674 <__copybits>:
 800b674:	3901      	subs	r1, #1
 800b676:	b570      	push	{r4, r5, r6, lr}
 800b678:	1149      	asrs	r1, r1, #5
 800b67a:	6914      	ldr	r4, [r2, #16]
 800b67c:	3101      	adds	r1, #1
 800b67e:	f102 0314 	add.w	r3, r2, #20
 800b682:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b686:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b68a:	1f05      	subs	r5, r0, #4
 800b68c:	42a3      	cmp	r3, r4
 800b68e:	d30c      	bcc.n	800b6aa <__copybits+0x36>
 800b690:	1aa3      	subs	r3, r4, r2
 800b692:	3b11      	subs	r3, #17
 800b694:	f023 0303 	bic.w	r3, r3, #3
 800b698:	3211      	adds	r2, #17
 800b69a:	42a2      	cmp	r2, r4
 800b69c:	bf88      	it	hi
 800b69e:	2300      	movhi	r3, #0
 800b6a0:	4418      	add	r0, r3
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	4288      	cmp	r0, r1
 800b6a6:	d305      	bcc.n	800b6b4 <__copybits+0x40>
 800b6a8:	bd70      	pop	{r4, r5, r6, pc}
 800b6aa:	f853 6b04 	ldr.w	r6, [r3], #4
 800b6ae:	f845 6f04 	str.w	r6, [r5, #4]!
 800b6b2:	e7eb      	b.n	800b68c <__copybits+0x18>
 800b6b4:	f840 3b04 	str.w	r3, [r0], #4
 800b6b8:	e7f4      	b.n	800b6a4 <__copybits+0x30>

0800b6ba <__any_on>:
 800b6ba:	f100 0214 	add.w	r2, r0, #20
 800b6be:	6900      	ldr	r0, [r0, #16]
 800b6c0:	114b      	asrs	r3, r1, #5
 800b6c2:	4298      	cmp	r0, r3
 800b6c4:	b510      	push	{r4, lr}
 800b6c6:	db11      	blt.n	800b6ec <__any_on+0x32>
 800b6c8:	dd0a      	ble.n	800b6e0 <__any_on+0x26>
 800b6ca:	f011 011f 	ands.w	r1, r1, #31
 800b6ce:	d007      	beq.n	800b6e0 <__any_on+0x26>
 800b6d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b6d4:	fa24 f001 	lsr.w	r0, r4, r1
 800b6d8:	fa00 f101 	lsl.w	r1, r0, r1
 800b6dc:	428c      	cmp	r4, r1
 800b6de:	d10b      	bne.n	800b6f8 <__any_on+0x3e>
 800b6e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d803      	bhi.n	800b6f0 <__any_on+0x36>
 800b6e8:	2000      	movs	r0, #0
 800b6ea:	bd10      	pop	{r4, pc}
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	e7f7      	b.n	800b6e0 <__any_on+0x26>
 800b6f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b6f4:	2900      	cmp	r1, #0
 800b6f6:	d0f5      	beq.n	800b6e4 <__any_on+0x2a>
 800b6f8:	2001      	movs	r0, #1
 800b6fa:	e7f6      	b.n	800b6ea <__any_on+0x30>

0800b6fc <_calloc_r>:
 800b6fc:	b570      	push	{r4, r5, r6, lr}
 800b6fe:	fba1 5402 	umull	r5, r4, r1, r2
 800b702:	b934      	cbnz	r4, 800b712 <_calloc_r+0x16>
 800b704:	4629      	mov	r1, r5
 800b706:	f000 f875 	bl	800b7f4 <_malloc_r>
 800b70a:	4606      	mov	r6, r0
 800b70c:	b928      	cbnz	r0, 800b71a <_calloc_r+0x1e>
 800b70e:	4630      	mov	r0, r6
 800b710:	bd70      	pop	{r4, r5, r6, pc}
 800b712:	220c      	movs	r2, #12
 800b714:	2600      	movs	r6, #0
 800b716:	6002      	str	r2, [r0, #0]
 800b718:	e7f9      	b.n	800b70e <_calloc_r+0x12>
 800b71a:	462a      	mov	r2, r5
 800b71c:	4621      	mov	r1, r4
 800b71e:	f7fc fbf1 	bl	8007f04 <memset>
 800b722:	e7f4      	b.n	800b70e <_calloc_r+0x12>

0800b724 <_free_r>:
 800b724:	b538      	push	{r3, r4, r5, lr}
 800b726:	4605      	mov	r5, r0
 800b728:	2900      	cmp	r1, #0
 800b72a:	d040      	beq.n	800b7ae <_free_r+0x8a>
 800b72c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b730:	1f0c      	subs	r4, r1, #4
 800b732:	2b00      	cmp	r3, #0
 800b734:	bfb8      	it	lt
 800b736:	18e4      	addlt	r4, r4, r3
 800b738:	f000 faae 	bl	800bc98 <__malloc_lock>
 800b73c:	4a1c      	ldr	r2, [pc, #112]	; (800b7b0 <_free_r+0x8c>)
 800b73e:	6813      	ldr	r3, [r2, #0]
 800b740:	b933      	cbnz	r3, 800b750 <_free_r+0x2c>
 800b742:	6063      	str	r3, [r4, #4]
 800b744:	6014      	str	r4, [r2, #0]
 800b746:	4628      	mov	r0, r5
 800b748:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b74c:	f000 baaa 	b.w	800bca4 <__malloc_unlock>
 800b750:	42a3      	cmp	r3, r4
 800b752:	d908      	bls.n	800b766 <_free_r+0x42>
 800b754:	6820      	ldr	r0, [r4, #0]
 800b756:	1821      	adds	r1, r4, r0
 800b758:	428b      	cmp	r3, r1
 800b75a:	bf01      	itttt	eq
 800b75c:	6819      	ldreq	r1, [r3, #0]
 800b75e:	685b      	ldreq	r3, [r3, #4]
 800b760:	1809      	addeq	r1, r1, r0
 800b762:	6021      	streq	r1, [r4, #0]
 800b764:	e7ed      	b.n	800b742 <_free_r+0x1e>
 800b766:	461a      	mov	r2, r3
 800b768:	685b      	ldr	r3, [r3, #4]
 800b76a:	b10b      	cbz	r3, 800b770 <_free_r+0x4c>
 800b76c:	42a3      	cmp	r3, r4
 800b76e:	d9fa      	bls.n	800b766 <_free_r+0x42>
 800b770:	6811      	ldr	r1, [r2, #0]
 800b772:	1850      	adds	r0, r2, r1
 800b774:	42a0      	cmp	r0, r4
 800b776:	d10b      	bne.n	800b790 <_free_r+0x6c>
 800b778:	6820      	ldr	r0, [r4, #0]
 800b77a:	4401      	add	r1, r0
 800b77c:	1850      	adds	r0, r2, r1
 800b77e:	4283      	cmp	r3, r0
 800b780:	6011      	str	r1, [r2, #0]
 800b782:	d1e0      	bne.n	800b746 <_free_r+0x22>
 800b784:	6818      	ldr	r0, [r3, #0]
 800b786:	685b      	ldr	r3, [r3, #4]
 800b788:	4401      	add	r1, r0
 800b78a:	6011      	str	r1, [r2, #0]
 800b78c:	6053      	str	r3, [r2, #4]
 800b78e:	e7da      	b.n	800b746 <_free_r+0x22>
 800b790:	d902      	bls.n	800b798 <_free_r+0x74>
 800b792:	230c      	movs	r3, #12
 800b794:	602b      	str	r3, [r5, #0]
 800b796:	e7d6      	b.n	800b746 <_free_r+0x22>
 800b798:	6820      	ldr	r0, [r4, #0]
 800b79a:	1821      	adds	r1, r4, r0
 800b79c:	428b      	cmp	r3, r1
 800b79e:	bf01      	itttt	eq
 800b7a0:	6819      	ldreq	r1, [r3, #0]
 800b7a2:	685b      	ldreq	r3, [r3, #4]
 800b7a4:	1809      	addeq	r1, r1, r0
 800b7a6:	6021      	streq	r1, [r4, #0]
 800b7a8:	6063      	str	r3, [r4, #4]
 800b7aa:	6054      	str	r4, [r2, #4]
 800b7ac:	e7cb      	b.n	800b746 <_free_r+0x22>
 800b7ae:	bd38      	pop	{r3, r4, r5, pc}
 800b7b0:	200006bc 	.word	0x200006bc

0800b7b4 <sbrk_aligned>:
 800b7b4:	b570      	push	{r4, r5, r6, lr}
 800b7b6:	4e0e      	ldr	r6, [pc, #56]	; (800b7f0 <sbrk_aligned+0x3c>)
 800b7b8:	460c      	mov	r4, r1
 800b7ba:	6831      	ldr	r1, [r6, #0]
 800b7bc:	4605      	mov	r5, r0
 800b7be:	b911      	cbnz	r1, 800b7c6 <sbrk_aligned+0x12>
 800b7c0:	f000 f9ee 	bl	800bba0 <_sbrk_r>
 800b7c4:	6030      	str	r0, [r6, #0]
 800b7c6:	4621      	mov	r1, r4
 800b7c8:	4628      	mov	r0, r5
 800b7ca:	f000 f9e9 	bl	800bba0 <_sbrk_r>
 800b7ce:	1c43      	adds	r3, r0, #1
 800b7d0:	d00a      	beq.n	800b7e8 <sbrk_aligned+0x34>
 800b7d2:	1cc4      	adds	r4, r0, #3
 800b7d4:	f024 0403 	bic.w	r4, r4, #3
 800b7d8:	42a0      	cmp	r0, r4
 800b7da:	d007      	beq.n	800b7ec <sbrk_aligned+0x38>
 800b7dc:	1a21      	subs	r1, r4, r0
 800b7de:	4628      	mov	r0, r5
 800b7e0:	f000 f9de 	bl	800bba0 <_sbrk_r>
 800b7e4:	3001      	adds	r0, #1
 800b7e6:	d101      	bne.n	800b7ec <sbrk_aligned+0x38>
 800b7e8:	f04f 34ff 	mov.w	r4, #4294967295
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	bd70      	pop	{r4, r5, r6, pc}
 800b7f0:	200006c0 	.word	0x200006c0

0800b7f4 <_malloc_r>:
 800b7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f8:	1ccd      	adds	r5, r1, #3
 800b7fa:	f025 0503 	bic.w	r5, r5, #3
 800b7fe:	3508      	adds	r5, #8
 800b800:	2d0c      	cmp	r5, #12
 800b802:	bf38      	it	cc
 800b804:	250c      	movcc	r5, #12
 800b806:	2d00      	cmp	r5, #0
 800b808:	4607      	mov	r7, r0
 800b80a:	db01      	blt.n	800b810 <_malloc_r+0x1c>
 800b80c:	42a9      	cmp	r1, r5
 800b80e:	d905      	bls.n	800b81c <_malloc_r+0x28>
 800b810:	230c      	movs	r3, #12
 800b812:	2600      	movs	r6, #0
 800b814:	603b      	str	r3, [r7, #0]
 800b816:	4630      	mov	r0, r6
 800b818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b81c:	4e2e      	ldr	r6, [pc, #184]	; (800b8d8 <_malloc_r+0xe4>)
 800b81e:	f000 fa3b 	bl	800bc98 <__malloc_lock>
 800b822:	6833      	ldr	r3, [r6, #0]
 800b824:	461c      	mov	r4, r3
 800b826:	bb34      	cbnz	r4, 800b876 <_malloc_r+0x82>
 800b828:	4629      	mov	r1, r5
 800b82a:	4638      	mov	r0, r7
 800b82c:	f7ff ffc2 	bl	800b7b4 <sbrk_aligned>
 800b830:	1c43      	adds	r3, r0, #1
 800b832:	4604      	mov	r4, r0
 800b834:	d14d      	bne.n	800b8d2 <_malloc_r+0xde>
 800b836:	6834      	ldr	r4, [r6, #0]
 800b838:	4626      	mov	r6, r4
 800b83a:	2e00      	cmp	r6, #0
 800b83c:	d140      	bne.n	800b8c0 <_malloc_r+0xcc>
 800b83e:	6823      	ldr	r3, [r4, #0]
 800b840:	4631      	mov	r1, r6
 800b842:	4638      	mov	r0, r7
 800b844:	eb04 0803 	add.w	r8, r4, r3
 800b848:	f000 f9aa 	bl	800bba0 <_sbrk_r>
 800b84c:	4580      	cmp	r8, r0
 800b84e:	d13a      	bne.n	800b8c6 <_malloc_r+0xd2>
 800b850:	6821      	ldr	r1, [r4, #0]
 800b852:	3503      	adds	r5, #3
 800b854:	1a6d      	subs	r5, r5, r1
 800b856:	f025 0503 	bic.w	r5, r5, #3
 800b85a:	3508      	adds	r5, #8
 800b85c:	2d0c      	cmp	r5, #12
 800b85e:	bf38      	it	cc
 800b860:	250c      	movcc	r5, #12
 800b862:	4638      	mov	r0, r7
 800b864:	4629      	mov	r1, r5
 800b866:	f7ff ffa5 	bl	800b7b4 <sbrk_aligned>
 800b86a:	3001      	adds	r0, #1
 800b86c:	d02b      	beq.n	800b8c6 <_malloc_r+0xd2>
 800b86e:	6823      	ldr	r3, [r4, #0]
 800b870:	442b      	add	r3, r5
 800b872:	6023      	str	r3, [r4, #0]
 800b874:	e00e      	b.n	800b894 <_malloc_r+0xa0>
 800b876:	6822      	ldr	r2, [r4, #0]
 800b878:	1b52      	subs	r2, r2, r5
 800b87a:	d41e      	bmi.n	800b8ba <_malloc_r+0xc6>
 800b87c:	2a0b      	cmp	r2, #11
 800b87e:	d916      	bls.n	800b8ae <_malloc_r+0xba>
 800b880:	1961      	adds	r1, r4, r5
 800b882:	42a3      	cmp	r3, r4
 800b884:	6025      	str	r5, [r4, #0]
 800b886:	bf18      	it	ne
 800b888:	6059      	strne	r1, [r3, #4]
 800b88a:	6863      	ldr	r3, [r4, #4]
 800b88c:	bf08      	it	eq
 800b88e:	6031      	streq	r1, [r6, #0]
 800b890:	5162      	str	r2, [r4, r5]
 800b892:	604b      	str	r3, [r1, #4]
 800b894:	4638      	mov	r0, r7
 800b896:	f104 060b 	add.w	r6, r4, #11
 800b89a:	f000 fa03 	bl	800bca4 <__malloc_unlock>
 800b89e:	f026 0607 	bic.w	r6, r6, #7
 800b8a2:	1d23      	adds	r3, r4, #4
 800b8a4:	1af2      	subs	r2, r6, r3
 800b8a6:	d0b6      	beq.n	800b816 <_malloc_r+0x22>
 800b8a8:	1b9b      	subs	r3, r3, r6
 800b8aa:	50a3      	str	r3, [r4, r2]
 800b8ac:	e7b3      	b.n	800b816 <_malloc_r+0x22>
 800b8ae:	6862      	ldr	r2, [r4, #4]
 800b8b0:	42a3      	cmp	r3, r4
 800b8b2:	bf0c      	ite	eq
 800b8b4:	6032      	streq	r2, [r6, #0]
 800b8b6:	605a      	strne	r2, [r3, #4]
 800b8b8:	e7ec      	b.n	800b894 <_malloc_r+0xa0>
 800b8ba:	4623      	mov	r3, r4
 800b8bc:	6864      	ldr	r4, [r4, #4]
 800b8be:	e7b2      	b.n	800b826 <_malloc_r+0x32>
 800b8c0:	4634      	mov	r4, r6
 800b8c2:	6876      	ldr	r6, [r6, #4]
 800b8c4:	e7b9      	b.n	800b83a <_malloc_r+0x46>
 800b8c6:	230c      	movs	r3, #12
 800b8c8:	4638      	mov	r0, r7
 800b8ca:	603b      	str	r3, [r7, #0]
 800b8cc:	f000 f9ea 	bl	800bca4 <__malloc_unlock>
 800b8d0:	e7a1      	b.n	800b816 <_malloc_r+0x22>
 800b8d2:	6025      	str	r5, [r4, #0]
 800b8d4:	e7de      	b.n	800b894 <_malloc_r+0xa0>
 800b8d6:	bf00      	nop
 800b8d8:	200006bc 	.word	0x200006bc

0800b8dc <__ssputs_r>:
 800b8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8e0:	688e      	ldr	r6, [r1, #8]
 800b8e2:	4682      	mov	sl, r0
 800b8e4:	429e      	cmp	r6, r3
 800b8e6:	460c      	mov	r4, r1
 800b8e8:	4690      	mov	r8, r2
 800b8ea:	461f      	mov	r7, r3
 800b8ec:	d838      	bhi.n	800b960 <__ssputs_r+0x84>
 800b8ee:	898a      	ldrh	r2, [r1, #12]
 800b8f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b8f4:	d032      	beq.n	800b95c <__ssputs_r+0x80>
 800b8f6:	6825      	ldr	r5, [r4, #0]
 800b8f8:	6909      	ldr	r1, [r1, #16]
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	eba5 0901 	sub.w	r9, r5, r1
 800b900:	6965      	ldr	r5, [r4, #20]
 800b902:	444b      	add	r3, r9
 800b904:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b908:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b90c:	106d      	asrs	r5, r5, #1
 800b90e:	429d      	cmp	r5, r3
 800b910:	bf38      	it	cc
 800b912:	461d      	movcc	r5, r3
 800b914:	0553      	lsls	r3, r2, #21
 800b916:	d531      	bpl.n	800b97c <__ssputs_r+0xa0>
 800b918:	4629      	mov	r1, r5
 800b91a:	f7ff ff6b 	bl	800b7f4 <_malloc_r>
 800b91e:	4606      	mov	r6, r0
 800b920:	b950      	cbnz	r0, 800b938 <__ssputs_r+0x5c>
 800b922:	230c      	movs	r3, #12
 800b924:	f04f 30ff 	mov.w	r0, #4294967295
 800b928:	f8ca 3000 	str.w	r3, [sl]
 800b92c:	89a3      	ldrh	r3, [r4, #12]
 800b92e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b932:	81a3      	strh	r3, [r4, #12]
 800b934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b938:	464a      	mov	r2, r9
 800b93a:	6921      	ldr	r1, [r4, #16]
 800b93c:	f7ff fa18 	bl	800ad70 <memcpy>
 800b940:	89a3      	ldrh	r3, [r4, #12]
 800b942:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b94a:	81a3      	strh	r3, [r4, #12]
 800b94c:	6126      	str	r6, [r4, #16]
 800b94e:	444e      	add	r6, r9
 800b950:	6026      	str	r6, [r4, #0]
 800b952:	463e      	mov	r6, r7
 800b954:	6165      	str	r5, [r4, #20]
 800b956:	eba5 0509 	sub.w	r5, r5, r9
 800b95a:	60a5      	str	r5, [r4, #8]
 800b95c:	42be      	cmp	r6, r7
 800b95e:	d900      	bls.n	800b962 <__ssputs_r+0x86>
 800b960:	463e      	mov	r6, r7
 800b962:	4632      	mov	r2, r6
 800b964:	4641      	mov	r1, r8
 800b966:	6820      	ldr	r0, [r4, #0]
 800b968:	f000 f97c 	bl	800bc64 <memmove>
 800b96c:	68a3      	ldr	r3, [r4, #8]
 800b96e:	2000      	movs	r0, #0
 800b970:	1b9b      	subs	r3, r3, r6
 800b972:	60a3      	str	r3, [r4, #8]
 800b974:	6823      	ldr	r3, [r4, #0]
 800b976:	4433      	add	r3, r6
 800b978:	6023      	str	r3, [r4, #0]
 800b97a:	e7db      	b.n	800b934 <__ssputs_r+0x58>
 800b97c:	462a      	mov	r2, r5
 800b97e:	f000 f997 	bl	800bcb0 <_realloc_r>
 800b982:	4606      	mov	r6, r0
 800b984:	2800      	cmp	r0, #0
 800b986:	d1e1      	bne.n	800b94c <__ssputs_r+0x70>
 800b988:	4650      	mov	r0, sl
 800b98a:	6921      	ldr	r1, [r4, #16]
 800b98c:	f7ff feca 	bl	800b724 <_free_r>
 800b990:	e7c7      	b.n	800b922 <__ssputs_r+0x46>
	...

0800b994 <_svfiprintf_r>:
 800b994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b998:	4698      	mov	r8, r3
 800b99a:	898b      	ldrh	r3, [r1, #12]
 800b99c:	4607      	mov	r7, r0
 800b99e:	061b      	lsls	r3, r3, #24
 800b9a0:	460d      	mov	r5, r1
 800b9a2:	4614      	mov	r4, r2
 800b9a4:	b09d      	sub	sp, #116	; 0x74
 800b9a6:	d50e      	bpl.n	800b9c6 <_svfiprintf_r+0x32>
 800b9a8:	690b      	ldr	r3, [r1, #16]
 800b9aa:	b963      	cbnz	r3, 800b9c6 <_svfiprintf_r+0x32>
 800b9ac:	2140      	movs	r1, #64	; 0x40
 800b9ae:	f7ff ff21 	bl	800b7f4 <_malloc_r>
 800b9b2:	6028      	str	r0, [r5, #0]
 800b9b4:	6128      	str	r0, [r5, #16]
 800b9b6:	b920      	cbnz	r0, 800b9c2 <_svfiprintf_r+0x2e>
 800b9b8:	230c      	movs	r3, #12
 800b9ba:	603b      	str	r3, [r7, #0]
 800b9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c0:	e0d1      	b.n	800bb66 <_svfiprintf_r+0x1d2>
 800b9c2:	2340      	movs	r3, #64	; 0x40
 800b9c4:	616b      	str	r3, [r5, #20]
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	9309      	str	r3, [sp, #36]	; 0x24
 800b9ca:	2320      	movs	r3, #32
 800b9cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9d0:	2330      	movs	r3, #48	; 0x30
 800b9d2:	f04f 0901 	mov.w	r9, #1
 800b9d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bb80 <_svfiprintf_r+0x1ec>
 800b9de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9e2:	4623      	mov	r3, r4
 800b9e4:	469a      	mov	sl, r3
 800b9e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9ea:	b10a      	cbz	r2, 800b9f0 <_svfiprintf_r+0x5c>
 800b9ec:	2a25      	cmp	r2, #37	; 0x25
 800b9ee:	d1f9      	bne.n	800b9e4 <_svfiprintf_r+0x50>
 800b9f0:	ebba 0b04 	subs.w	fp, sl, r4
 800b9f4:	d00b      	beq.n	800ba0e <_svfiprintf_r+0x7a>
 800b9f6:	465b      	mov	r3, fp
 800b9f8:	4622      	mov	r2, r4
 800b9fa:	4629      	mov	r1, r5
 800b9fc:	4638      	mov	r0, r7
 800b9fe:	f7ff ff6d 	bl	800b8dc <__ssputs_r>
 800ba02:	3001      	adds	r0, #1
 800ba04:	f000 80aa 	beq.w	800bb5c <_svfiprintf_r+0x1c8>
 800ba08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba0a:	445a      	add	r2, fp
 800ba0c:	9209      	str	r2, [sp, #36]	; 0x24
 800ba0e:	f89a 3000 	ldrb.w	r3, [sl]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	f000 80a2 	beq.w	800bb5c <_svfiprintf_r+0x1c8>
 800ba18:	2300      	movs	r3, #0
 800ba1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ba1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba22:	f10a 0a01 	add.w	sl, sl, #1
 800ba26:	9304      	str	r3, [sp, #16]
 800ba28:	9307      	str	r3, [sp, #28]
 800ba2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba2e:	931a      	str	r3, [sp, #104]	; 0x68
 800ba30:	4654      	mov	r4, sl
 800ba32:	2205      	movs	r2, #5
 800ba34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba38:	4851      	ldr	r0, [pc, #324]	; (800bb80 <_svfiprintf_r+0x1ec>)
 800ba3a:	f7ff f98b 	bl	800ad54 <memchr>
 800ba3e:	9a04      	ldr	r2, [sp, #16]
 800ba40:	b9d8      	cbnz	r0, 800ba7a <_svfiprintf_r+0xe6>
 800ba42:	06d0      	lsls	r0, r2, #27
 800ba44:	bf44      	itt	mi
 800ba46:	2320      	movmi	r3, #32
 800ba48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba4c:	0711      	lsls	r1, r2, #28
 800ba4e:	bf44      	itt	mi
 800ba50:	232b      	movmi	r3, #43	; 0x2b
 800ba52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba56:	f89a 3000 	ldrb.w	r3, [sl]
 800ba5a:	2b2a      	cmp	r3, #42	; 0x2a
 800ba5c:	d015      	beq.n	800ba8a <_svfiprintf_r+0xf6>
 800ba5e:	4654      	mov	r4, sl
 800ba60:	2000      	movs	r0, #0
 800ba62:	f04f 0c0a 	mov.w	ip, #10
 800ba66:	9a07      	ldr	r2, [sp, #28]
 800ba68:	4621      	mov	r1, r4
 800ba6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba6e:	3b30      	subs	r3, #48	; 0x30
 800ba70:	2b09      	cmp	r3, #9
 800ba72:	d94e      	bls.n	800bb12 <_svfiprintf_r+0x17e>
 800ba74:	b1b0      	cbz	r0, 800baa4 <_svfiprintf_r+0x110>
 800ba76:	9207      	str	r2, [sp, #28]
 800ba78:	e014      	b.n	800baa4 <_svfiprintf_r+0x110>
 800ba7a:	eba0 0308 	sub.w	r3, r0, r8
 800ba7e:	fa09 f303 	lsl.w	r3, r9, r3
 800ba82:	4313      	orrs	r3, r2
 800ba84:	46a2      	mov	sl, r4
 800ba86:	9304      	str	r3, [sp, #16]
 800ba88:	e7d2      	b.n	800ba30 <_svfiprintf_r+0x9c>
 800ba8a:	9b03      	ldr	r3, [sp, #12]
 800ba8c:	1d19      	adds	r1, r3, #4
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	9103      	str	r1, [sp, #12]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	bfbb      	ittet	lt
 800ba96:	425b      	neglt	r3, r3
 800ba98:	f042 0202 	orrlt.w	r2, r2, #2
 800ba9c:	9307      	strge	r3, [sp, #28]
 800ba9e:	9307      	strlt	r3, [sp, #28]
 800baa0:	bfb8      	it	lt
 800baa2:	9204      	strlt	r2, [sp, #16]
 800baa4:	7823      	ldrb	r3, [r4, #0]
 800baa6:	2b2e      	cmp	r3, #46	; 0x2e
 800baa8:	d10c      	bne.n	800bac4 <_svfiprintf_r+0x130>
 800baaa:	7863      	ldrb	r3, [r4, #1]
 800baac:	2b2a      	cmp	r3, #42	; 0x2a
 800baae:	d135      	bne.n	800bb1c <_svfiprintf_r+0x188>
 800bab0:	9b03      	ldr	r3, [sp, #12]
 800bab2:	3402      	adds	r4, #2
 800bab4:	1d1a      	adds	r2, r3, #4
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	9203      	str	r2, [sp, #12]
 800baba:	2b00      	cmp	r3, #0
 800babc:	bfb8      	it	lt
 800babe:	f04f 33ff 	movlt.w	r3, #4294967295
 800bac2:	9305      	str	r3, [sp, #20]
 800bac4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800bb84 <_svfiprintf_r+0x1f0>
 800bac8:	2203      	movs	r2, #3
 800baca:	4650      	mov	r0, sl
 800bacc:	7821      	ldrb	r1, [r4, #0]
 800bace:	f7ff f941 	bl	800ad54 <memchr>
 800bad2:	b140      	cbz	r0, 800bae6 <_svfiprintf_r+0x152>
 800bad4:	2340      	movs	r3, #64	; 0x40
 800bad6:	eba0 000a 	sub.w	r0, r0, sl
 800bada:	fa03 f000 	lsl.w	r0, r3, r0
 800bade:	9b04      	ldr	r3, [sp, #16]
 800bae0:	3401      	adds	r4, #1
 800bae2:	4303      	orrs	r3, r0
 800bae4:	9304      	str	r3, [sp, #16]
 800bae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baea:	2206      	movs	r2, #6
 800baec:	4826      	ldr	r0, [pc, #152]	; (800bb88 <_svfiprintf_r+0x1f4>)
 800baee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800baf2:	f7ff f92f 	bl	800ad54 <memchr>
 800baf6:	2800      	cmp	r0, #0
 800baf8:	d038      	beq.n	800bb6c <_svfiprintf_r+0x1d8>
 800bafa:	4b24      	ldr	r3, [pc, #144]	; (800bb8c <_svfiprintf_r+0x1f8>)
 800bafc:	bb1b      	cbnz	r3, 800bb46 <_svfiprintf_r+0x1b2>
 800bafe:	9b03      	ldr	r3, [sp, #12]
 800bb00:	3307      	adds	r3, #7
 800bb02:	f023 0307 	bic.w	r3, r3, #7
 800bb06:	3308      	adds	r3, #8
 800bb08:	9303      	str	r3, [sp, #12]
 800bb0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb0c:	4433      	add	r3, r6
 800bb0e:	9309      	str	r3, [sp, #36]	; 0x24
 800bb10:	e767      	b.n	800b9e2 <_svfiprintf_r+0x4e>
 800bb12:	460c      	mov	r4, r1
 800bb14:	2001      	movs	r0, #1
 800bb16:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb1a:	e7a5      	b.n	800ba68 <_svfiprintf_r+0xd4>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	f04f 0c0a 	mov.w	ip, #10
 800bb22:	4619      	mov	r1, r3
 800bb24:	3401      	adds	r4, #1
 800bb26:	9305      	str	r3, [sp, #20]
 800bb28:	4620      	mov	r0, r4
 800bb2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb2e:	3a30      	subs	r2, #48	; 0x30
 800bb30:	2a09      	cmp	r2, #9
 800bb32:	d903      	bls.n	800bb3c <_svfiprintf_r+0x1a8>
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d0c5      	beq.n	800bac4 <_svfiprintf_r+0x130>
 800bb38:	9105      	str	r1, [sp, #20]
 800bb3a:	e7c3      	b.n	800bac4 <_svfiprintf_r+0x130>
 800bb3c:	4604      	mov	r4, r0
 800bb3e:	2301      	movs	r3, #1
 800bb40:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb44:	e7f0      	b.n	800bb28 <_svfiprintf_r+0x194>
 800bb46:	ab03      	add	r3, sp, #12
 800bb48:	9300      	str	r3, [sp, #0]
 800bb4a:	462a      	mov	r2, r5
 800bb4c:	4638      	mov	r0, r7
 800bb4e:	4b10      	ldr	r3, [pc, #64]	; (800bb90 <_svfiprintf_r+0x1fc>)
 800bb50:	a904      	add	r1, sp, #16
 800bb52:	f7fc fa7d 	bl	8008050 <_printf_float>
 800bb56:	1c42      	adds	r2, r0, #1
 800bb58:	4606      	mov	r6, r0
 800bb5a:	d1d6      	bne.n	800bb0a <_svfiprintf_r+0x176>
 800bb5c:	89ab      	ldrh	r3, [r5, #12]
 800bb5e:	065b      	lsls	r3, r3, #25
 800bb60:	f53f af2c 	bmi.w	800b9bc <_svfiprintf_r+0x28>
 800bb64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb66:	b01d      	add	sp, #116	; 0x74
 800bb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb6c:	ab03      	add	r3, sp, #12
 800bb6e:	9300      	str	r3, [sp, #0]
 800bb70:	462a      	mov	r2, r5
 800bb72:	4638      	mov	r0, r7
 800bb74:	4b06      	ldr	r3, [pc, #24]	; (800bb90 <_svfiprintf_r+0x1fc>)
 800bb76:	a904      	add	r1, sp, #16
 800bb78:	f7fc fd06 	bl	8008588 <_printf_i>
 800bb7c:	e7eb      	b.n	800bb56 <_svfiprintf_r+0x1c2>
 800bb7e:	bf00      	nop
 800bb80:	0800d4fc 	.word	0x0800d4fc
 800bb84:	0800d502 	.word	0x0800d502
 800bb88:	0800d506 	.word	0x0800d506
 800bb8c:	08008051 	.word	0x08008051
 800bb90:	0800b8dd 	.word	0x0800b8dd

0800bb94 <nan>:
 800bb94:	2000      	movs	r0, #0
 800bb96:	4901      	ldr	r1, [pc, #4]	; (800bb9c <nan+0x8>)
 800bb98:	4770      	bx	lr
 800bb9a:	bf00      	nop
 800bb9c:	7ff80000 	.word	0x7ff80000

0800bba0 <_sbrk_r>:
 800bba0:	b538      	push	{r3, r4, r5, lr}
 800bba2:	2300      	movs	r3, #0
 800bba4:	4d05      	ldr	r5, [pc, #20]	; (800bbbc <_sbrk_r+0x1c>)
 800bba6:	4604      	mov	r4, r0
 800bba8:	4608      	mov	r0, r1
 800bbaa:	602b      	str	r3, [r5, #0]
 800bbac:	f7f8 fffa 	bl	8004ba4 <_sbrk>
 800bbb0:	1c43      	adds	r3, r0, #1
 800bbb2:	d102      	bne.n	800bbba <_sbrk_r+0x1a>
 800bbb4:	682b      	ldr	r3, [r5, #0]
 800bbb6:	b103      	cbz	r3, 800bbba <_sbrk_r+0x1a>
 800bbb8:	6023      	str	r3, [r4, #0]
 800bbba:	bd38      	pop	{r3, r4, r5, pc}
 800bbbc:	200006c4 	.word	0x200006c4

0800bbc0 <strncmp>:
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	b510      	push	{r4, lr}
 800bbc4:	b172      	cbz	r2, 800bbe4 <strncmp+0x24>
 800bbc6:	3901      	subs	r1, #1
 800bbc8:	1884      	adds	r4, r0, r2
 800bbca:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bbce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bbd2:	4290      	cmp	r0, r2
 800bbd4:	d101      	bne.n	800bbda <strncmp+0x1a>
 800bbd6:	42a3      	cmp	r3, r4
 800bbd8:	d101      	bne.n	800bbde <strncmp+0x1e>
 800bbda:	1a80      	subs	r0, r0, r2
 800bbdc:	bd10      	pop	{r4, pc}
 800bbde:	2800      	cmp	r0, #0
 800bbe0:	d1f3      	bne.n	800bbca <strncmp+0xa>
 800bbe2:	e7fa      	b.n	800bbda <strncmp+0x1a>
 800bbe4:	4610      	mov	r0, r2
 800bbe6:	e7f9      	b.n	800bbdc <strncmp+0x1c>

0800bbe8 <__ascii_wctomb>:
 800bbe8:	4603      	mov	r3, r0
 800bbea:	4608      	mov	r0, r1
 800bbec:	b141      	cbz	r1, 800bc00 <__ascii_wctomb+0x18>
 800bbee:	2aff      	cmp	r2, #255	; 0xff
 800bbf0:	d904      	bls.n	800bbfc <__ascii_wctomb+0x14>
 800bbf2:	228a      	movs	r2, #138	; 0x8a
 800bbf4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf8:	601a      	str	r2, [r3, #0]
 800bbfa:	4770      	bx	lr
 800bbfc:	2001      	movs	r0, #1
 800bbfe:	700a      	strb	r2, [r1, #0]
 800bc00:	4770      	bx	lr
	...

0800bc04 <__assert_func>:
 800bc04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc06:	4614      	mov	r4, r2
 800bc08:	461a      	mov	r2, r3
 800bc0a:	4b09      	ldr	r3, [pc, #36]	; (800bc30 <__assert_func+0x2c>)
 800bc0c:	4605      	mov	r5, r0
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	68d8      	ldr	r0, [r3, #12]
 800bc12:	b14c      	cbz	r4, 800bc28 <__assert_func+0x24>
 800bc14:	4b07      	ldr	r3, [pc, #28]	; (800bc34 <__assert_func+0x30>)
 800bc16:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc1a:	9100      	str	r1, [sp, #0]
 800bc1c:	462b      	mov	r3, r5
 800bc1e:	4906      	ldr	r1, [pc, #24]	; (800bc38 <__assert_func+0x34>)
 800bc20:	f000 f80e 	bl	800bc40 <fiprintf>
 800bc24:	f000 fa8a 	bl	800c13c <abort>
 800bc28:	4b04      	ldr	r3, [pc, #16]	; (800bc3c <__assert_func+0x38>)
 800bc2a:	461c      	mov	r4, r3
 800bc2c:	e7f3      	b.n	800bc16 <__assert_func+0x12>
 800bc2e:	bf00      	nop
 800bc30:	200000a0 	.word	0x200000a0
 800bc34:	0800d50d 	.word	0x0800d50d
 800bc38:	0800d51a 	.word	0x0800d51a
 800bc3c:	0800d548 	.word	0x0800d548

0800bc40 <fiprintf>:
 800bc40:	b40e      	push	{r1, r2, r3}
 800bc42:	b503      	push	{r0, r1, lr}
 800bc44:	4601      	mov	r1, r0
 800bc46:	ab03      	add	r3, sp, #12
 800bc48:	4805      	ldr	r0, [pc, #20]	; (800bc60 <fiprintf+0x20>)
 800bc4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc4e:	6800      	ldr	r0, [r0, #0]
 800bc50:	9301      	str	r3, [sp, #4]
 800bc52:	f000 f883 	bl	800bd5c <_vfiprintf_r>
 800bc56:	b002      	add	sp, #8
 800bc58:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc5c:	b003      	add	sp, #12
 800bc5e:	4770      	bx	lr
 800bc60:	200000a0 	.word	0x200000a0

0800bc64 <memmove>:
 800bc64:	4288      	cmp	r0, r1
 800bc66:	b510      	push	{r4, lr}
 800bc68:	eb01 0402 	add.w	r4, r1, r2
 800bc6c:	d902      	bls.n	800bc74 <memmove+0x10>
 800bc6e:	4284      	cmp	r4, r0
 800bc70:	4623      	mov	r3, r4
 800bc72:	d807      	bhi.n	800bc84 <memmove+0x20>
 800bc74:	1e43      	subs	r3, r0, #1
 800bc76:	42a1      	cmp	r1, r4
 800bc78:	d008      	beq.n	800bc8c <memmove+0x28>
 800bc7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc82:	e7f8      	b.n	800bc76 <memmove+0x12>
 800bc84:	4601      	mov	r1, r0
 800bc86:	4402      	add	r2, r0
 800bc88:	428a      	cmp	r2, r1
 800bc8a:	d100      	bne.n	800bc8e <memmove+0x2a>
 800bc8c:	bd10      	pop	{r4, pc}
 800bc8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc96:	e7f7      	b.n	800bc88 <memmove+0x24>

0800bc98 <__malloc_lock>:
 800bc98:	4801      	ldr	r0, [pc, #4]	; (800bca0 <__malloc_lock+0x8>)
 800bc9a:	f000 bc0b 	b.w	800c4b4 <__retarget_lock_acquire_recursive>
 800bc9e:	bf00      	nop
 800bca0:	200006c8 	.word	0x200006c8

0800bca4 <__malloc_unlock>:
 800bca4:	4801      	ldr	r0, [pc, #4]	; (800bcac <__malloc_unlock+0x8>)
 800bca6:	f000 bc06 	b.w	800c4b6 <__retarget_lock_release_recursive>
 800bcaa:	bf00      	nop
 800bcac:	200006c8 	.word	0x200006c8

0800bcb0 <_realloc_r>:
 800bcb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb4:	4680      	mov	r8, r0
 800bcb6:	4614      	mov	r4, r2
 800bcb8:	460e      	mov	r6, r1
 800bcba:	b921      	cbnz	r1, 800bcc6 <_realloc_r+0x16>
 800bcbc:	4611      	mov	r1, r2
 800bcbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcc2:	f7ff bd97 	b.w	800b7f4 <_malloc_r>
 800bcc6:	b92a      	cbnz	r2, 800bcd4 <_realloc_r+0x24>
 800bcc8:	f7ff fd2c 	bl	800b724 <_free_r>
 800bccc:	4625      	mov	r5, r4
 800bcce:	4628      	mov	r0, r5
 800bcd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcd4:	f000 fc56 	bl	800c584 <_malloc_usable_size_r>
 800bcd8:	4284      	cmp	r4, r0
 800bcda:	4607      	mov	r7, r0
 800bcdc:	d802      	bhi.n	800bce4 <_realloc_r+0x34>
 800bcde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bce2:	d812      	bhi.n	800bd0a <_realloc_r+0x5a>
 800bce4:	4621      	mov	r1, r4
 800bce6:	4640      	mov	r0, r8
 800bce8:	f7ff fd84 	bl	800b7f4 <_malloc_r>
 800bcec:	4605      	mov	r5, r0
 800bcee:	2800      	cmp	r0, #0
 800bcf0:	d0ed      	beq.n	800bcce <_realloc_r+0x1e>
 800bcf2:	42bc      	cmp	r4, r7
 800bcf4:	4622      	mov	r2, r4
 800bcf6:	4631      	mov	r1, r6
 800bcf8:	bf28      	it	cs
 800bcfa:	463a      	movcs	r2, r7
 800bcfc:	f7ff f838 	bl	800ad70 <memcpy>
 800bd00:	4631      	mov	r1, r6
 800bd02:	4640      	mov	r0, r8
 800bd04:	f7ff fd0e 	bl	800b724 <_free_r>
 800bd08:	e7e1      	b.n	800bcce <_realloc_r+0x1e>
 800bd0a:	4635      	mov	r5, r6
 800bd0c:	e7df      	b.n	800bcce <_realloc_r+0x1e>

0800bd0e <__sfputc_r>:
 800bd0e:	6893      	ldr	r3, [r2, #8]
 800bd10:	b410      	push	{r4}
 800bd12:	3b01      	subs	r3, #1
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	6093      	str	r3, [r2, #8]
 800bd18:	da07      	bge.n	800bd2a <__sfputc_r+0x1c>
 800bd1a:	6994      	ldr	r4, [r2, #24]
 800bd1c:	42a3      	cmp	r3, r4
 800bd1e:	db01      	blt.n	800bd24 <__sfputc_r+0x16>
 800bd20:	290a      	cmp	r1, #10
 800bd22:	d102      	bne.n	800bd2a <__sfputc_r+0x1c>
 800bd24:	bc10      	pop	{r4}
 800bd26:	f000 b949 	b.w	800bfbc <__swbuf_r>
 800bd2a:	6813      	ldr	r3, [r2, #0]
 800bd2c:	1c58      	adds	r0, r3, #1
 800bd2e:	6010      	str	r0, [r2, #0]
 800bd30:	7019      	strb	r1, [r3, #0]
 800bd32:	4608      	mov	r0, r1
 800bd34:	bc10      	pop	{r4}
 800bd36:	4770      	bx	lr

0800bd38 <__sfputs_r>:
 800bd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd3a:	4606      	mov	r6, r0
 800bd3c:	460f      	mov	r7, r1
 800bd3e:	4614      	mov	r4, r2
 800bd40:	18d5      	adds	r5, r2, r3
 800bd42:	42ac      	cmp	r4, r5
 800bd44:	d101      	bne.n	800bd4a <__sfputs_r+0x12>
 800bd46:	2000      	movs	r0, #0
 800bd48:	e007      	b.n	800bd5a <__sfputs_r+0x22>
 800bd4a:	463a      	mov	r2, r7
 800bd4c:	4630      	mov	r0, r6
 800bd4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd52:	f7ff ffdc 	bl	800bd0e <__sfputc_r>
 800bd56:	1c43      	adds	r3, r0, #1
 800bd58:	d1f3      	bne.n	800bd42 <__sfputs_r+0xa>
 800bd5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd5c <_vfiprintf_r>:
 800bd5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd60:	460d      	mov	r5, r1
 800bd62:	4614      	mov	r4, r2
 800bd64:	4698      	mov	r8, r3
 800bd66:	4606      	mov	r6, r0
 800bd68:	b09d      	sub	sp, #116	; 0x74
 800bd6a:	b118      	cbz	r0, 800bd74 <_vfiprintf_r+0x18>
 800bd6c:	6983      	ldr	r3, [r0, #24]
 800bd6e:	b90b      	cbnz	r3, 800bd74 <_vfiprintf_r+0x18>
 800bd70:	f000 fb02 	bl	800c378 <__sinit>
 800bd74:	4b89      	ldr	r3, [pc, #548]	; (800bf9c <_vfiprintf_r+0x240>)
 800bd76:	429d      	cmp	r5, r3
 800bd78:	d11b      	bne.n	800bdb2 <_vfiprintf_r+0x56>
 800bd7a:	6875      	ldr	r5, [r6, #4]
 800bd7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd7e:	07d9      	lsls	r1, r3, #31
 800bd80:	d405      	bmi.n	800bd8e <_vfiprintf_r+0x32>
 800bd82:	89ab      	ldrh	r3, [r5, #12]
 800bd84:	059a      	lsls	r2, r3, #22
 800bd86:	d402      	bmi.n	800bd8e <_vfiprintf_r+0x32>
 800bd88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd8a:	f000 fb93 	bl	800c4b4 <__retarget_lock_acquire_recursive>
 800bd8e:	89ab      	ldrh	r3, [r5, #12]
 800bd90:	071b      	lsls	r3, r3, #28
 800bd92:	d501      	bpl.n	800bd98 <_vfiprintf_r+0x3c>
 800bd94:	692b      	ldr	r3, [r5, #16]
 800bd96:	b9eb      	cbnz	r3, 800bdd4 <_vfiprintf_r+0x78>
 800bd98:	4629      	mov	r1, r5
 800bd9a:	4630      	mov	r0, r6
 800bd9c:	f000 f960 	bl	800c060 <__swsetup_r>
 800bda0:	b1c0      	cbz	r0, 800bdd4 <_vfiprintf_r+0x78>
 800bda2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bda4:	07dc      	lsls	r4, r3, #31
 800bda6:	d50e      	bpl.n	800bdc6 <_vfiprintf_r+0x6a>
 800bda8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdac:	b01d      	add	sp, #116	; 0x74
 800bdae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdb2:	4b7b      	ldr	r3, [pc, #492]	; (800bfa0 <_vfiprintf_r+0x244>)
 800bdb4:	429d      	cmp	r5, r3
 800bdb6:	d101      	bne.n	800bdbc <_vfiprintf_r+0x60>
 800bdb8:	68b5      	ldr	r5, [r6, #8]
 800bdba:	e7df      	b.n	800bd7c <_vfiprintf_r+0x20>
 800bdbc:	4b79      	ldr	r3, [pc, #484]	; (800bfa4 <_vfiprintf_r+0x248>)
 800bdbe:	429d      	cmp	r5, r3
 800bdc0:	bf08      	it	eq
 800bdc2:	68f5      	ldreq	r5, [r6, #12]
 800bdc4:	e7da      	b.n	800bd7c <_vfiprintf_r+0x20>
 800bdc6:	89ab      	ldrh	r3, [r5, #12]
 800bdc8:	0598      	lsls	r0, r3, #22
 800bdca:	d4ed      	bmi.n	800bda8 <_vfiprintf_r+0x4c>
 800bdcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdce:	f000 fb72 	bl	800c4b6 <__retarget_lock_release_recursive>
 800bdd2:	e7e9      	b.n	800bda8 <_vfiprintf_r+0x4c>
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	9309      	str	r3, [sp, #36]	; 0x24
 800bdd8:	2320      	movs	r3, #32
 800bdda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdde:	2330      	movs	r3, #48	; 0x30
 800bde0:	f04f 0901 	mov.w	r9, #1
 800bde4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bde8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800bfa8 <_vfiprintf_r+0x24c>
 800bdec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdf0:	4623      	mov	r3, r4
 800bdf2:	469a      	mov	sl, r3
 800bdf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdf8:	b10a      	cbz	r2, 800bdfe <_vfiprintf_r+0xa2>
 800bdfa:	2a25      	cmp	r2, #37	; 0x25
 800bdfc:	d1f9      	bne.n	800bdf2 <_vfiprintf_r+0x96>
 800bdfe:	ebba 0b04 	subs.w	fp, sl, r4
 800be02:	d00b      	beq.n	800be1c <_vfiprintf_r+0xc0>
 800be04:	465b      	mov	r3, fp
 800be06:	4622      	mov	r2, r4
 800be08:	4629      	mov	r1, r5
 800be0a:	4630      	mov	r0, r6
 800be0c:	f7ff ff94 	bl	800bd38 <__sfputs_r>
 800be10:	3001      	adds	r0, #1
 800be12:	f000 80aa 	beq.w	800bf6a <_vfiprintf_r+0x20e>
 800be16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be18:	445a      	add	r2, fp
 800be1a:	9209      	str	r2, [sp, #36]	; 0x24
 800be1c:	f89a 3000 	ldrb.w	r3, [sl]
 800be20:	2b00      	cmp	r3, #0
 800be22:	f000 80a2 	beq.w	800bf6a <_vfiprintf_r+0x20e>
 800be26:	2300      	movs	r3, #0
 800be28:	f04f 32ff 	mov.w	r2, #4294967295
 800be2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be30:	f10a 0a01 	add.w	sl, sl, #1
 800be34:	9304      	str	r3, [sp, #16]
 800be36:	9307      	str	r3, [sp, #28]
 800be38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be3c:	931a      	str	r3, [sp, #104]	; 0x68
 800be3e:	4654      	mov	r4, sl
 800be40:	2205      	movs	r2, #5
 800be42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be46:	4858      	ldr	r0, [pc, #352]	; (800bfa8 <_vfiprintf_r+0x24c>)
 800be48:	f7fe ff84 	bl	800ad54 <memchr>
 800be4c:	9a04      	ldr	r2, [sp, #16]
 800be4e:	b9d8      	cbnz	r0, 800be88 <_vfiprintf_r+0x12c>
 800be50:	06d1      	lsls	r1, r2, #27
 800be52:	bf44      	itt	mi
 800be54:	2320      	movmi	r3, #32
 800be56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be5a:	0713      	lsls	r3, r2, #28
 800be5c:	bf44      	itt	mi
 800be5e:	232b      	movmi	r3, #43	; 0x2b
 800be60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be64:	f89a 3000 	ldrb.w	r3, [sl]
 800be68:	2b2a      	cmp	r3, #42	; 0x2a
 800be6a:	d015      	beq.n	800be98 <_vfiprintf_r+0x13c>
 800be6c:	4654      	mov	r4, sl
 800be6e:	2000      	movs	r0, #0
 800be70:	f04f 0c0a 	mov.w	ip, #10
 800be74:	9a07      	ldr	r2, [sp, #28]
 800be76:	4621      	mov	r1, r4
 800be78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be7c:	3b30      	subs	r3, #48	; 0x30
 800be7e:	2b09      	cmp	r3, #9
 800be80:	d94e      	bls.n	800bf20 <_vfiprintf_r+0x1c4>
 800be82:	b1b0      	cbz	r0, 800beb2 <_vfiprintf_r+0x156>
 800be84:	9207      	str	r2, [sp, #28]
 800be86:	e014      	b.n	800beb2 <_vfiprintf_r+0x156>
 800be88:	eba0 0308 	sub.w	r3, r0, r8
 800be8c:	fa09 f303 	lsl.w	r3, r9, r3
 800be90:	4313      	orrs	r3, r2
 800be92:	46a2      	mov	sl, r4
 800be94:	9304      	str	r3, [sp, #16]
 800be96:	e7d2      	b.n	800be3e <_vfiprintf_r+0xe2>
 800be98:	9b03      	ldr	r3, [sp, #12]
 800be9a:	1d19      	adds	r1, r3, #4
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	9103      	str	r1, [sp, #12]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	bfbb      	ittet	lt
 800bea4:	425b      	neglt	r3, r3
 800bea6:	f042 0202 	orrlt.w	r2, r2, #2
 800beaa:	9307      	strge	r3, [sp, #28]
 800beac:	9307      	strlt	r3, [sp, #28]
 800beae:	bfb8      	it	lt
 800beb0:	9204      	strlt	r2, [sp, #16]
 800beb2:	7823      	ldrb	r3, [r4, #0]
 800beb4:	2b2e      	cmp	r3, #46	; 0x2e
 800beb6:	d10c      	bne.n	800bed2 <_vfiprintf_r+0x176>
 800beb8:	7863      	ldrb	r3, [r4, #1]
 800beba:	2b2a      	cmp	r3, #42	; 0x2a
 800bebc:	d135      	bne.n	800bf2a <_vfiprintf_r+0x1ce>
 800bebe:	9b03      	ldr	r3, [sp, #12]
 800bec0:	3402      	adds	r4, #2
 800bec2:	1d1a      	adds	r2, r3, #4
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	9203      	str	r2, [sp, #12]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	bfb8      	it	lt
 800becc:	f04f 33ff 	movlt.w	r3, #4294967295
 800bed0:	9305      	str	r3, [sp, #20]
 800bed2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800bfac <_vfiprintf_r+0x250>
 800bed6:	2203      	movs	r2, #3
 800bed8:	4650      	mov	r0, sl
 800beda:	7821      	ldrb	r1, [r4, #0]
 800bedc:	f7fe ff3a 	bl	800ad54 <memchr>
 800bee0:	b140      	cbz	r0, 800bef4 <_vfiprintf_r+0x198>
 800bee2:	2340      	movs	r3, #64	; 0x40
 800bee4:	eba0 000a 	sub.w	r0, r0, sl
 800bee8:	fa03 f000 	lsl.w	r0, r3, r0
 800beec:	9b04      	ldr	r3, [sp, #16]
 800beee:	3401      	adds	r4, #1
 800bef0:	4303      	orrs	r3, r0
 800bef2:	9304      	str	r3, [sp, #16]
 800bef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bef8:	2206      	movs	r2, #6
 800befa:	482d      	ldr	r0, [pc, #180]	; (800bfb0 <_vfiprintf_r+0x254>)
 800befc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf00:	f7fe ff28 	bl	800ad54 <memchr>
 800bf04:	2800      	cmp	r0, #0
 800bf06:	d03f      	beq.n	800bf88 <_vfiprintf_r+0x22c>
 800bf08:	4b2a      	ldr	r3, [pc, #168]	; (800bfb4 <_vfiprintf_r+0x258>)
 800bf0a:	bb1b      	cbnz	r3, 800bf54 <_vfiprintf_r+0x1f8>
 800bf0c:	9b03      	ldr	r3, [sp, #12]
 800bf0e:	3307      	adds	r3, #7
 800bf10:	f023 0307 	bic.w	r3, r3, #7
 800bf14:	3308      	adds	r3, #8
 800bf16:	9303      	str	r3, [sp, #12]
 800bf18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf1a:	443b      	add	r3, r7
 800bf1c:	9309      	str	r3, [sp, #36]	; 0x24
 800bf1e:	e767      	b.n	800bdf0 <_vfiprintf_r+0x94>
 800bf20:	460c      	mov	r4, r1
 800bf22:	2001      	movs	r0, #1
 800bf24:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf28:	e7a5      	b.n	800be76 <_vfiprintf_r+0x11a>
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	f04f 0c0a 	mov.w	ip, #10
 800bf30:	4619      	mov	r1, r3
 800bf32:	3401      	adds	r4, #1
 800bf34:	9305      	str	r3, [sp, #20]
 800bf36:	4620      	mov	r0, r4
 800bf38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf3c:	3a30      	subs	r2, #48	; 0x30
 800bf3e:	2a09      	cmp	r2, #9
 800bf40:	d903      	bls.n	800bf4a <_vfiprintf_r+0x1ee>
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d0c5      	beq.n	800bed2 <_vfiprintf_r+0x176>
 800bf46:	9105      	str	r1, [sp, #20]
 800bf48:	e7c3      	b.n	800bed2 <_vfiprintf_r+0x176>
 800bf4a:	4604      	mov	r4, r0
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf52:	e7f0      	b.n	800bf36 <_vfiprintf_r+0x1da>
 800bf54:	ab03      	add	r3, sp, #12
 800bf56:	9300      	str	r3, [sp, #0]
 800bf58:	462a      	mov	r2, r5
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	4b16      	ldr	r3, [pc, #88]	; (800bfb8 <_vfiprintf_r+0x25c>)
 800bf5e:	a904      	add	r1, sp, #16
 800bf60:	f7fc f876 	bl	8008050 <_printf_float>
 800bf64:	4607      	mov	r7, r0
 800bf66:	1c78      	adds	r0, r7, #1
 800bf68:	d1d6      	bne.n	800bf18 <_vfiprintf_r+0x1bc>
 800bf6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf6c:	07d9      	lsls	r1, r3, #31
 800bf6e:	d405      	bmi.n	800bf7c <_vfiprintf_r+0x220>
 800bf70:	89ab      	ldrh	r3, [r5, #12]
 800bf72:	059a      	lsls	r2, r3, #22
 800bf74:	d402      	bmi.n	800bf7c <_vfiprintf_r+0x220>
 800bf76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf78:	f000 fa9d 	bl	800c4b6 <__retarget_lock_release_recursive>
 800bf7c:	89ab      	ldrh	r3, [r5, #12]
 800bf7e:	065b      	lsls	r3, r3, #25
 800bf80:	f53f af12 	bmi.w	800bda8 <_vfiprintf_r+0x4c>
 800bf84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf86:	e711      	b.n	800bdac <_vfiprintf_r+0x50>
 800bf88:	ab03      	add	r3, sp, #12
 800bf8a:	9300      	str	r3, [sp, #0]
 800bf8c:	462a      	mov	r2, r5
 800bf8e:	4630      	mov	r0, r6
 800bf90:	4b09      	ldr	r3, [pc, #36]	; (800bfb8 <_vfiprintf_r+0x25c>)
 800bf92:	a904      	add	r1, sp, #16
 800bf94:	f7fc faf8 	bl	8008588 <_printf_i>
 800bf98:	e7e4      	b.n	800bf64 <_vfiprintf_r+0x208>
 800bf9a:	bf00      	nop
 800bf9c:	0800d56c 	.word	0x0800d56c
 800bfa0:	0800d58c 	.word	0x0800d58c
 800bfa4:	0800d54c 	.word	0x0800d54c
 800bfa8:	0800d4fc 	.word	0x0800d4fc
 800bfac:	0800d502 	.word	0x0800d502
 800bfb0:	0800d506 	.word	0x0800d506
 800bfb4:	08008051 	.word	0x08008051
 800bfb8:	0800bd39 	.word	0x0800bd39

0800bfbc <__swbuf_r>:
 800bfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfbe:	460e      	mov	r6, r1
 800bfc0:	4614      	mov	r4, r2
 800bfc2:	4605      	mov	r5, r0
 800bfc4:	b118      	cbz	r0, 800bfce <__swbuf_r+0x12>
 800bfc6:	6983      	ldr	r3, [r0, #24]
 800bfc8:	b90b      	cbnz	r3, 800bfce <__swbuf_r+0x12>
 800bfca:	f000 f9d5 	bl	800c378 <__sinit>
 800bfce:	4b21      	ldr	r3, [pc, #132]	; (800c054 <__swbuf_r+0x98>)
 800bfd0:	429c      	cmp	r4, r3
 800bfd2:	d12b      	bne.n	800c02c <__swbuf_r+0x70>
 800bfd4:	686c      	ldr	r4, [r5, #4]
 800bfd6:	69a3      	ldr	r3, [r4, #24]
 800bfd8:	60a3      	str	r3, [r4, #8]
 800bfda:	89a3      	ldrh	r3, [r4, #12]
 800bfdc:	071a      	lsls	r2, r3, #28
 800bfde:	d52f      	bpl.n	800c040 <__swbuf_r+0x84>
 800bfe0:	6923      	ldr	r3, [r4, #16]
 800bfe2:	b36b      	cbz	r3, 800c040 <__swbuf_r+0x84>
 800bfe4:	6923      	ldr	r3, [r4, #16]
 800bfe6:	6820      	ldr	r0, [r4, #0]
 800bfe8:	b2f6      	uxtb	r6, r6
 800bfea:	1ac0      	subs	r0, r0, r3
 800bfec:	6963      	ldr	r3, [r4, #20]
 800bfee:	4637      	mov	r7, r6
 800bff0:	4283      	cmp	r3, r0
 800bff2:	dc04      	bgt.n	800bffe <__swbuf_r+0x42>
 800bff4:	4621      	mov	r1, r4
 800bff6:	4628      	mov	r0, r5
 800bff8:	f000 f92a 	bl	800c250 <_fflush_r>
 800bffc:	bb30      	cbnz	r0, 800c04c <__swbuf_r+0x90>
 800bffe:	68a3      	ldr	r3, [r4, #8]
 800c000:	3001      	adds	r0, #1
 800c002:	3b01      	subs	r3, #1
 800c004:	60a3      	str	r3, [r4, #8]
 800c006:	6823      	ldr	r3, [r4, #0]
 800c008:	1c5a      	adds	r2, r3, #1
 800c00a:	6022      	str	r2, [r4, #0]
 800c00c:	701e      	strb	r6, [r3, #0]
 800c00e:	6963      	ldr	r3, [r4, #20]
 800c010:	4283      	cmp	r3, r0
 800c012:	d004      	beq.n	800c01e <__swbuf_r+0x62>
 800c014:	89a3      	ldrh	r3, [r4, #12]
 800c016:	07db      	lsls	r3, r3, #31
 800c018:	d506      	bpl.n	800c028 <__swbuf_r+0x6c>
 800c01a:	2e0a      	cmp	r6, #10
 800c01c:	d104      	bne.n	800c028 <__swbuf_r+0x6c>
 800c01e:	4621      	mov	r1, r4
 800c020:	4628      	mov	r0, r5
 800c022:	f000 f915 	bl	800c250 <_fflush_r>
 800c026:	b988      	cbnz	r0, 800c04c <__swbuf_r+0x90>
 800c028:	4638      	mov	r0, r7
 800c02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c02c:	4b0a      	ldr	r3, [pc, #40]	; (800c058 <__swbuf_r+0x9c>)
 800c02e:	429c      	cmp	r4, r3
 800c030:	d101      	bne.n	800c036 <__swbuf_r+0x7a>
 800c032:	68ac      	ldr	r4, [r5, #8]
 800c034:	e7cf      	b.n	800bfd6 <__swbuf_r+0x1a>
 800c036:	4b09      	ldr	r3, [pc, #36]	; (800c05c <__swbuf_r+0xa0>)
 800c038:	429c      	cmp	r4, r3
 800c03a:	bf08      	it	eq
 800c03c:	68ec      	ldreq	r4, [r5, #12]
 800c03e:	e7ca      	b.n	800bfd6 <__swbuf_r+0x1a>
 800c040:	4621      	mov	r1, r4
 800c042:	4628      	mov	r0, r5
 800c044:	f000 f80c 	bl	800c060 <__swsetup_r>
 800c048:	2800      	cmp	r0, #0
 800c04a:	d0cb      	beq.n	800bfe4 <__swbuf_r+0x28>
 800c04c:	f04f 37ff 	mov.w	r7, #4294967295
 800c050:	e7ea      	b.n	800c028 <__swbuf_r+0x6c>
 800c052:	bf00      	nop
 800c054:	0800d56c 	.word	0x0800d56c
 800c058:	0800d58c 	.word	0x0800d58c
 800c05c:	0800d54c 	.word	0x0800d54c

0800c060 <__swsetup_r>:
 800c060:	4b32      	ldr	r3, [pc, #200]	; (800c12c <__swsetup_r+0xcc>)
 800c062:	b570      	push	{r4, r5, r6, lr}
 800c064:	681d      	ldr	r5, [r3, #0]
 800c066:	4606      	mov	r6, r0
 800c068:	460c      	mov	r4, r1
 800c06a:	b125      	cbz	r5, 800c076 <__swsetup_r+0x16>
 800c06c:	69ab      	ldr	r3, [r5, #24]
 800c06e:	b913      	cbnz	r3, 800c076 <__swsetup_r+0x16>
 800c070:	4628      	mov	r0, r5
 800c072:	f000 f981 	bl	800c378 <__sinit>
 800c076:	4b2e      	ldr	r3, [pc, #184]	; (800c130 <__swsetup_r+0xd0>)
 800c078:	429c      	cmp	r4, r3
 800c07a:	d10f      	bne.n	800c09c <__swsetup_r+0x3c>
 800c07c:	686c      	ldr	r4, [r5, #4]
 800c07e:	89a3      	ldrh	r3, [r4, #12]
 800c080:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c084:	0719      	lsls	r1, r3, #28
 800c086:	d42c      	bmi.n	800c0e2 <__swsetup_r+0x82>
 800c088:	06dd      	lsls	r5, r3, #27
 800c08a:	d411      	bmi.n	800c0b0 <__swsetup_r+0x50>
 800c08c:	2309      	movs	r3, #9
 800c08e:	6033      	str	r3, [r6, #0]
 800c090:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c094:	f04f 30ff 	mov.w	r0, #4294967295
 800c098:	81a3      	strh	r3, [r4, #12]
 800c09a:	e03e      	b.n	800c11a <__swsetup_r+0xba>
 800c09c:	4b25      	ldr	r3, [pc, #148]	; (800c134 <__swsetup_r+0xd4>)
 800c09e:	429c      	cmp	r4, r3
 800c0a0:	d101      	bne.n	800c0a6 <__swsetup_r+0x46>
 800c0a2:	68ac      	ldr	r4, [r5, #8]
 800c0a4:	e7eb      	b.n	800c07e <__swsetup_r+0x1e>
 800c0a6:	4b24      	ldr	r3, [pc, #144]	; (800c138 <__swsetup_r+0xd8>)
 800c0a8:	429c      	cmp	r4, r3
 800c0aa:	bf08      	it	eq
 800c0ac:	68ec      	ldreq	r4, [r5, #12]
 800c0ae:	e7e6      	b.n	800c07e <__swsetup_r+0x1e>
 800c0b0:	0758      	lsls	r0, r3, #29
 800c0b2:	d512      	bpl.n	800c0da <__swsetup_r+0x7a>
 800c0b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0b6:	b141      	cbz	r1, 800c0ca <__swsetup_r+0x6a>
 800c0b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0bc:	4299      	cmp	r1, r3
 800c0be:	d002      	beq.n	800c0c6 <__swsetup_r+0x66>
 800c0c0:	4630      	mov	r0, r6
 800c0c2:	f7ff fb2f 	bl	800b724 <_free_r>
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	6363      	str	r3, [r4, #52]	; 0x34
 800c0ca:	89a3      	ldrh	r3, [r4, #12]
 800c0cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c0d0:	81a3      	strh	r3, [r4, #12]
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	6063      	str	r3, [r4, #4]
 800c0d6:	6923      	ldr	r3, [r4, #16]
 800c0d8:	6023      	str	r3, [r4, #0]
 800c0da:	89a3      	ldrh	r3, [r4, #12]
 800c0dc:	f043 0308 	orr.w	r3, r3, #8
 800c0e0:	81a3      	strh	r3, [r4, #12]
 800c0e2:	6923      	ldr	r3, [r4, #16]
 800c0e4:	b94b      	cbnz	r3, 800c0fa <__swsetup_r+0x9a>
 800c0e6:	89a3      	ldrh	r3, [r4, #12]
 800c0e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c0ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0f0:	d003      	beq.n	800c0fa <__swsetup_r+0x9a>
 800c0f2:	4621      	mov	r1, r4
 800c0f4:	4630      	mov	r0, r6
 800c0f6:	f000 fa05 	bl	800c504 <__smakebuf_r>
 800c0fa:	89a0      	ldrh	r0, [r4, #12]
 800c0fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c100:	f010 0301 	ands.w	r3, r0, #1
 800c104:	d00a      	beq.n	800c11c <__swsetup_r+0xbc>
 800c106:	2300      	movs	r3, #0
 800c108:	60a3      	str	r3, [r4, #8]
 800c10a:	6963      	ldr	r3, [r4, #20]
 800c10c:	425b      	negs	r3, r3
 800c10e:	61a3      	str	r3, [r4, #24]
 800c110:	6923      	ldr	r3, [r4, #16]
 800c112:	b943      	cbnz	r3, 800c126 <__swsetup_r+0xc6>
 800c114:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c118:	d1ba      	bne.n	800c090 <__swsetup_r+0x30>
 800c11a:	bd70      	pop	{r4, r5, r6, pc}
 800c11c:	0781      	lsls	r1, r0, #30
 800c11e:	bf58      	it	pl
 800c120:	6963      	ldrpl	r3, [r4, #20]
 800c122:	60a3      	str	r3, [r4, #8]
 800c124:	e7f4      	b.n	800c110 <__swsetup_r+0xb0>
 800c126:	2000      	movs	r0, #0
 800c128:	e7f7      	b.n	800c11a <__swsetup_r+0xba>
 800c12a:	bf00      	nop
 800c12c:	200000a0 	.word	0x200000a0
 800c130:	0800d56c 	.word	0x0800d56c
 800c134:	0800d58c 	.word	0x0800d58c
 800c138:	0800d54c 	.word	0x0800d54c

0800c13c <abort>:
 800c13c:	2006      	movs	r0, #6
 800c13e:	b508      	push	{r3, lr}
 800c140:	f000 fa50 	bl	800c5e4 <raise>
 800c144:	2001      	movs	r0, #1
 800c146:	f7f8 fcba 	bl	8004abe <_exit>
	...

0800c14c <__sflush_r>:
 800c14c:	898a      	ldrh	r2, [r1, #12]
 800c14e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c150:	4605      	mov	r5, r0
 800c152:	0710      	lsls	r0, r2, #28
 800c154:	460c      	mov	r4, r1
 800c156:	d457      	bmi.n	800c208 <__sflush_r+0xbc>
 800c158:	684b      	ldr	r3, [r1, #4]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	dc04      	bgt.n	800c168 <__sflush_r+0x1c>
 800c15e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c160:	2b00      	cmp	r3, #0
 800c162:	dc01      	bgt.n	800c168 <__sflush_r+0x1c>
 800c164:	2000      	movs	r0, #0
 800c166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c168:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c16a:	2e00      	cmp	r6, #0
 800c16c:	d0fa      	beq.n	800c164 <__sflush_r+0x18>
 800c16e:	2300      	movs	r3, #0
 800c170:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c174:	682f      	ldr	r7, [r5, #0]
 800c176:	602b      	str	r3, [r5, #0]
 800c178:	d032      	beq.n	800c1e0 <__sflush_r+0x94>
 800c17a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c17c:	89a3      	ldrh	r3, [r4, #12]
 800c17e:	075a      	lsls	r2, r3, #29
 800c180:	d505      	bpl.n	800c18e <__sflush_r+0x42>
 800c182:	6863      	ldr	r3, [r4, #4]
 800c184:	1ac0      	subs	r0, r0, r3
 800c186:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c188:	b10b      	cbz	r3, 800c18e <__sflush_r+0x42>
 800c18a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c18c:	1ac0      	subs	r0, r0, r3
 800c18e:	2300      	movs	r3, #0
 800c190:	4602      	mov	r2, r0
 800c192:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c194:	4628      	mov	r0, r5
 800c196:	6a21      	ldr	r1, [r4, #32]
 800c198:	47b0      	blx	r6
 800c19a:	1c43      	adds	r3, r0, #1
 800c19c:	89a3      	ldrh	r3, [r4, #12]
 800c19e:	d106      	bne.n	800c1ae <__sflush_r+0x62>
 800c1a0:	6829      	ldr	r1, [r5, #0]
 800c1a2:	291d      	cmp	r1, #29
 800c1a4:	d82c      	bhi.n	800c200 <__sflush_r+0xb4>
 800c1a6:	4a29      	ldr	r2, [pc, #164]	; (800c24c <__sflush_r+0x100>)
 800c1a8:	40ca      	lsrs	r2, r1
 800c1aa:	07d6      	lsls	r6, r2, #31
 800c1ac:	d528      	bpl.n	800c200 <__sflush_r+0xb4>
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	6062      	str	r2, [r4, #4]
 800c1b2:	6922      	ldr	r2, [r4, #16]
 800c1b4:	04d9      	lsls	r1, r3, #19
 800c1b6:	6022      	str	r2, [r4, #0]
 800c1b8:	d504      	bpl.n	800c1c4 <__sflush_r+0x78>
 800c1ba:	1c42      	adds	r2, r0, #1
 800c1bc:	d101      	bne.n	800c1c2 <__sflush_r+0x76>
 800c1be:	682b      	ldr	r3, [r5, #0]
 800c1c0:	b903      	cbnz	r3, 800c1c4 <__sflush_r+0x78>
 800c1c2:	6560      	str	r0, [r4, #84]	; 0x54
 800c1c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1c6:	602f      	str	r7, [r5, #0]
 800c1c8:	2900      	cmp	r1, #0
 800c1ca:	d0cb      	beq.n	800c164 <__sflush_r+0x18>
 800c1cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c1d0:	4299      	cmp	r1, r3
 800c1d2:	d002      	beq.n	800c1da <__sflush_r+0x8e>
 800c1d4:	4628      	mov	r0, r5
 800c1d6:	f7ff faa5 	bl	800b724 <_free_r>
 800c1da:	2000      	movs	r0, #0
 800c1dc:	6360      	str	r0, [r4, #52]	; 0x34
 800c1de:	e7c2      	b.n	800c166 <__sflush_r+0x1a>
 800c1e0:	6a21      	ldr	r1, [r4, #32]
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	4628      	mov	r0, r5
 800c1e6:	47b0      	blx	r6
 800c1e8:	1c41      	adds	r1, r0, #1
 800c1ea:	d1c7      	bne.n	800c17c <__sflush_r+0x30>
 800c1ec:	682b      	ldr	r3, [r5, #0]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d0c4      	beq.n	800c17c <__sflush_r+0x30>
 800c1f2:	2b1d      	cmp	r3, #29
 800c1f4:	d001      	beq.n	800c1fa <__sflush_r+0xae>
 800c1f6:	2b16      	cmp	r3, #22
 800c1f8:	d101      	bne.n	800c1fe <__sflush_r+0xb2>
 800c1fa:	602f      	str	r7, [r5, #0]
 800c1fc:	e7b2      	b.n	800c164 <__sflush_r+0x18>
 800c1fe:	89a3      	ldrh	r3, [r4, #12]
 800c200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c204:	81a3      	strh	r3, [r4, #12]
 800c206:	e7ae      	b.n	800c166 <__sflush_r+0x1a>
 800c208:	690f      	ldr	r7, [r1, #16]
 800c20a:	2f00      	cmp	r7, #0
 800c20c:	d0aa      	beq.n	800c164 <__sflush_r+0x18>
 800c20e:	0793      	lsls	r3, r2, #30
 800c210:	bf18      	it	ne
 800c212:	2300      	movne	r3, #0
 800c214:	680e      	ldr	r6, [r1, #0]
 800c216:	bf08      	it	eq
 800c218:	694b      	ldreq	r3, [r1, #20]
 800c21a:	1bf6      	subs	r6, r6, r7
 800c21c:	600f      	str	r7, [r1, #0]
 800c21e:	608b      	str	r3, [r1, #8]
 800c220:	2e00      	cmp	r6, #0
 800c222:	dd9f      	ble.n	800c164 <__sflush_r+0x18>
 800c224:	4633      	mov	r3, r6
 800c226:	463a      	mov	r2, r7
 800c228:	4628      	mov	r0, r5
 800c22a:	6a21      	ldr	r1, [r4, #32]
 800c22c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c230:	47e0      	blx	ip
 800c232:	2800      	cmp	r0, #0
 800c234:	dc06      	bgt.n	800c244 <__sflush_r+0xf8>
 800c236:	89a3      	ldrh	r3, [r4, #12]
 800c238:	f04f 30ff 	mov.w	r0, #4294967295
 800c23c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c240:	81a3      	strh	r3, [r4, #12]
 800c242:	e790      	b.n	800c166 <__sflush_r+0x1a>
 800c244:	4407      	add	r7, r0
 800c246:	1a36      	subs	r6, r6, r0
 800c248:	e7ea      	b.n	800c220 <__sflush_r+0xd4>
 800c24a:	bf00      	nop
 800c24c:	20400001 	.word	0x20400001

0800c250 <_fflush_r>:
 800c250:	b538      	push	{r3, r4, r5, lr}
 800c252:	690b      	ldr	r3, [r1, #16]
 800c254:	4605      	mov	r5, r0
 800c256:	460c      	mov	r4, r1
 800c258:	b913      	cbnz	r3, 800c260 <_fflush_r+0x10>
 800c25a:	2500      	movs	r5, #0
 800c25c:	4628      	mov	r0, r5
 800c25e:	bd38      	pop	{r3, r4, r5, pc}
 800c260:	b118      	cbz	r0, 800c26a <_fflush_r+0x1a>
 800c262:	6983      	ldr	r3, [r0, #24]
 800c264:	b90b      	cbnz	r3, 800c26a <_fflush_r+0x1a>
 800c266:	f000 f887 	bl	800c378 <__sinit>
 800c26a:	4b14      	ldr	r3, [pc, #80]	; (800c2bc <_fflush_r+0x6c>)
 800c26c:	429c      	cmp	r4, r3
 800c26e:	d11b      	bne.n	800c2a8 <_fflush_r+0x58>
 800c270:	686c      	ldr	r4, [r5, #4]
 800c272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d0ef      	beq.n	800c25a <_fflush_r+0xa>
 800c27a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c27c:	07d0      	lsls	r0, r2, #31
 800c27e:	d404      	bmi.n	800c28a <_fflush_r+0x3a>
 800c280:	0599      	lsls	r1, r3, #22
 800c282:	d402      	bmi.n	800c28a <_fflush_r+0x3a>
 800c284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c286:	f000 f915 	bl	800c4b4 <__retarget_lock_acquire_recursive>
 800c28a:	4628      	mov	r0, r5
 800c28c:	4621      	mov	r1, r4
 800c28e:	f7ff ff5d 	bl	800c14c <__sflush_r>
 800c292:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c294:	4605      	mov	r5, r0
 800c296:	07da      	lsls	r2, r3, #31
 800c298:	d4e0      	bmi.n	800c25c <_fflush_r+0xc>
 800c29a:	89a3      	ldrh	r3, [r4, #12]
 800c29c:	059b      	lsls	r3, r3, #22
 800c29e:	d4dd      	bmi.n	800c25c <_fflush_r+0xc>
 800c2a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c2a2:	f000 f908 	bl	800c4b6 <__retarget_lock_release_recursive>
 800c2a6:	e7d9      	b.n	800c25c <_fflush_r+0xc>
 800c2a8:	4b05      	ldr	r3, [pc, #20]	; (800c2c0 <_fflush_r+0x70>)
 800c2aa:	429c      	cmp	r4, r3
 800c2ac:	d101      	bne.n	800c2b2 <_fflush_r+0x62>
 800c2ae:	68ac      	ldr	r4, [r5, #8]
 800c2b0:	e7df      	b.n	800c272 <_fflush_r+0x22>
 800c2b2:	4b04      	ldr	r3, [pc, #16]	; (800c2c4 <_fflush_r+0x74>)
 800c2b4:	429c      	cmp	r4, r3
 800c2b6:	bf08      	it	eq
 800c2b8:	68ec      	ldreq	r4, [r5, #12]
 800c2ba:	e7da      	b.n	800c272 <_fflush_r+0x22>
 800c2bc:	0800d56c 	.word	0x0800d56c
 800c2c0:	0800d58c 	.word	0x0800d58c
 800c2c4:	0800d54c 	.word	0x0800d54c

0800c2c8 <std>:
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	b510      	push	{r4, lr}
 800c2cc:	4604      	mov	r4, r0
 800c2ce:	e9c0 3300 	strd	r3, r3, [r0]
 800c2d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c2d6:	6083      	str	r3, [r0, #8]
 800c2d8:	8181      	strh	r1, [r0, #12]
 800c2da:	6643      	str	r3, [r0, #100]	; 0x64
 800c2dc:	81c2      	strh	r2, [r0, #14]
 800c2de:	6183      	str	r3, [r0, #24]
 800c2e0:	4619      	mov	r1, r3
 800c2e2:	2208      	movs	r2, #8
 800c2e4:	305c      	adds	r0, #92	; 0x5c
 800c2e6:	f7fb fe0d 	bl	8007f04 <memset>
 800c2ea:	4b05      	ldr	r3, [pc, #20]	; (800c300 <std+0x38>)
 800c2ec:	6224      	str	r4, [r4, #32]
 800c2ee:	6263      	str	r3, [r4, #36]	; 0x24
 800c2f0:	4b04      	ldr	r3, [pc, #16]	; (800c304 <std+0x3c>)
 800c2f2:	62a3      	str	r3, [r4, #40]	; 0x28
 800c2f4:	4b04      	ldr	r3, [pc, #16]	; (800c308 <std+0x40>)
 800c2f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c2f8:	4b04      	ldr	r3, [pc, #16]	; (800c30c <std+0x44>)
 800c2fa:	6323      	str	r3, [r4, #48]	; 0x30
 800c2fc:	bd10      	pop	{r4, pc}
 800c2fe:	bf00      	nop
 800c300:	0800c61d 	.word	0x0800c61d
 800c304:	0800c63f 	.word	0x0800c63f
 800c308:	0800c677 	.word	0x0800c677
 800c30c:	0800c69b 	.word	0x0800c69b

0800c310 <_cleanup_r>:
 800c310:	4901      	ldr	r1, [pc, #4]	; (800c318 <_cleanup_r+0x8>)
 800c312:	f000 b8af 	b.w	800c474 <_fwalk_reent>
 800c316:	bf00      	nop
 800c318:	0800c251 	.word	0x0800c251

0800c31c <__sfmoreglue>:
 800c31c:	2268      	movs	r2, #104	; 0x68
 800c31e:	b570      	push	{r4, r5, r6, lr}
 800c320:	1e4d      	subs	r5, r1, #1
 800c322:	4355      	muls	r5, r2
 800c324:	460e      	mov	r6, r1
 800c326:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c32a:	f7ff fa63 	bl	800b7f4 <_malloc_r>
 800c32e:	4604      	mov	r4, r0
 800c330:	b140      	cbz	r0, 800c344 <__sfmoreglue+0x28>
 800c332:	2100      	movs	r1, #0
 800c334:	e9c0 1600 	strd	r1, r6, [r0]
 800c338:	300c      	adds	r0, #12
 800c33a:	60a0      	str	r0, [r4, #8]
 800c33c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c340:	f7fb fde0 	bl	8007f04 <memset>
 800c344:	4620      	mov	r0, r4
 800c346:	bd70      	pop	{r4, r5, r6, pc}

0800c348 <__sfp_lock_acquire>:
 800c348:	4801      	ldr	r0, [pc, #4]	; (800c350 <__sfp_lock_acquire+0x8>)
 800c34a:	f000 b8b3 	b.w	800c4b4 <__retarget_lock_acquire_recursive>
 800c34e:	bf00      	nop
 800c350:	200006c9 	.word	0x200006c9

0800c354 <__sfp_lock_release>:
 800c354:	4801      	ldr	r0, [pc, #4]	; (800c35c <__sfp_lock_release+0x8>)
 800c356:	f000 b8ae 	b.w	800c4b6 <__retarget_lock_release_recursive>
 800c35a:	bf00      	nop
 800c35c:	200006c9 	.word	0x200006c9

0800c360 <__sinit_lock_acquire>:
 800c360:	4801      	ldr	r0, [pc, #4]	; (800c368 <__sinit_lock_acquire+0x8>)
 800c362:	f000 b8a7 	b.w	800c4b4 <__retarget_lock_acquire_recursive>
 800c366:	bf00      	nop
 800c368:	200006ca 	.word	0x200006ca

0800c36c <__sinit_lock_release>:
 800c36c:	4801      	ldr	r0, [pc, #4]	; (800c374 <__sinit_lock_release+0x8>)
 800c36e:	f000 b8a2 	b.w	800c4b6 <__retarget_lock_release_recursive>
 800c372:	bf00      	nop
 800c374:	200006ca 	.word	0x200006ca

0800c378 <__sinit>:
 800c378:	b510      	push	{r4, lr}
 800c37a:	4604      	mov	r4, r0
 800c37c:	f7ff fff0 	bl	800c360 <__sinit_lock_acquire>
 800c380:	69a3      	ldr	r3, [r4, #24]
 800c382:	b11b      	cbz	r3, 800c38c <__sinit+0x14>
 800c384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c388:	f7ff bff0 	b.w	800c36c <__sinit_lock_release>
 800c38c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c390:	6523      	str	r3, [r4, #80]	; 0x50
 800c392:	4b13      	ldr	r3, [pc, #76]	; (800c3e0 <__sinit+0x68>)
 800c394:	4a13      	ldr	r2, [pc, #76]	; (800c3e4 <__sinit+0x6c>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	62a2      	str	r2, [r4, #40]	; 0x28
 800c39a:	42a3      	cmp	r3, r4
 800c39c:	bf08      	it	eq
 800c39e:	2301      	moveq	r3, #1
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	bf08      	it	eq
 800c3a4:	61a3      	streq	r3, [r4, #24]
 800c3a6:	f000 f81f 	bl	800c3e8 <__sfp>
 800c3aa:	6060      	str	r0, [r4, #4]
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	f000 f81b 	bl	800c3e8 <__sfp>
 800c3b2:	60a0      	str	r0, [r4, #8]
 800c3b4:	4620      	mov	r0, r4
 800c3b6:	f000 f817 	bl	800c3e8 <__sfp>
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	2104      	movs	r1, #4
 800c3be:	60e0      	str	r0, [r4, #12]
 800c3c0:	6860      	ldr	r0, [r4, #4]
 800c3c2:	f7ff ff81 	bl	800c2c8 <std>
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	2109      	movs	r1, #9
 800c3ca:	68a0      	ldr	r0, [r4, #8]
 800c3cc:	f7ff ff7c 	bl	800c2c8 <std>
 800c3d0:	2202      	movs	r2, #2
 800c3d2:	2112      	movs	r1, #18
 800c3d4:	68e0      	ldr	r0, [r4, #12]
 800c3d6:	f7ff ff77 	bl	800c2c8 <std>
 800c3da:	2301      	movs	r3, #1
 800c3dc:	61a3      	str	r3, [r4, #24]
 800c3de:	e7d1      	b.n	800c384 <__sinit+0xc>
 800c3e0:	0800d104 	.word	0x0800d104
 800c3e4:	0800c311 	.word	0x0800c311

0800c3e8 <__sfp>:
 800c3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ea:	4607      	mov	r7, r0
 800c3ec:	f7ff ffac 	bl	800c348 <__sfp_lock_acquire>
 800c3f0:	4b1e      	ldr	r3, [pc, #120]	; (800c46c <__sfp+0x84>)
 800c3f2:	681e      	ldr	r6, [r3, #0]
 800c3f4:	69b3      	ldr	r3, [r6, #24]
 800c3f6:	b913      	cbnz	r3, 800c3fe <__sfp+0x16>
 800c3f8:	4630      	mov	r0, r6
 800c3fa:	f7ff ffbd 	bl	800c378 <__sinit>
 800c3fe:	3648      	adds	r6, #72	; 0x48
 800c400:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c404:	3b01      	subs	r3, #1
 800c406:	d503      	bpl.n	800c410 <__sfp+0x28>
 800c408:	6833      	ldr	r3, [r6, #0]
 800c40a:	b30b      	cbz	r3, 800c450 <__sfp+0x68>
 800c40c:	6836      	ldr	r6, [r6, #0]
 800c40e:	e7f7      	b.n	800c400 <__sfp+0x18>
 800c410:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c414:	b9d5      	cbnz	r5, 800c44c <__sfp+0x64>
 800c416:	4b16      	ldr	r3, [pc, #88]	; (800c470 <__sfp+0x88>)
 800c418:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c41c:	60e3      	str	r3, [r4, #12]
 800c41e:	6665      	str	r5, [r4, #100]	; 0x64
 800c420:	f000 f847 	bl	800c4b2 <__retarget_lock_init_recursive>
 800c424:	f7ff ff96 	bl	800c354 <__sfp_lock_release>
 800c428:	2208      	movs	r2, #8
 800c42a:	4629      	mov	r1, r5
 800c42c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c430:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c434:	6025      	str	r5, [r4, #0]
 800c436:	61a5      	str	r5, [r4, #24]
 800c438:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c43c:	f7fb fd62 	bl	8007f04 <memset>
 800c440:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c444:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c448:	4620      	mov	r0, r4
 800c44a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c44c:	3468      	adds	r4, #104	; 0x68
 800c44e:	e7d9      	b.n	800c404 <__sfp+0x1c>
 800c450:	2104      	movs	r1, #4
 800c452:	4638      	mov	r0, r7
 800c454:	f7ff ff62 	bl	800c31c <__sfmoreglue>
 800c458:	4604      	mov	r4, r0
 800c45a:	6030      	str	r0, [r6, #0]
 800c45c:	2800      	cmp	r0, #0
 800c45e:	d1d5      	bne.n	800c40c <__sfp+0x24>
 800c460:	f7ff ff78 	bl	800c354 <__sfp_lock_release>
 800c464:	230c      	movs	r3, #12
 800c466:	603b      	str	r3, [r7, #0]
 800c468:	e7ee      	b.n	800c448 <__sfp+0x60>
 800c46a:	bf00      	nop
 800c46c:	0800d104 	.word	0x0800d104
 800c470:	ffff0001 	.word	0xffff0001

0800c474 <_fwalk_reent>:
 800c474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c478:	4606      	mov	r6, r0
 800c47a:	4688      	mov	r8, r1
 800c47c:	2700      	movs	r7, #0
 800c47e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c482:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c486:	f1b9 0901 	subs.w	r9, r9, #1
 800c48a:	d505      	bpl.n	800c498 <_fwalk_reent+0x24>
 800c48c:	6824      	ldr	r4, [r4, #0]
 800c48e:	2c00      	cmp	r4, #0
 800c490:	d1f7      	bne.n	800c482 <_fwalk_reent+0xe>
 800c492:	4638      	mov	r0, r7
 800c494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c498:	89ab      	ldrh	r3, [r5, #12]
 800c49a:	2b01      	cmp	r3, #1
 800c49c:	d907      	bls.n	800c4ae <_fwalk_reent+0x3a>
 800c49e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	d003      	beq.n	800c4ae <_fwalk_reent+0x3a>
 800c4a6:	4629      	mov	r1, r5
 800c4a8:	4630      	mov	r0, r6
 800c4aa:	47c0      	blx	r8
 800c4ac:	4307      	orrs	r7, r0
 800c4ae:	3568      	adds	r5, #104	; 0x68
 800c4b0:	e7e9      	b.n	800c486 <_fwalk_reent+0x12>

0800c4b2 <__retarget_lock_init_recursive>:
 800c4b2:	4770      	bx	lr

0800c4b4 <__retarget_lock_acquire_recursive>:
 800c4b4:	4770      	bx	lr

0800c4b6 <__retarget_lock_release_recursive>:
 800c4b6:	4770      	bx	lr

0800c4b8 <__swhatbuf_r>:
 800c4b8:	b570      	push	{r4, r5, r6, lr}
 800c4ba:	460e      	mov	r6, r1
 800c4bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4c0:	4614      	mov	r4, r2
 800c4c2:	2900      	cmp	r1, #0
 800c4c4:	461d      	mov	r5, r3
 800c4c6:	b096      	sub	sp, #88	; 0x58
 800c4c8:	da08      	bge.n	800c4dc <__swhatbuf_r+0x24>
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c4d0:	602a      	str	r2, [r5, #0]
 800c4d2:	061a      	lsls	r2, r3, #24
 800c4d4:	d410      	bmi.n	800c4f8 <__swhatbuf_r+0x40>
 800c4d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4da:	e00e      	b.n	800c4fa <__swhatbuf_r+0x42>
 800c4dc:	466a      	mov	r2, sp
 800c4de:	f000 f903 	bl	800c6e8 <_fstat_r>
 800c4e2:	2800      	cmp	r0, #0
 800c4e4:	dbf1      	blt.n	800c4ca <__swhatbuf_r+0x12>
 800c4e6:	9a01      	ldr	r2, [sp, #4]
 800c4e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c4ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c4f0:	425a      	negs	r2, r3
 800c4f2:	415a      	adcs	r2, r3
 800c4f4:	602a      	str	r2, [r5, #0]
 800c4f6:	e7ee      	b.n	800c4d6 <__swhatbuf_r+0x1e>
 800c4f8:	2340      	movs	r3, #64	; 0x40
 800c4fa:	2000      	movs	r0, #0
 800c4fc:	6023      	str	r3, [r4, #0]
 800c4fe:	b016      	add	sp, #88	; 0x58
 800c500:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c504 <__smakebuf_r>:
 800c504:	898b      	ldrh	r3, [r1, #12]
 800c506:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c508:	079d      	lsls	r5, r3, #30
 800c50a:	4606      	mov	r6, r0
 800c50c:	460c      	mov	r4, r1
 800c50e:	d507      	bpl.n	800c520 <__smakebuf_r+0x1c>
 800c510:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c514:	6023      	str	r3, [r4, #0]
 800c516:	6123      	str	r3, [r4, #16]
 800c518:	2301      	movs	r3, #1
 800c51a:	6163      	str	r3, [r4, #20]
 800c51c:	b002      	add	sp, #8
 800c51e:	bd70      	pop	{r4, r5, r6, pc}
 800c520:	466a      	mov	r2, sp
 800c522:	ab01      	add	r3, sp, #4
 800c524:	f7ff ffc8 	bl	800c4b8 <__swhatbuf_r>
 800c528:	9900      	ldr	r1, [sp, #0]
 800c52a:	4605      	mov	r5, r0
 800c52c:	4630      	mov	r0, r6
 800c52e:	f7ff f961 	bl	800b7f4 <_malloc_r>
 800c532:	b948      	cbnz	r0, 800c548 <__smakebuf_r+0x44>
 800c534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c538:	059a      	lsls	r2, r3, #22
 800c53a:	d4ef      	bmi.n	800c51c <__smakebuf_r+0x18>
 800c53c:	f023 0303 	bic.w	r3, r3, #3
 800c540:	f043 0302 	orr.w	r3, r3, #2
 800c544:	81a3      	strh	r3, [r4, #12]
 800c546:	e7e3      	b.n	800c510 <__smakebuf_r+0xc>
 800c548:	4b0d      	ldr	r3, [pc, #52]	; (800c580 <__smakebuf_r+0x7c>)
 800c54a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c54c:	89a3      	ldrh	r3, [r4, #12]
 800c54e:	6020      	str	r0, [r4, #0]
 800c550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c554:	81a3      	strh	r3, [r4, #12]
 800c556:	9b00      	ldr	r3, [sp, #0]
 800c558:	6120      	str	r0, [r4, #16]
 800c55a:	6163      	str	r3, [r4, #20]
 800c55c:	9b01      	ldr	r3, [sp, #4]
 800c55e:	b15b      	cbz	r3, 800c578 <__smakebuf_r+0x74>
 800c560:	4630      	mov	r0, r6
 800c562:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c566:	f000 f8d1 	bl	800c70c <_isatty_r>
 800c56a:	b128      	cbz	r0, 800c578 <__smakebuf_r+0x74>
 800c56c:	89a3      	ldrh	r3, [r4, #12]
 800c56e:	f023 0303 	bic.w	r3, r3, #3
 800c572:	f043 0301 	orr.w	r3, r3, #1
 800c576:	81a3      	strh	r3, [r4, #12]
 800c578:	89a0      	ldrh	r0, [r4, #12]
 800c57a:	4305      	orrs	r5, r0
 800c57c:	81a5      	strh	r5, [r4, #12]
 800c57e:	e7cd      	b.n	800c51c <__smakebuf_r+0x18>
 800c580:	0800c311 	.word	0x0800c311

0800c584 <_malloc_usable_size_r>:
 800c584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c588:	1f18      	subs	r0, r3, #4
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	bfbc      	itt	lt
 800c58e:	580b      	ldrlt	r3, [r1, r0]
 800c590:	18c0      	addlt	r0, r0, r3
 800c592:	4770      	bx	lr

0800c594 <_raise_r>:
 800c594:	291f      	cmp	r1, #31
 800c596:	b538      	push	{r3, r4, r5, lr}
 800c598:	4604      	mov	r4, r0
 800c59a:	460d      	mov	r5, r1
 800c59c:	d904      	bls.n	800c5a8 <_raise_r+0x14>
 800c59e:	2316      	movs	r3, #22
 800c5a0:	6003      	str	r3, [r0, #0]
 800c5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a6:	bd38      	pop	{r3, r4, r5, pc}
 800c5a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c5aa:	b112      	cbz	r2, 800c5b2 <_raise_r+0x1e>
 800c5ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c5b0:	b94b      	cbnz	r3, 800c5c6 <_raise_r+0x32>
 800c5b2:	4620      	mov	r0, r4
 800c5b4:	f000 f830 	bl	800c618 <_getpid_r>
 800c5b8:	462a      	mov	r2, r5
 800c5ba:	4601      	mov	r1, r0
 800c5bc:	4620      	mov	r0, r4
 800c5be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5c2:	f000 b817 	b.w	800c5f4 <_kill_r>
 800c5c6:	2b01      	cmp	r3, #1
 800c5c8:	d00a      	beq.n	800c5e0 <_raise_r+0x4c>
 800c5ca:	1c59      	adds	r1, r3, #1
 800c5cc:	d103      	bne.n	800c5d6 <_raise_r+0x42>
 800c5ce:	2316      	movs	r3, #22
 800c5d0:	6003      	str	r3, [r0, #0]
 800c5d2:	2001      	movs	r0, #1
 800c5d4:	e7e7      	b.n	800c5a6 <_raise_r+0x12>
 800c5d6:	2400      	movs	r4, #0
 800c5d8:	4628      	mov	r0, r5
 800c5da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c5de:	4798      	blx	r3
 800c5e0:	2000      	movs	r0, #0
 800c5e2:	e7e0      	b.n	800c5a6 <_raise_r+0x12>

0800c5e4 <raise>:
 800c5e4:	4b02      	ldr	r3, [pc, #8]	; (800c5f0 <raise+0xc>)
 800c5e6:	4601      	mov	r1, r0
 800c5e8:	6818      	ldr	r0, [r3, #0]
 800c5ea:	f7ff bfd3 	b.w	800c594 <_raise_r>
 800c5ee:	bf00      	nop
 800c5f0:	200000a0 	.word	0x200000a0

0800c5f4 <_kill_r>:
 800c5f4:	b538      	push	{r3, r4, r5, lr}
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	4d06      	ldr	r5, [pc, #24]	; (800c614 <_kill_r+0x20>)
 800c5fa:	4604      	mov	r4, r0
 800c5fc:	4608      	mov	r0, r1
 800c5fe:	4611      	mov	r1, r2
 800c600:	602b      	str	r3, [r5, #0]
 800c602:	f7f8 fa4c 	bl	8004a9e <_kill>
 800c606:	1c43      	adds	r3, r0, #1
 800c608:	d102      	bne.n	800c610 <_kill_r+0x1c>
 800c60a:	682b      	ldr	r3, [r5, #0]
 800c60c:	b103      	cbz	r3, 800c610 <_kill_r+0x1c>
 800c60e:	6023      	str	r3, [r4, #0]
 800c610:	bd38      	pop	{r3, r4, r5, pc}
 800c612:	bf00      	nop
 800c614:	200006c4 	.word	0x200006c4

0800c618 <_getpid_r>:
 800c618:	f7f8 ba3a 	b.w	8004a90 <_getpid>

0800c61c <__sread>:
 800c61c:	b510      	push	{r4, lr}
 800c61e:	460c      	mov	r4, r1
 800c620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c624:	f000 f894 	bl	800c750 <_read_r>
 800c628:	2800      	cmp	r0, #0
 800c62a:	bfab      	itete	ge
 800c62c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c62e:	89a3      	ldrhlt	r3, [r4, #12]
 800c630:	181b      	addge	r3, r3, r0
 800c632:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c636:	bfac      	ite	ge
 800c638:	6563      	strge	r3, [r4, #84]	; 0x54
 800c63a:	81a3      	strhlt	r3, [r4, #12]
 800c63c:	bd10      	pop	{r4, pc}

0800c63e <__swrite>:
 800c63e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c642:	461f      	mov	r7, r3
 800c644:	898b      	ldrh	r3, [r1, #12]
 800c646:	4605      	mov	r5, r0
 800c648:	05db      	lsls	r3, r3, #23
 800c64a:	460c      	mov	r4, r1
 800c64c:	4616      	mov	r6, r2
 800c64e:	d505      	bpl.n	800c65c <__swrite+0x1e>
 800c650:	2302      	movs	r3, #2
 800c652:	2200      	movs	r2, #0
 800c654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c658:	f000 f868 	bl	800c72c <_lseek_r>
 800c65c:	89a3      	ldrh	r3, [r4, #12]
 800c65e:	4632      	mov	r2, r6
 800c660:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c664:	81a3      	strh	r3, [r4, #12]
 800c666:	4628      	mov	r0, r5
 800c668:	463b      	mov	r3, r7
 800c66a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c66e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c672:	f000 b817 	b.w	800c6a4 <_write_r>

0800c676 <__sseek>:
 800c676:	b510      	push	{r4, lr}
 800c678:	460c      	mov	r4, r1
 800c67a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c67e:	f000 f855 	bl	800c72c <_lseek_r>
 800c682:	1c43      	adds	r3, r0, #1
 800c684:	89a3      	ldrh	r3, [r4, #12]
 800c686:	bf15      	itete	ne
 800c688:	6560      	strne	r0, [r4, #84]	; 0x54
 800c68a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c68e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c692:	81a3      	strheq	r3, [r4, #12]
 800c694:	bf18      	it	ne
 800c696:	81a3      	strhne	r3, [r4, #12]
 800c698:	bd10      	pop	{r4, pc}

0800c69a <__sclose>:
 800c69a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c69e:	f000 b813 	b.w	800c6c8 <_close_r>
	...

0800c6a4 <_write_r>:
 800c6a4:	b538      	push	{r3, r4, r5, lr}
 800c6a6:	4604      	mov	r4, r0
 800c6a8:	4608      	mov	r0, r1
 800c6aa:	4611      	mov	r1, r2
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	4d05      	ldr	r5, [pc, #20]	; (800c6c4 <_write_r+0x20>)
 800c6b0:	602a      	str	r2, [r5, #0]
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	f7f8 fa2a 	bl	8004b0c <_write>
 800c6b8:	1c43      	adds	r3, r0, #1
 800c6ba:	d102      	bne.n	800c6c2 <_write_r+0x1e>
 800c6bc:	682b      	ldr	r3, [r5, #0]
 800c6be:	b103      	cbz	r3, 800c6c2 <_write_r+0x1e>
 800c6c0:	6023      	str	r3, [r4, #0]
 800c6c2:	bd38      	pop	{r3, r4, r5, pc}
 800c6c4:	200006c4 	.word	0x200006c4

0800c6c8 <_close_r>:
 800c6c8:	b538      	push	{r3, r4, r5, lr}
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	4d05      	ldr	r5, [pc, #20]	; (800c6e4 <_close_r+0x1c>)
 800c6ce:	4604      	mov	r4, r0
 800c6d0:	4608      	mov	r0, r1
 800c6d2:	602b      	str	r3, [r5, #0]
 800c6d4:	f7f8 fa36 	bl	8004b44 <_close>
 800c6d8:	1c43      	adds	r3, r0, #1
 800c6da:	d102      	bne.n	800c6e2 <_close_r+0x1a>
 800c6dc:	682b      	ldr	r3, [r5, #0]
 800c6de:	b103      	cbz	r3, 800c6e2 <_close_r+0x1a>
 800c6e0:	6023      	str	r3, [r4, #0]
 800c6e2:	bd38      	pop	{r3, r4, r5, pc}
 800c6e4:	200006c4 	.word	0x200006c4

0800c6e8 <_fstat_r>:
 800c6e8:	b538      	push	{r3, r4, r5, lr}
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	4d06      	ldr	r5, [pc, #24]	; (800c708 <_fstat_r+0x20>)
 800c6ee:	4604      	mov	r4, r0
 800c6f0:	4608      	mov	r0, r1
 800c6f2:	4611      	mov	r1, r2
 800c6f4:	602b      	str	r3, [r5, #0]
 800c6f6:	f7f8 fa30 	bl	8004b5a <_fstat>
 800c6fa:	1c43      	adds	r3, r0, #1
 800c6fc:	d102      	bne.n	800c704 <_fstat_r+0x1c>
 800c6fe:	682b      	ldr	r3, [r5, #0]
 800c700:	b103      	cbz	r3, 800c704 <_fstat_r+0x1c>
 800c702:	6023      	str	r3, [r4, #0]
 800c704:	bd38      	pop	{r3, r4, r5, pc}
 800c706:	bf00      	nop
 800c708:	200006c4 	.word	0x200006c4

0800c70c <_isatty_r>:
 800c70c:	b538      	push	{r3, r4, r5, lr}
 800c70e:	2300      	movs	r3, #0
 800c710:	4d05      	ldr	r5, [pc, #20]	; (800c728 <_isatty_r+0x1c>)
 800c712:	4604      	mov	r4, r0
 800c714:	4608      	mov	r0, r1
 800c716:	602b      	str	r3, [r5, #0]
 800c718:	f7f8 fa2e 	bl	8004b78 <_isatty>
 800c71c:	1c43      	adds	r3, r0, #1
 800c71e:	d102      	bne.n	800c726 <_isatty_r+0x1a>
 800c720:	682b      	ldr	r3, [r5, #0]
 800c722:	b103      	cbz	r3, 800c726 <_isatty_r+0x1a>
 800c724:	6023      	str	r3, [r4, #0]
 800c726:	bd38      	pop	{r3, r4, r5, pc}
 800c728:	200006c4 	.word	0x200006c4

0800c72c <_lseek_r>:
 800c72c:	b538      	push	{r3, r4, r5, lr}
 800c72e:	4604      	mov	r4, r0
 800c730:	4608      	mov	r0, r1
 800c732:	4611      	mov	r1, r2
 800c734:	2200      	movs	r2, #0
 800c736:	4d05      	ldr	r5, [pc, #20]	; (800c74c <_lseek_r+0x20>)
 800c738:	602a      	str	r2, [r5, #0]
 800c73a:	461a      	mov	r2, r3
 800c73c:	f7f8 fa26 	bl	8004b8c <_lseek>
 800c740:	1c43      	adds	r3, r0, #1
 800c742:	d102      	bne.n	800c74a <_lseek_r+0x1e>
 800c744:	682b      	ldr	r3, [r5, #0]
 800c746:	b103      	cbz	r3, 800c74a <_lseek_r+0x1e>
 800c748:	6023      	str	r3, [r4, #0]
 800c74a:	bd38      	pop	{r3, r4, r5, pc}
 800c74c:	200006c4 	.word	0x200006c4

0800c750 <_read_r>:
 800c750:	b538      	push	{r3, r4, r5, lr}
 800c752:	4604      	mov	r4, r0
 800c754:	4608      	mov	r0, r1
 800c756:	4611      	mov	r1, r2
 800c758:	2200      	movs	r2, #0
 800c75a:	4d05      	ldr	r5, [pc, #20]	; (800c770 <_read_r+0x20>)
 800c75c:	602a      	str	r2, [r5, #0]
 800c75e:	461a      	mov	r2, r3
 800c760:	f7f8 f9b7 	bl	8004ad2 <_read>
 800c764:	1c43      	adds	r3, r0, #1
 800c766:	d102      	bne.n	800c76e <_read_r+0x1e>
 800c768:	682b      	ldr	r3, [r5, #0]
 800c76a:	b103      	cbz	r3, 800c76e <_read_r+0x1e>
 800c76c:	6023      	str	r3, [r4, #0]
 800c76e:	bd38      	pop	{r3, r4, r5, pc}
 800c770:	200006c4 	.word	0x200006c4
 800c774:	00000000 	.word	0x00000000

0800c778 <atan>:
 800c778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c77c:	4bb6      	ldr	r3, [pc, #728]	; (800ca58 <atan+0x2e0>)
 800c77e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c782:	429e      	cmp	r6, r3
 800c784:	4604      	mov	r4, r0
 800c786:	460d      	mov	r5, r1
 800c788:	468b      	mov	fp, r1
 800c78a:	dd17      	ble.n	800c7bc <atan+0x44>
 800c78c:	4bb3      	ldr	r3, [pc, #716]	; (800ca5c <atan+0x2e4>)
 800c78e:	429e      	cmp	r6, r3
 800c790:	dc01      	bgt.n	800c796 <atan+0x1e>
 800c792:	d109      	bne.n	800c7a8 <atan+0x30>
 800c794:	b140      	cbz	r0, 800c7a8 <atan+0x30>
 800c796:	4622      	mov	r2, r4
 800c798:	462b      	mov	r3, r5
 800c79a:	4620      	mov	r0, r4
 800c79c:	4629      	mov	r1, r5
 800c79e:	f7f3 fce5 	bl	800016c <__adddf3>
 800c7a2:	4604      	mov	r4, r0
 800c7a4:	460d      	mov	r5, r1
 800c7a6:	e005      	b.n	800c7b4 <atan+0x3c>
 800c7a8:	f1bb 0f00 	cmp.w	fp, #0
 800c7ac:	4cac      	ldr	r4, [pc, #688]	; (800ca60 <atan+0x2e8>)
 800c7ae:	f300 8121 	bgt.w	800c9f4 <atan+0x27c>
 800c7b2:	4dac      	ldr	r5, [pc, #688]	; (800ca64 <atan+0x2ec>)
 800c7b4:	4620      	mov	r0, r4
 800c7b6:	4629      	mov	r1, r5
 800c7b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7bc:	4baa      	ldr	r3, [pc, #680]	; (800ca68 <atan+0x2f0>)
 800c7be:	429e      	cmp	r6, r3
 800c7c0:	dc11      	bgt.n	800c7e6 <atan+0x6e>
 800c7c2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c7c6:	429e      	cmp	r6, r3
 800c7c8:	dc0a      	bgt.n	800c7e0 <atan+0x68>
 800c7ca:	a38b      	add	r3, pc, #556	; (adr r3, 800c9f8 <atan+0x280>)
 800c7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d0:	f7f3 fccc 	bl	800016c <__adddf3>
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	4ba5      	ldr	r3, [pc, #660]	; (800ca6c <atan+0x2f4>)
 800c7d8:	f7f4 f90e 	bl	80009f8 <__aeabi_dcmpgt>
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	d1e9      	bne.n	800c7b4 <atan+0x3c>
 800c7e0:	f04f 3aff 	mov.w	sl, #4294967295
 800c7e4:	e027      	b.n	800c836 <atan+0xbe>
 800c7e6:	f000 f951 	bl	800ca8c <fabs>
 800c7ea:	4ba1      	ldr	r3, [pc, #644]	; (800ca70 <atan+0x2f8>)
 800c7ec:	4604      	mov	r4, r0
 800c7ee:	429e      	cmp	r6, r3
 800c7f0:	460d      	mov	r5, r1
 800c7f2:	f300 80b8 	bgt.w	800c966 <atan+0x1ee>
 800c7f6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c7fa:	429e      	cmp	r6, r3
 800c7fc:	f300 809c 	bgt.w	800c938 <atan+0x1c0>
 800c800:	4602      	mov	r2, r0
 800c802:	460b      	mov	r3, r1
 800c804:	f7f3 fcb2 	bl	800016c <__adddf3>
 800c808:	2200      	movs	r2, #0
 800c80a:	4b98      	ldr	r3, [pc, #608]	; (800ca6c <atan+0x2f4>)
 800c80c:	f7f3 fcac 	bl	8000168 <__aeabi_dsub>
 800c810:	2200      	movs	r2, #0
 800c812:	4606      	mov	r6, r0
 800c814:	460f      	mov	r7, r1
 800c816:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c81a:	4620      	mov	r0, r4
 800c81c:	4629      	mov	r1, r5
 800c81e:	f7f3 fca5 	bl	800016c <__adddf3>
 800c822:	4602      	mov	r2, r0
 800c824:	460b      	mov	r3, r1
 800c826:	4630      	mov	r0, r6
 800c828:	4639      	mov	r1, r7
 800c82a:	f7f3 ff7f 	bl	800072c <__aeabi_ddiv>
 800c82e:	f04f 0a00 	mov.w	sl, #0
 800c832:	4604      	mov	r4, r0
 800c834:	460d      	mov	r5, r1
 800c836:	4622      	mov	r2, r4
 800c838:	462b      	mov	r3, r5
 800c83a:	4620      	mov	r0, r4
 800c83c:	4629      	mov	r1, r5
 800c83e:	f7f3 fe4b 	bl	80004d8 <__aeabi_dmul>
 800c842:	4602      	mov	r2, r0
 800c844:	460b      	mov	r3, r1
 800c846:	4680      	mov	r8, r0
 800c848:	4689      	mov	r9, r1
 800c84a:	f7f3 fe45 	bl	80004d8 <__aeabi_dmul>
 800c84e:	a36c      	add	r3, pc, #432	; (adr r3, 800ca00 <atan+0x288>)
 800c850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c854:	4606      	mov	r6, r0
 800c856:	460f      	mov	r7, r1
 800c858:	f7f3 fe3e 	bl	80004d8 <__aeabi_dmul>
 800c85c:	a36a      	add	r3, pc, #424	; (adr r3, 800ca08 <atan+0x290>)
 800c85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c862:	f7f3 fc83 	bl	800016c <__adddf3>
 800c866:	4632      	mov	r2, r6
 800c868:	463b      	mov	r3, r7
 800c86a:	f7f3 fe35 	bl	80004d8 <__aeabi_dmul>
 800c86e:	a368      	add	r3, pc, #416	; (adr r3, 800ca10 <atan+0x298>)
 800c870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c874:	f7f3 fc7a 	bl	800016c <__adddf3>
 800c878:	4632      	mov	r2, r6
 800c87a:	463b      	mov	r3, r7
 800c87c:	f7f3 fe2c 	bl	80004d8 <__aeabi_dmul>
 800c880:	a365      	add	r3, pc, #404	; (adr r3, 800ca18 <atan+0x2a0>)
 800c882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c886:	f7f3 fc71 	bl	800016c <__adddf3>
 800c88a:	4632      	mov	r2, r6
 800c88c:	463b      	mov	r3, r7
 800c88e:	f7f3 fe23 	bl	80004d8 <__aeabi_dmul>
 800c892:	a363      	add	r3, pc, #396	; (adr r3, 800ca20 <atan+0x2a8>)
 800c894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c898:	f7f3 fc68 	bl	800016c <__adddf3>
 800c89c:	4632      	mov	r2, r6
 800c89e:	463b      	mov	r3, r7
 800c8a0:	f7f3 fe1a 	bl	80004d8 <__aeabi_dmul>
 800c8a4:	a360      	add	r3, pc, #384	; (adr r3, 800ca28 <atan+0x2b0>)
 800c8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8aa:	f7f3 fc5f 	bl	800016c <__adddf3>
 800c8ae:	4642      	mov	r2, r8
 800c8b0:	464b      	mov	r3, r9
 800c8b2:	f7f3 fe11 	bl	80004d8 <__aeabi_dmul>
 800c8b6:	a35e      	add	r3, pc, #376	; (adr r3, 800ca30 <atan+0x2b8>)
 800c8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8bc:	4680      	mov	r8, r0
 800c8be:	4689      	mov	r9, r1
 800c8c0:	4630      	mov	r0, r6
 800c8c2:	4639      	mov	r1, r7
 800c8c4:	f7f3 fe08 	bl	80004d8 <__aeabi_dmul>
 800c8c8:	a35b      	add	r3, pc, #364	; (adr r3, 800ca38 <atan+0x2c0>)
 800c8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ce:	f7f3 fc4b 	bl	8000168 <__aeabi_dsub>
 800c8d2:	4632      	mov	r2, r6
 800c8d4:	463b      	mov	r3, r7
 800c8d6:	f7f3 fdff 	bl	80004d8 <__aeabi_dmul>
 800c8da:	a359      	add	r3, pc, #356	; (adr r3, 800ca40 <atan+0x2c8>)
 800c8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e0:	f7f3 fc42 	bl	8000168 <__aeabi_dsub>
 800c8e4:	4632      	mov	r2, r6
 800c8e6:	463b      	mov	r3, r7
 800c8e8:	f7f3 fdf6 	bl	80004d8 <__aeabi_dmul>
 800c8ec:	a356      	add	r3, pc, #344	; (adr r3, 800ca48 <atan+0x2d0>)
 800c8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f2:	f7f3 fc39 	bl	8000168 <__aeabi_dsub>
 800c8f6:	4632      	mov	r2, r6
 800c8f8:	463b      	mov	r3, r7
 800c8fa:	f7f3 fded 	bl	80004d8 <__aeabi_dmul>
 800c8fe:	a354      	add	r3, pc, #336	; (adr r3, 800ca50 <atan+0x2d8>)
 800c900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c904:	f7f3 fc30 	bl	8000168 <__aeabi_dsub>
 800c908:	4632      	mov	r2, r6
 800c90a:	463b      	mov	r3, r7
 800c90c:	f7f3 fde4 	bl	80004d8 <__aeabi_dmul>
 800c910:	4602      	mov	r2, r0
 800c912:	460b      	mov	r3, r1
 800c914:	4640      	mov	r0, r8
 800c916:	4649      	mov	r1, r9
 800c918:	f7f3 fc28 	bl	800016c <__adddf3>
 800c91c:	4622      	mov	r2, r4
 800c91e:	462b      	mov	r3, r5
 800c920:	f7f3 fdda 	bl	80004d8 <__aeabi_dmul>
 800c924:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c928:	4602      	mov	r2, r0
 800c92a:	460b      	mov	r3, r1
 800c92c:	d144      	bne.n	800c9b8 <atan+0x240>
 800c92e:	4620      	mov	r0, r4
 800c930:	4629      	mov	r1, r5
 800c932:	f7f3 fc19 	bl	8000168 <__aeabi_dsub>
 800c936:	e734      	b.n	800c7a2 <atan+0x2a>
 800c938:	2200      	movs	r2, #0
 800c93a:	4b4c      	ldr	r3, [pc, #304]	; (800ca6c <atan+0x2f4>)
 800c93c:	f7f3 fc14 	bl	8000168 <__aeabi_dsub>
 800c940:	2200      	movs	r2, #0
 800c942:	4606      	mov	r6, r0
 800c944:	460f      	mov	r7, r1
 800c946:	4620      	mov	r0, r4
 800c948:	4629      	mov	r1, r5
 800c94a:	4b48      	ldr	r3, [pc, #288]	; (800ca6c <atan+0x2f4>)
 800c94c:	f7f3 fc0e 	bl	800016c <__adddf3>
 800c950:	4602      	mov	r2, r0
 800c952:	460b      	mov	r3, r1
 800c954:	4630      	mov	r0, r6
 800c956:	4639      	mov	r1, r7
 800c958:	f7f3 fee8 	bl	800072c <__aeabi_ddiv>
 800c95c:	f04f 0a01 	mov.w	sl, #1
 800c960:	4604      	mov	r4, r0
 800c962:	460d      	mov	r5, r1
 800c964:	e767      	b.n	800c836 <atan+0xbe>
 800c966:	4b43      	ldr	r3, [pc, #268]	; (800ca74 <atan+0x2fc>)
 800c968:	429e      	cmp	r6, r3
 800c96a:	da1a      	bge.n	800c9a2 <atan+0x22a>
 800c96c:	2200      	movs	r2, #0
 800c96e:	4b42      	ldr	r3, [pc, #264]	; (800ca78 <atan+0x300>)
 800c970:	f7f3 fbfa 	bl	8000168 <__aeabi_dsub>
 800c974:	2200      	movs	r2, #0
 800c976:	4606      	mov	r6, r0
 800c978:	460f      	mov	r7, r1
 800c97a:	4620      	mov	r0, r4
 800c97c:	4629      	mov	r1, r5
 800c97e:	4b3e      	ldr	r3, [pc, #248]	; (800ca78 <atan+0x300>)
 800c980:	f7f3 fdaa 	bl	80004d8 <__aeabi_dmul>
 800c984:	2200      	movs	r2, #0
 800c986:	4b39      	ldr	r3, [pc, #228]	; (800ca6c <atan+0x2f4>)
 800c988:	f7f3 fbf0 	bl	800016c <__adddf3>
 800c98c:	4602      	mov	r2, r0
 800c98e:	460b      	mov	r3, r1
 800c990:	4630      	mov	r0, r6
 800c992:	4639      	mov	r1, r7
 800c994:	f7f3 feca 	bl	800072c <__aeabi_ddiv>
 800c998:	f04f 0a02 	mov.w	sl, #2
 800c99c:	4604      	mov	r4, r0
 800c99e:	460d      	mov	r5, r1
 800c9a0:	e749      	b.n	800c836 <atan+0xbe>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	460b      	mov	r3, r1
 800c9a6:	2000      	movs	r0, #0
 800c9a8:	4934      	ldr	r1, [pc, #208]	; (800ca7c <atan+0x304>)
 800c9aa:	f7f3 febf 	bl	800072c <__aeabi_ddiv>
 800c9ae:	f04f 0a03 	mov.w	sl, #3
 800c9b2:	4604      	mov	r4, r0
 800c9b4:	460d      	mov	r5, r1
 800c9b6:	e73e      	b.n	800c836 <atan+0xbe>
 800c9b8:	4b31      	ldr	r3, [pc, #196]	; (800ca80 <atan+0x308>)
 800c9ba:	4e32      	ldr	r6, [pc, #200]	; (800ca84 <atan+0x30c>)
 800c9bc:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c9c0:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800c9c4:	e9da 2300 	ldrd	r2, r3, [sl]
 800c9c8:	f7f3 fbce 	bl	8000168 <__aeabi_dsub>
 800c9cc:	4622      	mov	r2, r4
 800c9ce:	462b      	mov	r3, r5
 800c9d0:	f7f3 fbca 	bl	8000168 <__aeabi_dsub>
 800c9d4:	4602      	mov	r2, r0
 800c9d6:	460b      	mov	r3, r1
 800c9d8:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c9dc:	f7f3 fbc4 	bl	8000168 <__aeabi_dsub>
 800c9e0:	f1bb 0f00 	cmp.w	fp, #0
 800c9e4:	4604      	mov	r4, r0
 800c9e6:	460d      	mov	r5, r1
 800c9e8:	f6bf aee4 	bge.w	800c7b4 <atan+0x3c>
 800c9ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9f0:	461d      	mov	r5, r3
 800c9f2:	e6df      	b.n	800c7b4 <atan+0x3c>
 800c9f4:	4d24      	ldr	r5, [pc, #144]	; (800ca88 <atan+0x310>)
 800c9f6:	e6dd      	b.n	800c7b4 <atan+0x3c>
 800c9f8:	8800759c 	.word	0x8800759c
 800c9fc:	7e37e43c 	.word	0x7e37e43c
 800ca00:	e322da11 	.word	0xe322da11
 800ca04:	3f90ad3a 	.word	0x3f90ad3a
 800ca08:	24760deb 	.word	0x24760deb
 800ca0c:	3fa97b4b 	.word	0x3fa97b4b
 800ca10:	a0d03d51 	.word	0xa0d03d51
 800ca14:	3fb10d66 	.word	0x3fb10d66
 800ca18:	c54c206e 	.word	0xc54c206e
 800ca1c:	3fb745cd 	.word	0x3fb745cd
 800ca20:	920083ff 	.word	0x920083ff
 800ca24:	3fc24924 	.word	0x3fc24924
 800ca28:	5555550d 	.word	0x5555550d
 800ca2c:	3fd55555 	.word	0x3fd55555
 800ca30:	2c6a6c2f 	.word	0x2c6a6c2f
 800ca34:	bfa2b444 	.word	0xbfa2b444
 800ca38:	52defd9a 	.word	0x52defd9a
 800ca3c:	3fadde2d 	.word	0x3fadde2d
 800ca40:	af749a6d 	.word	0xaf749a6d
 800ca44:	3fb3b0f2 	.word	0x3fb3b0f2
 800ca48:	fe231671 	.word	0xfe231671
 800ca4c:	3fbc71c6 	.word	0x3fbc71c6
 800ca50:	9998ebc4 	.word	0x9998ebc4
 800ca54:	3fc99999 	.word	0x3fc99999
 800ca58:	440fffff 	.word	0x440fffff
 800ca5c:	7ff00000 	.word	0x7ff00000
 800ca60:	54442d18 	.word	0x54442d18
 800ca64:	bff921fb 	.word	0xbff921fb
 800ca68:	3fdbffff 	.word	0x3fdbffff
 800ca6c:	3ff00000 	.word	0x3ff00000
 800ca70:	3ff2ffff 	.word	0x3ff2ffff
 800ca74:	40038000 	.word	0x40038000
 800ca78:	3ff80000 	.word	0x3ff80000
 800ca7c:	bff00000 	.word	0xbff00000
 800ca80:	0800d5d0 	.word	0x0800d5d0
 800ca84:	0800d5b0 	.word	0x0800d5b0
 800ca88:	3ff921fb 	.word	0x3ff921fb

0800ca8c <fabs>:
 800ca8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ca90:	4770      	bx	lr

0800ca92 <atan2>:
 800ca92:	f000 b825 	b.w	800cae0 <__ieee754_atan2>

0800ca96 <sqrt>:
 800ca96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca98:	4606      	mov	r6, r0
 800ca9a:	460f      	mov	r7, r1
 800ca9c:	f000 f8f2 	bl	800cc84 <__ieee754_sqrt>
 800caa0:	4632      	mov	r2, r6
 800caa2:	4604      	mov	r4, r0
 800caa4:	460d      	mov	r5, r1
 800caa6:	463b      	mov	r3, r7
 800caa8:	4630      	mov	r0, r6
 800caaa:	4639      	mov	r1, r7
 800caac:	f7f3 ffae 	bl	8000a0c <__aeabi_dcmpun>
 800cab0:	b990      	cbnz	r0, 800cad8 <sqrt+0x42>
 800cab2:	2200      	movs	r2, #0
 800cab4:	2300      	movs	r3, #0
 800cab6:	4630      	mov	r0, r6
 800cab8:	4639      	mov	r1, r7
 800caba:	f7f3 ff7f 	bl	80009bc <__aeabi_dcmplt>
 800cabe:	b158      	cbz	r0, 800cad8 <sqrt+0x42>
 800cac0:	f7fb f9f6 	bl	8007eb0 <__errno>
 800cac4:	2321      	movs	r3, #33	; 0x21
 800cac6:	2200      	movs	r2, #0
 800cac8:	6003      	str	r3, [r0, #0]
 800caca:	2300      	movs	r3, #0
 800cacc:	4610      	mov	r0, r2
 800cace:	4619      	mov	r1, r3
 800cad0:	f7f3 fe2c 	bl	800072c <__aeabi_ddiv>
 800cad4:	4604      	mov	r4, r0
 800cad6:	460d      	mov	r5, r1
 800cad8:	4620      	mov	r0, r4
 800cada:	4629      	mov	r1, r5
 800cadc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cae0 <__ieee754_atan2>:
 800cae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae4:	4692      	mov	sl, r2
 800cae6:	4699      	mov	r9, r3
 800cae8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800caec:	461f      	mov	r7, r3
 800caee:	f1ca 0300 	rsb	r3, sl, #0
 800caf2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800cc78 <__ieee754_atan2+0x198>
 800caf6:	ea43 030a 	orr.w	r3, r3, sl
 800cafa:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800cafe:	4573      	cmp	r3, lr
 800cb00:	4604      	mov	r4, r0
 800cb02:	460d      	mov	r5, r1
 800cb04:	d808      	bhi.n	800cb18 <__ieee754_atan2+0x38>
 800cb06:	4246      	negs	r6, r0
 800cb08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cb0c:	4306      	orrs	r6, r0
 800cb0e:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 800cb12:	4576      	cmp	r6, lr
 800cb14:	468c      	mov	ip, r1
 800cb16:	d908      	bls.n	800cb2a <__ieee754_atan2+0x4a>
 800cb18:	4652      	mov	r2, sl
 800cb1a:	464b      	mov	r3, r9
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	4629      	mov	r1, r5
 800cb20:	f7f3 fb24 	bl	800016c <__adddf3>
 800cb24:	4604      	mov	r4, r0
 800cb26:	460d      	mov	r5, r1
 800cb28:	e019      	b.n	800cb5e <__ieee754_atan2+0x7e>
 800cb2a:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 800cb2e:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800cb32:	ea56 060a 	orrs.w	r6, r6, sl
 800cb36:	d103      	bne.n	800cb40 <__ieee754_atan2+0x60>
 800cb38:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb3c:	f7ff be1c 	b.w	800c778 <atan>
 800cb40:	17be      	asrs	r6, r7, #30
 800cb42:	f006 0602 	and.w	r6, r6, #2
 800cb46:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800cb4a:	ea53 0100 	orrs.w	r1, r3, r0
 800cb4e:	d10a      	bne.n	800cb66 <__ieee754_atan2+0x86>
 800cb50:	2e02      	cmp	r6, #2
 800cb52:	d067      	beq.n	800cc24 <__ieee754_atan2+0x144>
 800cb54:	2e03      	cmp	r6, #3
 800cb56:	d102      	bne.n	800cb5e <__ieee754_atan2+0x7e>
 800cb58:	a53b      	add	r5, pc, #236	; (adr r5, 800cc48 <__ieee754_atan2+0x168>)
 800cb5a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cb5e:	4620      	mov	r0, r4
 800cb60:	4629      	mov	r1, r5
 800cb62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb66:	ea52 010a 	orrs.w	r1, r2, sl
 800cb6a:	d106      	bne.n	800cb7a <__ieee754_atan2+0x9a>
 800cb6c:	f1bc 0f00 	cmp.w	ip, #0
 800cb70:	da63      	bge.n	800cc3a <__ieee754_atan2+0x15a>
 800cb72:	a537      	add	r5, pc, #220	; (adr r5, 800cc50 <__ieee754_atan2+0x170>)
 800cb74:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cb78:	e7f1      	b.n	800cb5e <__ieee754_atan2+0x7e>
 800cb7a:	4572      	cmp	r2, lr
 800cb7c:	d10f      	bne.n	800cb9e <__ieee754_atan2+0xbe>
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	f106 36ff 	add.w	r6, r6, #4294967295
 800cb84:	d107      	bne.n	800cb96 <__ieee754_atan2+0xb6>
 800cb86:	2e02      	cmp	r6, #2
 800cb88:	d850      	bhi.n	800cc2c <__ieee754_atan2+0x14c>
 800cb8a:	4b3c      	ldr	r3, [pc, #240]	; (800cc7c <__ieee754_atan2+0x19c>)
 800cb8c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800cb90:	e9d6 4500 	ldrd	r4, r5, [r6]
 800cb94:	e7e3      	b.n	800cb5e <__ieee754_atan2+0x7e>
 800cb96:	2e02      	cmp	r6, #2
 800cb98:	d84c      	bhi.n	800cc34 <__ieee754_atan2+0x154>
 800cb9a:	4b39      	ldr	r3, [pc, #228]	; (800cc80 <__ieee754_atan2+0x1a0>)
 800cb9c:	e7f6      	b.n	800cb8c <__ieee754_atan2+0xac>
 800cb9e:	4573      	cmp	r3, lr
 800cba0:	d0e4      	beq.n	800cb6c <__ieee754_atan2+0x8c>
 800cba2:	1a9b      	subs	r3, r3, r2
 800cba4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800cba8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800cbac:	da20      	bge.n	800cbf0 <__ieee754_atan2+0x110>
 800cbae:	2f00      	cmp	r7, #0
 800cbb0:	da01      	bge.n	800cbb6 <__ieee754_atan2+0xd6>
 800cbb2:	323c      	adds	r2, #60	; 0x3c
 800cbb4:	db20      	blt.n	800cbf8 <__ieee754_atan2+0x118>
 800cbb6:	4652      	mov	r2, sl
 800cbb8:	464b      	mov	r3, r9
 800cbba:	4620      	mov	r0, r4
 800cbbc:	4629      	mov	r1, r5
 800cbbe:	f7f3 fdb5 	bl	800072c <__aeabi_ddiv>
 800cbc2:	f7ff ff63 	bl	800ca8c <fabs>
 800cbc6:	f7ff fdd7 	bl	800c778 <atan>
 800cbca:	4604      	mov	r4, r0
 800cbcc:	460d      	mov	r5, r1
 800cbce:	2e01      	cmp	r6, #1
 800cbd0:	d015      	beq.n	800cbfe <__ieee754_atan2+0x11e>
 800cbd2:	2e02      	cmp	r6, #2
 800cbd4:	d017      	beq.n	800cc06 <__ieee754_atan2+0x126>
 800cbd6:	2e00      	cmp	r6, #0
 800cbd8:	d0c1      	beq.n	800cb5e <__ieee754_atan2+0x7e>
 800cbda:	a31f      	add	r3, pc, #124	; (adr r3, 800cc58 <__ieee754_atan2+0x178>)
 800cbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe0:	4620      	mov	r0, r4
 800cbe2:	4629      	mov	r1, r5
 800cbe4:	f7f3 fac0 	bl	8000168 <__aeabi_dsub>
 800cbe8:	a31d      	add	r3, pc, #116	; (adr r3, 800cc60 <__ieee754_atan2+0x180>)
 800cbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbee:	e016      	b.n	800cc1e <__ieee754_atan2+0x13e>
 800cbf0:	a51d      	add	r5, pc, #116	; (adr r5, 800cc68 <__ieee754_atan2+0x188>)
 800cbf2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cbf6:	e7ea      	b.n	800cbce <__ieee754_atan2+0xee>
 800cbf8:	2400      	movs	r4, #0
 800cbfa:	2500      	movs	r5, #0
 800cbfc:	e7e7      	b.n	800cbce <__ieee754_atan2+0xee>
 800cbfe:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800cc02:	461d      	mov	r5, r3
 800cc04:	e7ab      	b.n	800cb5e <__ieee754_atan2+0x7e>
 800cc06:	a314      	add	r3, pc, #80	; (adr r3, 800cc58 <__ieee754_atan2+0x178>)
 800cc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0c:	4620      	mov	r0, r4
 800cc0e:	4629      	mov	r1, r5
 800cc10:	f7f3 faaa 	bl	8000168 <__aeabi_dsub>
 800cc14:	4602      	mov	r2, r0
 800cc16:	460b      	mov	r3, r1
 800cc18:	a111      	add	r1, pc, #68	; (adr r1, 800cc60 <__ieee754_atan2+0x180>)
 800cc1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc1e:	f7f3 faa3 	bl	8000168 <__aeabi_dsub>
 800cc22:	e77f      	b.n	800cb24 <__ieee754_atan2+0x44>
 800cc24:	a50e      	add	r5, pc, #56	; (adr r5, 800cc60 <__ieee754_atan2+0x180>)
 800cc26:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cc2a:	e798      	b.n	800cb5e <__ieee754_atan2+0x7e>
 800cc2c:	a510      	add	r5, pc, #64	; (adr r5, 800cc70 <__ieee754_atan2+0x190>)
 800cc2e:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cc32:	e794      	b.n	800cb5e <__ieee754_atan2+0x7e>
 800cc34:	2400      	movs	r4, #0
 800cc36:	2500      	movs	r5, #0
 800cc38:	e791      	b.n	800cb5e <__ieee754_atan2+0x7e>
 800cc3a:	a50b      	add	r5, pc, #44	; (adr r5, 800cc68 <__ieee754_atan2+0x188>)
 800cc3c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cc40:	e78d      	b.n	800cb5e <__ieee754_atan2+0x7e>
 800cc42:	bf00      	nop
 800cc44:	f3af 8000 	nop.w
 800cc48:	54442d18 	.word	0x54442d18
 800cc4c:	c00921fb 	.word	0xc00921fb
 800cc50:	54442d18 	.word	0x54442d18
 800cc54:	bff921fb 	.word	0xbff921fb
 800cc58:	33145c07 	.word	0x33145c07
 800cc5c:	3ca1a626 	.word	0x3ca1a626
 800cc60:	54442d18 	.word	0x54442d18
 800cc64:	400921fb 	.word	0x400921fb
 800cc68:	54442d18 	.word	0x54442d18
 800cc6c:	3ff921fb 	.word	0x3ff921fb
 800cc70:	54442d18 	.word	0x54442d18
 800cc74:	3fe921fb 	.word	0x3fe921fb
 800cc78:	7ff00000 	.word	0x7ff00000
 800cc7c:	0800d5f0 	.word	0x0800d5f0
 800cc80:	0800d608 	.word	0x0800d608

0800cc84 <__ieee754_sqrt>:
 800cc84:	f8df c158 	ldr.w	ip, [pc, #344]	; 800cde0 <__ieee754_sqrt+0x15c>
 800cc88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc8c:	ea3c 0c01 	bics.w	ip, ip, r1
 800cc90:	4606      	mov	r6, r0
 800cc92:	460d      	mov	r5, r1
 800cc94:	460c      	mov	r4, r1
 800cc96:	460a      	mov	r2, r1
 800cc98:	4607      	mov	r7, r0
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	d10f      	bne.n	800ccbe <__ieee754_sqrt+0x3a>
 800cc9e:	4602      	mov	r2, r0
 800cca0:	460b      	mov	r3, r1
 800cca2:	f7f3 fc19 	bl	80004d8 <__aeabi_dmul>
 800cca6:	4602      	mov	r2, r0
 800cca8:	460b      	mov	r3, r1
 800ccaa:	4630      	mov	r0, r6
 800ccac:	4629      	mov	r1, r5
 800ccae:	f7f3 fa5d 	bl	800016c <__adddf3>
 800ccb2:	4606      	mov	r6, r0
 800ccb4:	460d      	mov	r5, r1
 800ccb6:	4630      	mov	r0, r6
 800ccb8:	4629      	mov	r1, r5
 800ccba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccbe:	2900      	cmp	r1, #0
 800ccc0:	dc0e      	bgt.n	800cce0 <__ieee754_sqrt+0x5c>
 800ccc2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800ccc6:	ea5c 0707 	orrs.w	r7, ip, r7
 800ccca:	d0f4      	beq.n	800ccb6 <__ieee754_sqrt+0x32>
 800cccc:	b141      	cbz	r1, 800cce0 <__ieee754_sqrt+0x5c>
 800ccce:	4602      	mov	r2, r0
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	f7f3 fa49 	bl	8000168 <__aeabi_dsub>
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	460b      	mov	r3, r1
 800ccda:	f7f3 fd27 	bl	800072c <__aeabi_ddiv>
 800ccde:	e7e8      	b.n	800ccb2 <__ieee754_sqrt+0x2e>
 800cce0:	1521      	asrs	r1, r4, #20
 800cce2:	d075      	beq.n	800cdd0 <__ieee754_sqrt+0x14c>
 800cce4:	07cc      	lsls	r4, r1, #31
 800cce6:	f04f 0400 	mov.w	r4, #0
 800ccea:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ccee:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800ccf2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ccf6:	bf5e      	ittt	pl
 800ccf8:	0fd9      	lsrpl	r1, r3, #31
 800ccfa:	005b      	lslpl	r3, r3, #1
 800ccfc:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800cd00:	0fd9      	lsrs	r1, r3, #31
 800cd02:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800cd06:	2516      	movs	r5, #22
 800cd08:	4620      	mov	r0, r4
 800cd0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cd0e:	107f      	asrs	r7, r7, #1
 800cd10:	005b      	lsls	r3, r3, #1
 800cd12:	1846      	adds	r6, r0, r1
 800cd14:	4296      	cmp	r6, r2
 800cd16:	bfde      	ittt	le
 800cd18:	1b92      	suble	r2, r2, r6
 800cd1a:	1870      	addle	r0, r6, r1
 800cd1c:	1864      	addle	r4, r4, r1
 800cd1e:	0052      	lsls	r2, r2, #1
 800cd20:	3d01      	subs	r5, #1
 800cd22:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cd26:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cd2a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cd2e:	d1f0      	bne.n	800cd12 <__ieee754_sqrt+0x8e>
 800cd30:	4629      	mov	r1, r5
 800cd32:	f04f 0e20 	mov.w	lr, #32
 800cd36:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cd3a:	4282      	cmp	r2, r0
 800cd3c:	eb06 0c05 	add.w	ip, r6, r5
 800cd40:	dc02      	bgt.n	800cd48 <__ieee754_sqrt+0xc4>
 800cd42:	d113      	bne.n	800cd6c <__ieee754_sqrt+0xe8>
 800cd44:	459c      	cmp	ip, r3
 800cd46:	d811      	bhi.n	800cd6c <__ieee754_sqrt+0xe8>
 800cd48:	f1bc 0f00 	cmp.w	ip, #0
 800cd4c:	eb0c 0506 	add.w	r5, ip, r6
 800cd50:	da43      	bge.n	800cdda <__ieee754_sqrt+0x156>
 800cd52:	2d00      	cmp	r5, #0
 800cd54:	db41      	blt.n	800cdda <__ieee754_sqrt+0x156>
 800cd56:	f100 0801 	add.w	r8, r0, #1
 800cd5a:	1a12      	subs	r2, r2, r0
 800cd5c:	4640      	mov	r0, r8
 800cd5e:	459c      	cmp	ip, r3
 800cd60:	bf88      	it	hi
 800cd62:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800cd66:	eba3 030c 	sub.w	r3, r3, ip
 800cd6a:	4431      	add	r1, r6
 800cd6c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800cd70:	f1be 0e01 	subs.w	lr, lr, #1
 800cd74:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800cd78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cd7c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cd80:	d1db      	bne.n	800cd3a <__ieee754_sqrt+0xb6>
 800cd82:	4313      	orrs	r3, r2
 800cd84:	d006      	beq.n	800cd94 <__ieee754_sqrt+0x110>
 800cd86:	1c48      	adds	r0, r1, #1
 800cd88:	bf0b      	itete	eq
 800cd8a:	4671      	moveq	r1, lr
 800cd8c:	3101      	addne	r1, #1
 800cd8e:	3401      	addeq	r4, #1
 800cd90:	f021 0101 	bicne.w	r1, r1, #1
 800cd94:	1063      	asrs	r3, r4, #1
 800cd96:	0849      	lsrs	r1, r1, #1
 800cd98:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800cd9c:	07e2      	lsls	r2, r4, #31
 800cd9e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800cda2:	bf48      	it	mi
 800cda4:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800cda8:	460e      	mov	r6, r1
 800cdaa:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800cdae:	e782      	b.n	800ccb6 <__ieee754_sqrt+0x32>
 800cdb0:	0ada      	lsrs	r2, r3, #11
 800cdb2:	3815      	subs	r0, #21
 800cdb4:	055b      	lsls	r3, r3, #21
 800cdb6:	2a00      	cmp	r2, #0
 800cdb8:	d0fa      	beq.n	800cdb0 <__ieee754_sqrt+0x12c>
 800cdba:	02d5      	lsls	r5, r2, #11
 800cdbc:	d50a      	bpl.n	800cdd4 <__ieee754_sqrt+0x150>
 800cdbe:	f1c1 0420 	rsb	r4, r1, #32
 800cdc2:	fa23 f404 	lsr.w	r4, r3, r4
 800cdc6:	1e4d      	subs	r5, r1, #1
 800cdc8:	408b      	lsls	r3, r1
 800cdca:	4322      	orrs	r2, r4
 800cdcc:	1b41      	subs	r1, r0, r5
 800cdce:	e789      	b.n	800cce4 <__ieee754_sqrt+0x60>
 800cdd0:	4608      	mov	r0, r1
 800cdd2:	e7f0      	b.n	800cdb6 <__ieee754_sqrt+0x132>
 800cdd4:	0052      	lsls	r2, r2, #1
 800cdd6:	3101      	adds	r1, #1
 800cdd8:	e7ef      	b.n	800cdba <__ieee754_sqrt+0x136>
 800cdda:	4680      	mov	r8, r0
 800cddc:	e7bd      	b.n	800cd5a <__ieee754_sqrt+0xd6>
 800cdde:	bf00      	nop
 800cde0:	7ff00000 	.word	0x7ff00000

0800cde4 <_init>:
 800cde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cde6:	bf00      	nop
 800cde8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdea:	bc08      	pop	{r3}
 800cdec:	469e      	mov	lr, r3
 800cdee:	4770      	bx	lr

0800cdf0 <_fini>:
 800cdf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdf2:	bf00      	nop
 800cdf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdf6:	bc08      	pop	{r3}
 800cdf8:	469e      	mov	lr, r3
 800cdfa:	4770      	bx	lr
